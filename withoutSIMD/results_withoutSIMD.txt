Iteration with GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 2535301200456458802993406410752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  |  652674772 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  692809474 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 1032594432 |
|              PWR_PKG_ENERGY              |   PWR0  |     2.0040 |
|              PWR_DRAM_ENERGY             |   PWR3  |     1.0297 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   18890896 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   19242355 |
|                DRAM_WRITES               | MBOX0C2 |    1647186 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.5168 |
|        Runtime unhalted [s]       |    0.3007 |
|            Clock [MHz]            | 1545.8133 |
|                CPI                |    1.0615 |
|             Energy [J]            |    2.0040 |
|             Power [W]             |    3.8775 |
|          Energy DRAM [J]          |    1.0297 |
|           Power DRAM [W]          |    1.9924 |
|            DP [MFLOP/s]           |   36.5518 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   36.5518 |
|  Memory load bandwidth [MBytes/s] | 2382.8345 |
|  Memory load data volume [GBytes] |    1.2315 |
| Memory evict bandwidth [MBytes/s] |  203.9756 |
| Memory evict data volume [GBytes] |    0.1054 |
|    Memory bandwidth [MBytes/s]    | 2586.8101 |
|    Memory data volume [GBytes]    |    1.3369 |
|       Operational intensity       |    0.0141 |
+-----------------------------------+-----------+

Iteration with GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 2535301200456458802993406410752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  |  652674221 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  705193574 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 1024790208 |
|              PWR_PKG_ENERGY              |   PWR0  |     1.9651 |
|              PWR_DRAM_ENERGY             |   PWR3  |     1.0150 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   18890894 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   19108930 |
|                DRAM_WRITES               | MBOX0C2 |    1303328 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.5109 |
|        Runtime unhalted [s]       |    0.3061 |
|            Clock [MHz]            | 1585.4105 |
|                CPI                |    1.0805 |
|             Energy [J]            |    1.9651 |
|             Power [W]             |    3.8466 |
|          Energy DRAM [J]          |    1.0150 |
|           Power DRAM [W]          |    1.9869 |
|            DP [MFLOP/s]           |   36.9788 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   36.9788 |
|  Memory load bandwidth [MBytes/s] | 2393.9600 |
|  Memory load data volume [GBytes] |    1.2230 |
| Memory evict bandwidth [MBytes/s] |  163.2805 |
| Memory evict data volume [GBytes] |    0.0834 |
|    Memory bandwidth [MBytes/s]    | 2557.2405 |
|    Memory data volume [GBytes]    |    1.3064 |
|       Operational intensity       |    0.0145 |
+-----------------------------------+-----------+

Iteration with GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 2535301200456458802993406410752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  |  652674219 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  700925214 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 1024383456 |
|              PWR_PKG_ENERGY              |   PWR0  |     1.9655 |
|              PWR_DRAM_ENERGY             |   PWR3  |     1.0145 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   18890895 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   19107513 |
|                DRAM_WRITES               | MBOX0C2 |    1310301 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.5093 |
|        Runtime unhalted [s]       |    0.3042 |
|            Clock [MHz]            | 1576.4255 |
|                CPI                |    1.0739 |
|             Energy [J]            |    1.9655 |
|             Power [W]             |    3.8595 |
|          Energy DRAM [J]          |    1.0145 |
|           Power DRAM [W]          |    1.9921 |
|            DP [MFLOP/s]           |   37.0951 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   37.0951 |
|  Memory load bandwidth [MBytes/s] | 2401.3086 |
|  Memory load data volume [GBytes] |    1.2229 |
| Memory evict bandwidth [MBytes/s] |  164.6702 |
| Memory evict data volume [GBytes] |    0.0839 |
|    Memory bandwidth [MBytes/s]    | 2565.9788 |
|    Memory data volume [GBytes]    |    1.3067 |
|       Operational intensity       |    0.0145 |
+-----------------------------------+-----------+

Iteration with GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 2535301200456458802993406410752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  |  652674265 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  692814684 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 1027037088 |
|              PWR_PKG_ENERGY              |   PWR0  |     1.9562 |
|              PWR_DRAM_ENERGY             |   PWR3  |     1.0170 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   18890893 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   19114761 |
|                DRAM_WRITES               | MBOX0C2 |    1315960 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.5123 |
|        Runtime unhalted [s]       |    0.3007 |
|            Clock [MHz]            | 1554.1896 |
|                CPI                |    1.0615 |
|             Energy [J]            |    1.9562 |
|             Power [W]             |    3.8189 |
|          Energy DRAM [J]          |    1.0170 |
|           Power DRAM [W]          |    1.9853 |
|            DP [MFLOP/s]           |   36.8779 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   36.8779 |
|  Memory load bandwidth [MBytes/s] | 2388.1558 |
|  Memory load data volume [GBytes] |    1.2233 |
| Memory evict bandwidth [MBytes/s] |  164.4131 |
| Memory evict data volume [GBytes] |    0.0842 |
|    Memory bandwidth [MBytes/s]    | 2552.5690 |
|    Memory data volume [GBytes]    |    1.3076 |
|       Operational intensity       |    0.0144 |
+-----------------------------------+-----------+

Iteration with GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 2535301200456458802993406410752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  |  652674218 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  696420140 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 1016669472 |
|              PWR_PKG_ENERGY              |   PWR0  |     1.9695 |
|              PWR_DRAM_ENERGY             |   PWR3  |     1.0128 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   18890895 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   19221615 |
|                DRAM_WRITES               | MBOX0C2 |    1319119 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.5053 |
|        Runtime unhalted [s]       |    0.3023 |
|            Clock [MHz]            | 1578.0543 |
|                CPI                |    1.0670 |
|             Energy [J]            |    1.9695 |
|             Power [W]             |    3.8979 |
|          Energy DRAM [J]          |    1.0128 |
|           Power DRAM [W]          |    2.0045 |
|            DP [MFLOP/s]           |   37.3883 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   37.3883 |
|  Memory load bandwidth [MBytes/s] | 2434.7448 |
|  Memory load data volume [GBytes] |    1.2302 |
| Memory evict bandwidth [MBytes/s] |  167.0889 |
| Memory evict data volume [GBytes] |    0.0844 |
|    Memory bandwidth [MBytes/s]    | 2601.8337 |
|    Memory data volume [GBytes]    |    1.3146 |
|       Operational intensity       |    0.0144 |
+-----------------------------------+-----------+

Iteration with GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 3213876088517980551083924184682325205044405987565585670602752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 1377231753 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 1440290812 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 2162395680 |
|              PWR_PKG_ENERGY              |   PWR0  |     4.0672 |
|              PWR_DRAM_ENERGY             |   PWR3  |     2.1318 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   39872734 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   40841712 |
|                DRAM_WRITES               | MBOX0C2 |    2711102 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.0637 |
|        Runtime unhalted [s]       |    0.6252 |
|            Clock [MHz]            | 1534.4932 |
|                CPI                |    1.0458 |
|             Energy [J]            |    4.0672 |
|             Power [W]             |    3.8236 |
|          Energy DRAM [J]          |    2.1318 |
|           Power DRAM [W]          |    2.0041 |
|            DP [MFLOP/s]           |   37.4849 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   37.4849 |
|  Memory load bandwidth [MBytes/s] | 2457.3365 |
|  Memory load data volume [GBytes] |    2.6139 |
| Memory evict bandwidth [MBytes/s] |  163.1198 |
| Memory evict data volume [GBytes] |    0.1735 |
|    Memory bandwidth [MBytes/s]    | 2620.4563 |
|    Memory data volume [GBytes]    |    2.7874 |
|       Operational intensity       |    0.0143 |
+-----------------------------------+-----------+

Iteration with GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 3213876088517980551083924184682325205044405987565585670602752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 1377231805 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 1440292792 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 2146830912 |
|              PWR_PKG_ENERGY              |   PWR0  |     4.0949 |
|              PWR_DRAM_ENERGY             |   PWR3  |     2.1294 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   39872734 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   40872438 |
|                DRAM_WRITES               | MBOX0C2 |    2752169 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.0564 |
|        Runtime unhalted [s]       |    0.6251 |
|            Clock [MHz]            | 1545.7048 |
|                CPI                |    1.0458 |
|             Energy [J]            |    4.0949 |
|             Power [W]             |    3.8763 |
|          Energy DRAM [J]          |    2.1294 |
|           Power DRAM [W]          |    2.0157 |
|            DP [MFLOP/s]           |   37.7440 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   37.7440 |
|  Memory load bandwidth [MBytes/s] | 2476.1835 |
|  Memory load data volume [GBytes] |    2.6158 |
| Memory evict bandwidth [MBytes/s] |  166.7352 |
| Memory evict data volume [GBytes] |    0.1761 |
|    Memory bandwidth [MBytes/s]    | 2642.9188 |
|    Memory data volume [GBytes]    |    2.7920 |
|       Operational intensity       |    0.0143 |
+-----------------------------------+-----------+

Iteration with GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 3213876088517980551083924184682325205044405987565585670602752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 1377231790 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 1464983613 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 2176609536 |
|              PWR_PKG_ENERGY              |   PWR0  |     4.1362 |
|              PWR_DRAM_ENERGY             |   PWR3  |     2.1517 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   39872736 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   41489408 |
|                DRAM_WRITES               | MBOX0C2 |    2733893 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.0714 |
|        Runtime unhalted [s]       |    0.6359 |
|            Clock [MHz]            | 1550.6938 |
|                CPI                |    1.0637 |
|             Energy [J]            |    4.1362 |
|             Power [W]             |    3.8604 |
|          Energy DRAM [J]          |    2.1517 |
|           Power DRAM [W]          |    2.0083 |
|            DP [MFLOP/s]           |   37.2142 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   37.2142 |
|  Memory load bandwidth [MBytes/s] | 2478.2798 |
|  Memory load data volume [GBytes] |    2.6553 |
| Memory evict bandwidth [MBytes/s] |  163.3032 |
| Memory evict data volume [GBytes] |    0.1750 |
|    Memory bandwidth [MBytes/s]    | 2641.5829 |
|    Memory data volume [GBytes]    |    2.8303 |
|       Operational intensity       |    0.0141 |
+-----------------------------------+-----------+

Iteration with GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 3213876088517980551083924184682325205044405987565585670602752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 1377231740 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 1448629399 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 2152687200 |
|              PWR_PKG_ENERGY              |   PWR0  |     4.0837 |
|              PWR_DRAM_ENERGY             |   PWR3  |     2.1330 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   39872735 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   41448493 |
|                DRAM_WRITES               | MBOX0C2 |    2721544 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.0612 |
|        Runtime unhalted [s]       |    0.6288 |
|            Clock [MHz]            | 1550.3939 |
|                CPI                |    1.0518 |
|             Energy [J]            |    4.0837 |
|             Power [W]             |    3.8481 |
|          Energy DRAM [J]          |    2.1330 |
|           Power DRAM [W]          |    2.0099 |
|            DP [MFLOP/s]           |   37.5724 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   37.5724 |
|  Memory load bandwidth [MBytes/s] | 2499.6655 |
|  Memory load data volume [GBytes] |    2.6527 |
| Memory evict bandwidth [MBytes/s] |  164.1302 |
| Memory evict data volume [GBytes] |    0.1742 |
|    Memory bandwidth [MBytes/s]    | 2663.7957 |
|    Memory data volume [GBytes]    |    2.8269 |
|       Operational intensity       |    0.0141 |
+-----------------------------------+-----------+

Iteration with GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 3213876088517980551083924184682325205044405987565585670602752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 1377231753 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 1434634999 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 2146602816 |
|              PWR_PKG_ENERGY              |   PWR0  |     4.0836 |
|              PWR_DRAM_ENERGY             |   PWR3  |     2.1298 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   39872735 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   41071509 |
|                DRAM_WRITES               | MBOX0C2 |    2739492 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.0569 |
|        Runtime unhalted [s]       |    0.6227 |
|            Clock [MHz]            | 1539.7922 |
|                CPI                |    1.0417 |
|             Energy [J]            |    4.0836 |
|             Power [W]             |    3.8639 |
|          Energy DRAM [J]          |    2.1298 |
|           Power DRAM [W]          |    2.0152 |
|            DP [MFLOP/s]           |   37.7271 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   37.7271 |
|  Memory load bandwidth [MBytes/s] | 2487.1263 |
|  Memory load data volume [GBytes] |    2.6286 |
| Memory evict bandwidth [MBytes/s] |  165.8927 |
| Memory evict data volume [GBytes] |    0.1753 |
|    Memory bandwidth [MBytes/s]    | 2653.0190 |
|    Memory data volume [GBytes]    |    2.8039 |
|       Operational intensity       |    0.0142 |
+-----------------------------------+-----------+

Iteration with GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 5164499756173817179311838344006023748659411585658447025661318713081295244033682389259290706560275662871806343945494986752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 2826347596 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 2914230817 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 4219184640 |
|              PWR_PKG_ENERGY              |   PWR0  |     8.1843 |
|              PWR_DRAM_ENERGY             |   PWR3  |     4.1719 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   81836416 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   83729568 |
|                DRAM_WRITES               | MBOX0C2 |    5550761 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    2.0753 |
|        Runtime unhalted [s]       |    1.2649 |
|            Clock [MHz]            | 1591.3373 |
|                CPI                |    1.0311 |
|             Energy [J]            |    8.1843 |
|             Power [W]             |    3.9437 |
|          Energy DRAM [J]          |    4.1719 |
|           Power DRAM [W]          |    2.0103 |
|            DP [MFLOP/s]           |   39.4344 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   39.4344 |
|  Memory load bandwidth [MBytes/s] | 2582.1884 |
|  Memory load data volume [GBytes] |    5.3587 |
| Memory evict bandwidth [MBytes/s] |  171.1834 |
| Memory evict data volume [GBytes] |    0.3552 |
|    Memory bandwidth [MBytes/s]    | 2753.3718 |
|    Memory data volume [GBytes]    |    5.7139 |
|       Operational intensity       |    0.0143 |
+-----------------------------------+-----------+

Iteration with GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 5164499756173817179311838344006023748659411585658447025661318713081295244033682389259290706560275662871806343945494986752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 2826346719 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 2917806835 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 4189741440 |
|              PWR_PKG_ENERGY              |   PWR0  |     8.1566 |
|              PWR_DRAM_ENERGY             |   PWR3  |     4.1523 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   81836415 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   84003703 |
|                DRAM_WRITES               | MBOX0C2 |    5536798 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    2.0621 |
|        Runtime unhalted [s]       |    1.2665 |
|            Clock [MHz]            | 1604.4156 |
|                CPI                |    1.0324 |
|             Energy [J]            |    8.1566 |
|             Power [W]             |    3.9555 |
|          Energy DRAM [J]          |    4.1523 |
|           Power DRAM [W]          |    2.0137 |
|            DP [MFLOP/s]           |   39.6865 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   39.6865 |
|  Memory load bandwidth [MBytes/s] | 2607.2027 |
|  Memory load data volume [GBytes] |    5.3762 |
| Memory evict bandwidth [MBytes/s] |  171.8443 |
| Memory evict data volume [GBytes] |    0.3544 |
|    Memory bandwidth [MBytes/s]    | 2779.0470 |
|    Memory data volume [GBytes]    |    5.7306 |
|       Operational intensity       |    0.0143 |
+-----------------------------------+-----------+

Iteration with GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 5164499756173817179311838344006023748659411585658447025661318713081295244033682389259290706560275662871806343945494986752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 2826346735 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 2914587234 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 4187508864 |
|              PWR_PKG_ENERGY              |   PWR0  |     8.2061 |
|              PWR_DRAM_ENERGY             |   PWR3  |     4.1679 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   81836414 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   84513838 |
|                DRAM_WRITES               | MBOX0C2 |    5599190 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    2.0625 |
|        Runtime unhalted [s]       |    1.2650 |
|            Clock [MHz]            | 1603.5895 |
|                CPI                |    1.0312 |
|             Energy [J]            |    8.2061 |
|             Power [W]             |    3.9788 |
|          Energy DRAM [J]          |    4.1679 |
|           Power DRAM [W]          |    2.0208 |
|            DP [MFLOP/s]           |   39.6792 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   39.6792 |
|  Memory load bandwidth [MBytes/s] | 2622.5490 |
|  Memory load data volume [GBytes] |    5.4089 |
| Memory evict bandwidth [MBytes/s] |  173.7485 |
| Memory evict data volume [GBytes] |    0.3583 |
|    Memory bandwidth [MBytes/s]    | 2796.2974 |
|    Memory data volume [GBytes]    |    5.7672 |
|       Operational intensity       |    0.0142 |
+-----------------------------------+-----------+

Iteration with GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 5164499756173817179311838344006023748659411585658447025661318713081295244033682389259290706560275662871806343945494986752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 2826346779 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 2923535363 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 4252372224 |
|              PWR_PKG_ENERGY              |   PWR0  |     8.1898 |
|              PWR_DRAM_ENERGY             |   PWR3  |     4.1948 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   81836414 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   84155795 |
|                DRAM_WRITES               | MBOX0C2 |    5522608 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    2.0891 |
|        Runtime unhalted [s]       |    1.2689 |
|            Clock [MHz]            | 1583.9774 |
|                CPI                |    1.0344 |
|             Energy [J]            |    8.1898 |
|             Power [W]             |    3.9202 |
|          Energy DRAM [J]          |    4.1948 |
|           Power DRAM [W]          |    2.0079 |
|            DP [MFLOP/s]           |   39.1728 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   39.1728 |
|  Memory load bandwidth [MBytes/s] | 2578.1134 |
|  Memory load data volume [GBytes] |    5.3860 |
| Memory evict bandwidth [MBytes/s] |  169.1851 |
| Memory evict data volume [GBytes] |    0.3534 |
|    Memory bandwidth [MBytes/s]    | 2747.2985 |
|    Memory data volume [GBytes]    |    5.7394 |
|       Operational intensity       |    0.0143 |
+-----------------------------------+-----------+

Iteration with GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 5164499756173817179311838344006023748659411585658447025661318713081295244033682389259290706560275662871806343945494986752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 2826346956 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 2935342743 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 4191747840 |
|              PWR_PKG_ENERGY              |   PWR0  |     8.2980 |
|              PWR_DRAM_ENERGY             |   PWR3  |     4.1673 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   81836415 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   84551777 |
|                DRAM_WRITES               | MBOX0C2 |    5638263 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    2.0653 |
|        Runtime unhalted [s]       |    1.2740 |
|            Clock [MHz]            | 1613.3782 |
|                CPI                |    1.0386 |
|             Energy [J]            |    8.2980 |
|             Power [W]             |    4.0178 |
|          Energy DRAM [J]          |    4.1673 |
|           Power DRAM [W]          |    2.0178 |
|            DP [MFLOP/s]           |   39.6244 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   39.6244 |
|  Memory load bandwidth [MBytes/s] | 2620.1029 |
|  Memory load data volume [GBytes] |    5.4113 |
| Memory evict bandwidth [MBytes/s] |  174.7193 |
| Memory evict data volume [GBytes] |    0.3608 |
|    Memory bandwidth [MBytes/s]    | 2794.8222 |
|    Memory data volume [GBytes]    |    5.7722 |
|       Operational intensity       |    0.0142 |
+-----------------------------------+-----------+

Iteration with GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 13336028865759708548159703581442515594289516644631816320792515623528074475635264143042864401743108581485859821186866480891777603308238730160726712104661660092190315159028029116926156571823628049457930032271773203963381496074952922582327754752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 5724586513 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 5880469252 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 8130334656 |
|              PWR_PKG_ENERGY              |   PWR0  |    16.5527 |
|              PWR_DRAM_ENERGY             |   PWR3  |     8.1443 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  165763774 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |  170878982 |
|                DRAM_WRITES               | MBOX0C2 |   11350690 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    4.0142 |
|        Runtime unhalted [s]       |    2.5523 |
|            Clock [MHz]            | 1666.3866 |
|                CPI                |    1.0272 |
|             Energy [J]            |   16.5527 |
|             Power [W]             |    4.1236 |
|          Energy DRAM [J]          |    8.1443 |
|           Power DRAM [W]          |    2.0289 |
|            DP [MFLOP/s]           |   41.2948 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   41.2948 |
|  Memory load bandwidth [MBytes/s] | 2724.4211 |
|  Memory load data volume [GBytes] |   10.9363 |
| Memory evict bandwidth [MBytes/s] |  180.9705 |
| Memory evict data volume [GBytes] |    0.7264 |
|    Memory bandwidth [MBytes/s]    | 2905.3916 |
|    Memory data volume [GBytes]    |   11.6627 |
|       Operational intensity       |    0.0142 |
+-----------------------------------+-----------+

Iteration with GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 13336028865759708548159703581442515594289516644631816320792515623528074475635264143042864401743108581485859821186866480891777603308238730160726712104661660092190315159028029116926156571823628049457930032271773203963381496074952922582327754752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 5724586470 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 5989343687 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 8144030112 |
|              PWR_PKG_ENERGY              |   PWR0  |    16.7226 |
|              PWR_DRAM_ENERGY             |   PWR3  |     8.1379 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  165763773 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |  170049129 |
|                DRAM_WRITES               | MBOX0C2 |   11226293 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    4.0196 |
|        Runtime unhalted [s]       |    2.6004 |
|            Clock [MHz]            | 1693.8866 |
|                CPI                |    1.0462 |
|             Energy [J]            |   16.7226 |
|             Power [W]             |    4.1603 |
|          Energy DRAM [J]          |    8.1379 |
|           Power DRAM [W]          |    2.0246 |
|            DP [MFLOP/s]           |   41.2389 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   41.2389 |
|  Memory load bandwidth [MBytes/s] | 2707.5198 |
|  Memory load data volume [GBytes] |   10.8831 |
| Memory evict bandwidth [MBytes/s] |  178.7449 |
| Memory evict data volume [GBytes] |    0.7185 |
|    Memory bandwidth [MBytes/s]    | 2886.2647 |
|    Memory data volume [GBytes]    |   11.6016 |
|       Operational intensity       |    0.0143 |
+-----------------------------------+-----------+

Iteration with GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 13336028865759708548159703581442515594289516644631816320792515623528074475635264143042864401743108581485859821186866480891777603308238730160726712104661660092190315159028029116926156571823628049457930032271773203963381496074952922582327754752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 5724586560 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 5967431694 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 8178174912 |
|              PWR_PKG_ENERGY              |   PWR0  |    16.7902 |
|              PWR_DRAM_ENERGY             |   PWR3  |     8.1730 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  165763774 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |  170123453 |
|                DRAM_WRITES               | MBOX0C2 |   11306696 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    4.0346 |
|        Runtime unhalted [s]       |    2.5907 |
|            Clock [MHz]            | 1680.7430 |
|                CPI                |    1.0424 |
|             Energy [J]            |   16.7902 |
|             Power [W]             |    4.1616 |
|          Energy DRAM [J]          |    8.1730 |
|           Power DRAM [W]          |    2.0257 |
|            DP [MFLOP/s]           |   41.0859 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   41.0859 |
|  Memory load bandwidth [MBytes/s] | 2698.6577 |
|  Memory load data volume [GBytes] |   10.8879 |
| Memory evict bandwidth [MBytes/s] |  179.3574 |
| Memory evict data volume [GBytes] |    0.7236 |
|    Memory bandwidth [MBytes/s]    | 2878.0151 |
|    Memory data volume [GBytes]    |   11.6115 |
|       Operational intensity       |    0.0143 |
+-----------------------------------+-----------+

Iteration with GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 13336028865759708548159703581442515594289516644631816320792515623528074475635264143042864401743108581485859821186866480891777603308238730160726712104661660092190315159028029116926156571823628049457930032271773203963381496074952922582327754752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 5724612842 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 5946317256 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 8149317888 |
|              PWR_PKG_ENERGY              |   PWR0  |    17.0012 |
|              PWR_DRAM_ENERGY             |   PWR3  |     8.2114 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  165763777 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |  172527365 |
|                DRAM_WRITES               | MBOX0C2 |   12068595 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    4.0364 |
|        Runtime unhalted [s]       |    2.5809 |
|            Clock [MHz]            | 1681.1220 |
|                CPI                |    1.0387 |
|             Energy [J]            |   17.0012 |
|             Power [W]             |    4.2120 |
|          Energy DRAM [J]          |    8.2114 |
|           Power DRAM [W]          |    2.0344 |
|            DP [MFLOP/s]           |   41.0674 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   41.0674 |
|  Memory load bandwidth [MBytes/s] | 2735.5587 |
|  Memory load data volume [GBytes] |   11.0418 |
| Memory evict bandwidth [MBytes/s] |  191.3572 |
| Memory evict data volume [GBytes] |    0.7724 |
|    Memory bandwidth [MBytes/s]    | 2926.9159 |
|    Memory data volume [GBytes]    |   11.8141 |
|       Operational intensity       |    0.0140 |
+-----------------------------------+-----------+

Iteration with GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 13336028865759708548159703581442515594289516644631816320792515623528074475635264143042864401743108581485859821186866480891777603308238730160726712104661660092190315159028029116926156571823628049457930032271773203963381496074952922582327754752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 5724586499 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 5870618391 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 8176673856 |
|              PWR_PKG_ENERGY              |   PWR0  |    16.4312 |
|              PWR_DRAM_ENERGY             |   PWR3  |     8.1523 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  165763773 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |  170850476 |
|                DRAM_WRITES               | MBOX0C2 |   11194833 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    4.0309 |
|        Runtime unhalted [s]       |    2.5481 |
|            Clock [MHz]            | 1654.1706 |
|                CPI                |    1.0255 |
|             Energy [J]            |   16.4312 |
|             Power [W]             |    4.0763 |
|          Energy DRAM [J]          |    8.1523 |
|           Power DRAM [W]          |    2.0225 |
|            DP [MFLOP/s]           |   41.1233 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   41.1233 |
|  Memory load bandwidth [MBytes/s] | 2712.6571 |
|  Memory load data volume [GBytes] |   10.9344 |
| Memory evict bandwidth [MBytes/s] |  177.7446 |
| Memory evict data volume [GBytes] |    0.7165 |
|    Memory bandwidth [MBytes/s]    | 2890.4016 |
|    Memory data volume [GBytes]    |   11.6509 |
|       Operational intensity       |    0.0142 |
+-----------------------------------+-----------+

Iteration with GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-------------+
|                   Event                  | Counter |    Core 0   |
+------------------------------------------+---------+-------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 11520882018 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 11923778807 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 16209700032 |
|              PWR_PKG_ENERGY              |   PWR0  |     33.2421 |
|              PWR_DRAM_ENERGY             |   PWR3  |     16.2202 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |           0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   333618495 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |           0 |
|                DRAM_READS                | MBOX0C1 |   342527230 |
|                DRAM_WRITES               | MBOX0C2 |    22755466 |
+------------------------------------------+---------+-------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    7.9999 |
|        Runtime unhalted [s]       |    5.1754 |
|            Clock [MHz]            | 1694.7722 |
|                CPI                |    1.0350 |
|             Energy [J]            |   33.2421 |
|             Power [W]             |    4.1553 |
|          Energy DRAM [J]          |   16.2202 |
|           Power DRAM [W]          |    2.0276 |
|            DP [MFLOP/s]           |   41.7030 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   41.7030 |
|  Memory load bandwidth [MBytes/s] | 2740.2614 |
|  Memory load data volume [GBytes] |   21.9217 |
| Memory evict bandwidth [MBytes/s] |  182.0466 |
| Memory evict data volume [GBytes] |    1.4563 |
|    Memory bandwidth [MBytes/s]    | 2922.3081 |
|    Memory data volume [GBytes]    |   23.3781 |
|       Operational intensity       |    0.0143 |
+-----------------------------------+-----------+

Iteration with GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-------------+
|                   Event                  | Counter |    Core 0   |
+------------------------------------------+---------+-------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 11520881465 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 11881142537 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 15991154592 |
|              PWR_PKG_ENERGY              |   PWR0  |     34.0222 |
|              PWR_DRAM_ENERGY             |   PWR3  |     16.1180 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |           0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   333618494 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |           0 |
|                DRAM_READS                | MBOX0C1 |   342365434 |
|                DRAM_WRITES               | MBOX0C2 |    22771806 |
+------------------------------------------+---------+-------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    7.9051 |
|        Runtime unhalted [s]       |    5.1589 |
|            Clock [MHz]            | 1711.1084 |
|                CPI                |    1.0313 |
|             Energy [J]            |   34.0222 |
|             Power [W]             |    4.3038 |
|          Energy DRAM [J]          |   16.1180 |
|           Power DRAM [W]          |    2.0389 |
|            DP [MFLOP/s]           |   42.2029 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   42.2029 |
|  Memory load bandwidth [MBytes/s] | 2771.8039 |
|  Memory load data volume [GBytes] |   21.9114 |
| Memory evict bandwidth [MBytes/s] |  184.3614 |
| Memory evict data volume [GBytes] |    1.4574 |
|    Memory bandwidth [MBytes/s]    | 2956.1653 |
|    Memory data volume [GBytes]    |   23.3688 |
|       Operational intensity       |    0.0143 |
+-----------------------------------+-----------+

Iteration with GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-------------+
|                   Event                  | Counter |    Core 0   |
+------------------------------------------+---------+-------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 11520881593 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 11755541150 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 16215196608 |
|              PWR_PKG_ENERGY              |   PWR0  |     32.7127 |
|              PWR_DRAM_ENERGY             |   PWR3  |     16.1822 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |           0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   333618494 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |           0 |
|                DRAM_READS                | MBOX0C1 |   340382596 |
|                DRAM_WRITES               | MBOX0C2 |    22438955 |
+------------------------------------------+---------+-------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    7.9946 |
|        Runtime unhalted [s]       |    5.1026 |
|            Clock [MHz]            | 1670.2227 |
|                CPI                |    1.0204 |
|             Energy [J]            |   32.7127 |
|             Power [W]             |    4.0918 |
|          Energy DRAM [J]          |   16.1822 |
|           Power DRAM [W]          |    2.0241 |
|            DP [MFLOP/s]           |   41.7304 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   41.7304 |
|  Memory load bandwidth [MBytes/s] | 2724.8930 |
|  Memory load data volume [GBytes] |   21.7845 |
| Memory evict bandwidth [MBytes/s] |  179.6324 |
| Memory evict data volume [GBytes] |    1.4361 |
|    Memory bandwidth [MBytes/s]    | 2904.5254 |
|    Memory data volume [GBytes]    |   23.2206 |
|       Operational intensity       |    0.0144 |
+-----------------------------------+-----------+

Iteration with GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-------------+
|                   Event                  | Counter |    Core 0   |
+------------------------------------------+---------+-------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 11520881457 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 11909775521 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 15981408864 |
|              PWR_PKG_ENERGY              |   PWR0  |     33.9749 |
|              PWR_DRAM_ENERGY             |   PWR3  |     16.0859 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |           0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   333618494 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |           0 |
|                DRAM_READS                | MBOX0C1 |   342802188 |
|                DRAM_WRITES               | MBOX0C2 |    22688046 |
+------------------------------------------+---------+-------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    7.8961 |
|        Runtime unhalted [s]       |    5.1693 |
|            Clock [MHz]            | 1716.9580 |
|                CPI                |    1.0338 |
|             Energy [J]            |   33.9749 |
|             Power [W]             |    4.3028 |
|          Energy DRAM [J]          |   16.0859 |
|           Power DRAM [W]          |    2.0372 |
|            DP [MFLOP/s]           |   42.2512 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   42.2512 |
|  Memory load bandwidth [MBytes/s] | 2778.5135 |
|  Memory load data volume [GBytes] |   21.9393 |
| Memory evict bandwidth [MBytes/s] |  183.8934 |
| Memory evict data volume [GBytes] |    1.4520 |
|    Memory bandwidth [MBytes/s]    | 2962.4069 |
|    Memory data volume [GBytes]    |   23.3914 |
|       Operational intensity       |    0.0143 |
+-----------------------------------+-----------+

Iteration with GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-------------+
|                   Event                  | Counter |    Core 0   |
+------------------------------------------+---------+-------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 11520881624 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 11953243985 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 16192690656 |
|              PWR_PKG_ENERGY              |   PWR0  |     33.9229 |
|              PWR_DRAM_ENERGY             |   PWR3  |     16.4317 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |           0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   333618494 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |           0 |
|                DRAM_READS                | MBOX0C1 |   347177170 |
|                DRAM_WRITES               | MBOX0C2 |    22774716 |
+------------------------------------------+---------+-------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    8.0014 |
|        Runtime unhalted [s]       |    5.1883 |
|            Clock [MHz]            | 1700.6913 |
|                CPI                |    1.0375 |
|             Energy [J]            |   33.9229 |
|             Power [W]             |    4.2396 |
|          Energy DRAM [J]          |   16.4317 |
|           Power DRAM [W]          |    2.0536 |
|            DP [MFLOP/s]           |   41.6948 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   41.6948 |
|  Memory load bandwidth [MBytes/s] | 2776.9177 |
|  Memory load data volume [GBytes] |   22.2193 |
| Memory evict bandwidth [MBytes/s] |  182.1650 |
| Memory evict data volume [GBytes] |    1.4576 |
|    Memory bandwidth [MBytes/s]    | 2959.0827 |
|    Memory data volume [GBytes]    |   23.6769 |
|       Operational intensity       |    0.0141 |
+-----------------------------------+-----------+

Iteration with GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-------------+
|                   Event                  | Counter |    Core 0   |
+------------------------------------------+---------+-------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 23113644627 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 23906704335 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 31765800768 |
|              PWR_PKG_ENERGY              |   PWR0  |     67.5056 |
|              PWR_DRAM_ENERGY             |   PWR3  |     32.0178 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |           0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   669327933 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |           0 |
|                DRAM_READS                | MBOX0C1 |   683294268 |
|                DRAM_WRITES               | MBOX0C2 |    45382200 |
+------------------------------------------+---------+-------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |   15.7011 |
|        Runtime unhalted [s]       |   10.3764 |
|            Clock [MHz]            | 1733.9356 |
|                CPI                |    1.0343 |
|             Energy [J]            |   67.5056 |
|             Power [W]             |    4.2994 |
|          Energy DRAM [J]          |   32.0178 |
|           Power DRAM [W]          |    2.0392 |
|            DP [MFLOP/s]           |   42.6293 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   42.6293 |
|  Memory load bandwidth [MBytes/s] | 2785.2028 |
|  Memory load data volume [GBytes] |   43.7308 |
| Memory evict bandwidth [MBytes/s] |  184.9842 |
| Memory evict data volume [GBytes] |    2.9045 |
|    Memory bandwidth [MBytes/s]    | 2970.1869 |
|    Memory data volume [GBytes]    |   46.6353 |
|       Operational intensity       |    0.0144 |
+-----------------------------------+-----------+

Iteration with GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-------------+
|                   Event                  | Counter |    Core 0   |
+------------------------------------------+---------+-------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 23113644802 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 24021135651 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 32016271392 |
|              PWR_PKG_ENERGY              |   PWR0  |     67.4122 |
|              PWR_DRAM_ENERGY             |   PWR3  |     32.2429 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |           0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   669327936 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |           0 |
|                DRAM_READS                | MBOX0C1 |   683560701 |
|                DRAM_WRITES               | MBOX0C2 |    45277989 |
+------------------------------------------+---------+-------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |   15.8206 |
|        Runtime unhalted [s]       |   10.4262 |
|            Clock [MHz]            | 1728.5820 |
|                CPI                |    1.0393 |
|             Energy [J]            |   67.4122 |
|             Power [W]             |    4.2610 |
|          Energy DRAM [J]          |   32.2429 |
|           Power DRAM [W]          |    2.0380 |
|            DP [MFLOP/s]           |   42.3074 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   42.3074 |
|  Memory load bandwidth [MBytes/s] | 2765.2495 |
|  Memory load data volume [GBytes] |   43.7479 |
| Memory evict bandwidth [MBytes/s] |  183.1658 |
| Memory evict data volume [GBytes] |    2.8978 |
|    Memory bandwidth [MBytes/s]    | 2948.4153 |
|    Memory data volume [GBytes]    |   46.6457 |
|       Operational intensity       |    0.0143 |
+-----------------------------------+-----------+

Iteration with GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-------------+
|                   Event                  | Counter |    Core 0   |
+------------------------------------------+---------+-------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 23113644884 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 23688584061 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 32064647904 |
|              PWR_PKG_ENERGY              |   PWR0  |     65.6663 |
|              PWR_DRAM_ENERGY             |   PWR3  |     32.2169 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |           0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   669327934 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |           0 |
|                DRAM_READS                | MBOX0C1 |   681188169 |
|                DRAM_WRITES               | MBOX0C2 |    45186283 |
+------------------------------------------+---------+-------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |   15.8393 |
|        Runtime unhalted [s]       |   10.2817 |
|            Clock [MHz]            | 1702.0986 |
|                CPI                |    1.0249 |
|             Energy [J]            |   65.6663 |
|             Power [W]             |    4.1458 |
|          Energy DRAM [J]          |   32.2169 |
|           Power DRAM [W]          |    2.0340 |
|            DP [MFLOP/s]           |   42.2574 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   42.2574 |
|  Memory load bandwidth [MBytes/s] | 2752.3959 |
|  Memory load data volume [GBytes] |   43.5960 |
| Memory evict bandwidth [MBytes/s] |  182.5788 |
| Memory evict data volume [GBytes] |    2.8919 |
|    Memory bandwidth [MBytes/s]    | 2934.9747 |
|    Memory data volume [GBytes]    |   46.4880 |
|       Operational intensity       |    0.0144 |
+-----------------------------------+-----------+

Iteration with GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-------------+
|                   Event                  | Counter |    Core 0   |
+------------------------------------------+---------+-------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 23113644747 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 23674687385 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 31979056992 |
|              PWR_PKG_ENERGY              |   PWR0  |     66.0580 |
|              PWR_DRAM_ENERGY             |   PWR3  |     32.3174 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |           0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   669327934 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |           0 |
|                DRAM_READS                | MBOX0C1 |   684602962 |
|                DRAM_WRITES               | MBOX0C2 |    45155068 |
+------------------------------------------+---------+-------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |   15.8161 |
|        Runtime unhalted [s]       |   10.2759 |
|            Clock [MHz]            | 1705.6195 |
|                CPI                |    1.0243 |
|             Energy [J]            |   66.0580 |
|             Power [W]             |    4.1766 |
|          Energy DRAM [J]          |   32.3174 |
|           Power DRAM [W]          |    2.0433 |
|            DP [MFLOP/s]           |   42.3193 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   42.3193 |
|  Memory load bandwidth [MBytes/s] | 2770.2456 |
|  Memory load data volume [GBytes] |   43.8146 |
| Memory evict bandwidth [MBytes/s] |  182.7200 |
| Memory evict data volume [GBytes] |    2.8899 |
|    Memory bandwidth [MBytes/s]    | 2952.9655 |
|    Memory data volume [GBytes]    |   46.7045 |
|       Operational intensity       |    0.0143 |
+-----------------------------------+-----------+

Iteration with GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-------------+
|                   Event                  | Counter |    Core 0   |
+------------------------------------------+---------+-------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 23113644910 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 23846133618 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 32098882752 |
|              PWR_PKG_ENERGY              |   PWR0  |     65.9410 |
|              PWR_DRAM_ENERGY             |   PWR3  |     32.1940 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |           0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   669327935 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |           0 |
|                DRAM_READS                | MBOX0C1 |   680335737 |
|                DRAM_WRITES               | MBOX0C2 |    45065115 |
+------------------------------------------+---------+-------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |   15.8540 |
|        Runtime unhalted [s]       |   10.3502 |
|            Clock [MHz]            | 1711.5884 |
|                CPI                |    1.0317 |
|             Energy [J]            |   65.9410 |
|             Power [W]             |    4.1593 |
|          Energy DRAM [J]          |   32.1940 |
|           Power DRAM [W]          |    2.0307 |
|            DP [MFLOP/s]           |   42.2182 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |   42.2182 |
|  Memory load bandwidth [MBytes/s] | 2746.4014 |
|  Memory load data volume [GBytes] |   43.5415 |
| Memory evict bandwidth [MBytes/s] |  181.9203 |
| Memory evict data volume [GBytes] |    2.8842 |
|    Memory bandwidth [MBytes/s]    | 2928.3217 |
|    Memory data volume [GBytes]    |   46.4257 |
|       Operational intensity       |    0.0144 |
+-----------------------------------+-----------+

Iteration without GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 114213116 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  86618816 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  |  93682656 |
|              PWR_PKG_ENERGY              |   PWR0  |    0.5123 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.1556 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     10383 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   1074801 |
|                DRAM_WRITES               | MBOX0C2 |   1269419 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1004 |
|        Runtime unhalted [s]       |    0.0376 |
|            Clock [MHz]            | 2130.2248 |
|                CPI                |    0.7584 |
|             Energy [J]            |    0.5123 |
|             Power [W]             |    5.1038 |
|          Energy DRAM [J]          |    0.1556 |
|           Power DRAM [W]          |    1.5499 |
|            DP [MFLOP/s]           |    0.1034 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1034 |
|  Memory load bandwidth [MBytes/s] |  685.2616 |
|  Memory load data volume [GBytes] |    0.0688 |
| Memory evict bandwidth [MBytes/s] |  809.3443 |
| Memory evict data volume [GBytes] |    0.0812 |
|    Memory bandwidth [MBytes/s]    | 1494.6059 |
|    Memory data volume [GBytes]    |    0.1500 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 114213793 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  86175067 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  |  93057696 |
|              PWR_PKG_ENERGY              |   PWR0  |    0.5108 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.1544 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     10384 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   1018949 |
|                DRAM_WRITES               | MBOX0C2 |   1269552 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1004 |
|        Runtime unhalted [s]       |    0.0374 |
|            Clock [MHz]            | 2133.0595 |
|                CPI                |    0.7545 |
|             Energy [J]            |    0.5108 |
|             Power [W]             |    5.0883 |
|          Energy DRAM [J]          |    0.1544 |
|           Power DRAM [W]          |    1.5382 |
|            DP [MFLOP/s]           |    0.1034 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1034 |
|  Memory load bandwidth [MBytes/s] |  649.6048 |
|  Memory load data volume [GBytes] |    0.0652 |
| Memory evict bandwidth [MBytes/s] |  809.3703 |
| Memory evict data volume [GBytes] |    0.0813 |
|    Memory bandwidth [MBytes/s]    | 1458.9750 |
|    Memory data volume [GBytes]    |    0.1465 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 114213800 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  86626275 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  |  90293664 |
|              PWR_PKG_ENERGY              |   PWR0  |    0.5165 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.1488 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     10381 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   1035745 |
|                DRAM_WRITES               | MBOX0C2 |   1274818 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.0970 |
|        Runtime unhalted [s]       |    0.0376 |
|            Clock [MHz]            | 2210.0468 |
|                CPI                |    0.7585 |
|             Energy [J]            |    0.5165 |
|             Power [W]             |    5.3271 |
|          Energy DRAM [J]          |    0.1488 |
|           Power DRAM [W]          |    1.5348 |
|            DP [MFLOP/s]           |    0.1071 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1071 |
|  Memory load bandwidth [MBytes/s] |  683.7050 |
|  Memory load data volume [GBytes] |    0.0663 |
| Memory evict bandwidth [MBytes/s] |  841.5194 |
| Memory evict data volume [GBytes] |    0.0816 |
|    Memory bandwidth [MBytes/s]    | 1525.2244 |
|    Memory data volume [GBytes]    |    0.1479 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 114213092 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  86176063 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  |  89845632 |
|              PWR_PKG_ENERGY              |   PWR0  |    0.5023 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.1479 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     10381 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |    993945 |
|                DRAM_WRITES               | MBOX0C2 |   1268832 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.0965 |
|        Runtime unhalted [s]       |    0.0374 |
|            Clock [MHz]            | 2209.7708 |
|                CPI                |    0.7545 |
|             Energy [J]            |    0.5023 |
|             Power [W]             |    5.2030 |
|          Energy DRAM [J]          |    0.1479 |
|           Power DRAM [W]          |    1.5318 |
|            DP [MFLOP/s]           |    0.1075 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1075 |
|  Memory load bandwidth [MBytes/s] |  658.8939 |
|  Memory load data volume [GBytes] |    0.0636 |
| Memory evict bandwidth [MBytes/s] |  841.1186 |
| Memory evict data volume [GBytes] |    0.0812 |
|    Memory bandwidth [MBytes/s]    | 1500.0125 |
|    Memory data volume [GBytes]    |    0.1448 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 114213112 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  85718020 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  |  92208288 |
|              PWR_PKG_ENERGY              |   PWR0  |    0.4990 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.1505 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     10384 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |    968775 |
|                DRAM_WRITES               | MBOX0C2 |   1267603 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.0993 |
|        Runtime unhalted [s]       |    0.0372 |
|            Clock [MHz]            | 2141.7786 |
|                CPI                |    0.7505 |
|             Energy [J]            |    0.4990 |
|             Power [W]             |    5.0262 |
|          Energy DRAM [J]          |    0.1505 |
|           Power DRAM [W]          |    1.5156 |
|            DP [MFLOP/s]           |    0.1046 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1046 |
|  Memory load bandwidth [MBytes/s] |  624.5659 |
|  Memory load data volume [GBytes] |    0.0620 |
| Memory evict bandwidth [MBytes/s] |  817.2192 |
| Memory evict data volume [GBytes] |    0.0811 |
|    Memory bandwidth [MBytes/s]    | 1441.7851 |
|    Memory data volume [GBytes]    |    0.1431 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 240712494 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 182702246 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 189799680 |
|              PWR_PKG_ENERGY              |   PWR0  |    1.0480 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.3030 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     20704 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   1840132 |
|                DRAM_WRITES               | MBOX0C2 |   2657545 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.2001 |
|        Runtime unhalted [s]       |    0.0793 |
|            Clock [MHz]            | 2217.7966 |
|                CPI                |    0.7590 |
|             Energy [J]            |    1.0480 |
|             Power [W]             |    5.2382 |
|          Energy DRAM [J]          |    0.3030 |
|           Power DRAM [W]          |    1.5143 |
|            DP [MFLOP/s]           |    0.1035 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1035 |
|  Memory load bandwidth [MBytes/s] |  588.6221 |
|  Memory load data volume [GBytes] |    0.1178 |
| Memory evict bandwidth [MBytes/s] |  850.0964 |
| Memory evict data volume [GBytes] |    0.1701 |
|    Memory bandwidth [MBytes/s]    | 1438.7185 |
|    Memory data volume [GBytes]    |    0.2879 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 240712418 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 185172211 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 194350080 |
|              PWR_PKG_ENERGY              |   PWR0  |    1.0710 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.3140 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     20702 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   2035460 |
|                DRAM_WRITES               | MBOX0C2 |   2666999 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.2034 |
|        Runtime unhalted [s]       |    0.0804 |
|            Clock [MHz]            | 2195.1499 |
|                CPI                |    0.7693 |
|             Energy [J]            |    1.0710 |
|             Power [W]             |    5.2662 |
|          Energy DRAM [J]          |    0.3140 |
|           Power DRAM [W]          |    1.5437 |
|            DP [MFLOP/s]           |    0.1018 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1018 |
|  Memory load bandwidth [MBytes/s] |  640.5237 |
|  Memory load data volume [GBytes] |    0.1303 |
| Memory evict bandwidth [MBytes/s] |  839.2580 |
| Memory evict data volume [GBytes] |    0.1707 |
|    Memory bandwidth [MBytes/s]    | 1479.7818 |
|    Memory data volume [GBytes]    |    0.3010 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 240712490 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 180535542 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 189533760 |
|              PWR_PKG_ENERGY              |   PWR0  |    1.0432 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.3056 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     20705 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   1920890 |
|                DRAM_WRITES               | MBOX0C2 |   2664840 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.2008 |
|        Runtime unhalted [s]       |    0.0784 |
|            Clock [MHz]            | 2194.5391 |
|                CPI                |    0.7500 |
|             Energy [J]            |    1.0432 |
|             Power [W]             |    5.1942 |
|          Energy DRAM [J]          |    0.3056 |
|           Power DRAM [W]          |    1.5216 |
|            DP [MFLOP/s]           |    0.1031 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1031 |
|  Memory load bandwidth [MBytes/s] |  612.1078 |
|  Memory load data volume [GBytes] |    0.1229 |
| Memory evict bandwidth [MBytes/s] |  849.1737 |
| Memory evict data volume [GBytes] |    0.1705 |
|    Memory bandwidth [MBytes/s]    | 1461.2815 |
|    Memory data volume [GBytes]    |    0.2935 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 240712412 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 181679206 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 188405088 |
|              PWR_PKG_ENERGY              |   PWR0  |    1.0720 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.3121 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     20703 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   2092132 |
|                DRAM_WRITES               | MBOX0C2 |   2671167 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1997 |
|        Runtime unhalted [s]       |    0.0789 |
|            Clock [MHz]            | 2221.6977 |
|                CPI                |    0.7548 |
|             Energy [J]            |    1.0720 |
|             Power [W]             |    5.3678 |
|          Energy DRAM [J]          |    0.3121 |
|           Power DRAM [W]          |    1.5626 |
|            DP [MFLOP/s]           |    0.1037 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1037 |
|  Memory load bandwidth [MBytes/s] |  670.4379 |
|  Memory load data volume [GBytes] |    0.1339 |
| Memory evict bandwidth [MBytes/s] |  855.9935 |
| Memory evict data volume [GBytes] |    0.1710 |
|    Memory bandwidth [MBytes/s]    | 1526.4314 |
|    Memory data volume [GBytes]    |    0.3049 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 240712431 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 180803986 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 189845472 |
|              PWR_PKG_ENERGY              |   PWR0  |    1.0488 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.3066 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     20703 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   1950264 |
|                DRAM_WRITES               | MBOX0C2 |   2667420 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.2018 |
|        Runtime unhalted [s]       |    0.0785 |
|            Clock [MHz]            | 2194.2089 |
|                CPI                |    0.7511 |
|             Energy [J]            |    1.0488 |
|             Power [W]             |    5.1980 |
|          Energy DRAM [J]          |    0.3066 |
|           Power DRAM [W]          |    1.5195 |
|            DP [MFLOP/s]           |    0.1026 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1026 |
|  Memory load bandwidth [MBytes/s] |  618.6318 |
|  Memory load data volume [GBytes] |    0.1248 |
| Memory evict bandwidth [MBytes/s] |  846.1166 |
| Memory evict data volume [GBytes] |    0.1707 |
|    Memory bandwidth [MBytes/s]    | 1464.7484 |
|    Memory data volume [GBytes]    |    0.2955 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 493711199 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 371956368 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 381765696 |
|              PWR_PKG_ENERGY              |   PWR0  |    2.2567 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.6342 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     41344 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   4360491 |
|                DRAM_WRITES               | MBOX0C2 |   5500668 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.4016 |
|        Runtime unhalted [s]       |    0.1614 |
|            Clock [MHz]            | 2244.7469 |
|                CPI                |    0.7534 |
|             Energy [J]            |    2.2567 |
|             Power [W]             |    5.6193 |
|          Energy DRAM [J]          |    0.6342 |
|           Power DRAM [W]          |    1.5791 |
|            DP [MFLOP/s]           |    0.1029 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1029 |
|  Memory load bandwidth [MBytes/s] |  694.8939 |
|  Memory load data volume [GBytes] |    0.2791 |
| Memory evict bandwidth [MBytes/s] |  876.5940 |
| Memory evict data volume [GBytes] |    0.3520 |
|    Memory bandwidth [MBytes/s]    | 1571.4879 |
|    Memory data volume [GBytes]    |    0.6311 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 493711213 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 387850983 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 396086592 |
|              PWR_PKG_ENERGY              |   PWR0  |    2.1736 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.6127 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     41341 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   3769374 |
|                DRAM_WRITES               | MBOX0C2 |   5462607 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.4071 |
|        Runtime unhalted [s]       |    0.1683 |
|            Clock [MHz]            | 2256.0455 |
|                CPI                |    0.7856 |
|             Energy [J]            |    2.1736 |
|             Power [W]             |    5.3398 |
|          Energy DRAM [J]          |    0.6127 |
|           Power DRAM [W]          |    1.5051 |
|            DP [MFLOP/s]           |    0.1016 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1016 |
|  Memory load bandwidth [MBytes/s] |  592.6526 |
|  Memory load data volume [GBytes] |    0.2412 |
| Memory evict bandwidth [MBytes/s] |  858.8769 |
| Memory evict data volume [GBytes] |    0.3496 |
|    Memory bandwidth [MBytes/s]    | 1451.5295 |
|    Memory data volume [GBytes]    |    0.5908 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 493711211 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 378385614 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 387583008 |
|              PWR_PKG_ENERGY              |   PWR0  |    2.1612 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.6106 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     41342 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   3700398 |
|                DRAM_WRITES               | MBOX0C2 |   5463095 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.4036 |
|        Runtime unhalted [s]       |    0.1643 |
|            Clock [MHz]            | 2248.3826 |
|                CPI                |    0.7664 |
|             Energy [J]            |    2.1612 |
|             Power [W]             |    5.3552 |
|          Energy DRAM [J]          |    0.6106 |
|           Power DRAM [W]          |    1.5130 |
|            DP [MFLOP/s]           |    0.1024 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1024 |
|  Memory load bandwidth [MBytes/s] |  586.8291 |
|  Memory load data volume [GBytes] |    0.2368 |
| Memory evict bandwidth [MBytes/s] |  866.3671 |
| Memory evict data volume [GBytes] |    0.3496 |
|    Memory bandwidth [MBytes/s]    | 1453.1962 |
|    Memory data volume [GBytes]    |    0.5865 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 493711215 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 380937731 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 387757056 |
|              PWR_PKG_ENERGY              |   PWR0  |    2.1812 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.6170 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     41342 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   3868049 |
|                DRAM_WRITES               | MBOX0C2 |   5469238 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.4044 |
|        Runtime unhalted [s]       |    0.1653 |
|            Clock [MHz]            | 2263.4313 |
|                CPI                |    0.7716 |
|             Energy [J]            |    2.1812 |
|             Power [W]             |    5.3936 |
|          Energy DRAM [J]          |    0.6170 |
|           Power DRAM [W]          |    1.5257 |
|            DP [MFLOP/s]           |    0.1022 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1022 |
|  Memory load bandwidth [MBytes/s] |  612.1448 |
|  Memory load data volume [GBytes] |    0.2476 |
| Memory evict bandwidth [MBytes/s] |  865.5438 |
| Memory evict data volume [GBytes] |    0.3500 |
|    Memory bandwidth [MBytes/s]    | 1477.6886 |
|    Memory data volume [GBytes]    |    0.5976 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 493711209 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 377817621 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 387592800 |
|              PWR_PKG_ENERGY              |   PWR0  |    2.1790 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.6169 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     41341 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   3825709 |
|                DRAM_WRITES               | MBOX0C2 |   5481503 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.4065 |
|        Runtime unhalted [s]       |    0.1640 |
|            Clock [MHz]            | 2245.8423 |
|                CPI                |    0.7653 |
|             Energy [J]            |    2.1790 |
|             Power [W]             |    5.3598 |
|          Energy DRAM [J]          |    0.6169 |
|           Power DRAM [W]          |    1.5176 |
|            DP [MFLOP/s]           |    0.1017 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1017 |
|  Memory load bandwidth [MBytes/s] |  602.2722 |
|  Memory load data volume [GBytes] |    0.2448 |
| Memory evict bandwidth [MBytes/s] |  862.9399 |
| Memory evict data volume [GBytes] |    0.3508 |
|    Memory bandwidth [MBytes/s]    | 1465.2121 |
|    Memory data volume [GBytes]    |    0.5957 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 999708687 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 751081987 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 761215104 |
|              PWR_PKG_ENERGY              |   PWR0  |    4.3115 |
|              PWR_DRAM_ENERGY             |   PWR3  |    1.2021 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     82623 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   6976716 |
|                DRAM_WRITES               | MBOX0C2 |  11025233 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.7981 |
|        Runtime unhalted [s]       |    0.3260 |
|            Clock [MHz]            | 2273.2804 |
|                CPI                |    0.7513 |
|             Energy [J]            |    4.3115 |
|             Power [W]             |    5.4023 |
|          Energy DRAM [J]          |    1.2021 |
|           Power DRAM [W]          |    1.5062 |
|            DP [MFLOP/s]           |    0.1035 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1035 |
|  Memory load bandwidth [MBytes/s] |  559.4769 |
|  Memory load data volume [GBytes] |    0.4465 |
| Memory evict bandwidth [MBytes/s] |  884.1356 |
| Memory evict data volume [GBytes] |    0.7056 |
|    Memory bandwidth [MBytes/s]    | 1443.6124 |
|    Memory data volume [GBytes]    |    1.1521 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 999708720 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 765239675 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 776306976 |
|              PWR_PKG_ENERGY              |   PWR0  |    4.3064 |
|              PWR_DRAM_ENERGY             |   PWR3  |    1.1871 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     82623 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   6593463 |
|                DRAM_WRITES               | MBOX0C2 |  11013061 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.8032 |
|        Runtime unhalted [s]       |    0.3321 |
|            Clock [MHz]            | 2271.1032 |
|                CPI                |    0.7655 |
|             Energy [J]            |    4.3064 |
|             Power [W]             |    5.3613 |
|          Energy DRAM [J]          |    1.1871 |
|           Power DRAM [W]          |    1.4779 |
|            DP [MFLOP/s]           |    0.1029 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1029 |
|  Memory load bandwidth [MBytes/s] |  525.3511 |
|  Memory load data volume [GBytes] |    0.4220 |
| Memory evict bandwidth [MBytes/s] |  877.4939 |
| Memory evict data volume [GBytes] |    0.7048 |
|    Memory bandwidth [MBytes/s]    | 1402.8450 |
|    Memory data volume [GBytes]    |    1.1268 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 999708709 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 749374651 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 760360512 |
|              PWR_PKG_ENERGY              |   PWR0  |    4.2946 |
|              PWR_DRAM_ENERGY             |   PWR3  |    1.1946 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     82623 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   6961658 |
|                DRAM_WRITES               | MBOX0C2 |  11048191 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.7973 |
|        Runtime unhalted [s]       |    0.3253 |
|            Clock [MHz]            | 2270.5635 |
|                CPI                |    0.7496 |
|             Energy [J]            |    4.2946 |
|             Power [W]             |    5.3867 |
|          Energy DRAM [J]          |    1.1946 |
|           Power DRAM [W]          |    1.4984 |
|            DP [MFLOP/s]           |    0.1036 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1036 |
|  Memory load bandwidth [MBytes/s] |  558.8479 |
|  Memory load data volume [GBytes] |    0.4455 |
| Memory evict bandwidth [MBytes/s] |  886.8949 |
| Memory evict data volume [GBytes] |    0.7071 |
|    Memory bandwidth [MBytes/s]    | 1445.7428 |
|    Memory data volume [GBytes]    |    1.1526 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 999708728 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 758156543 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 766936512 |
|              PWR_PKG_ENERGY              |   PWR0  |    4.3046 |
|              PWR_DRAM_ENERGY             |   PWR3  |    1.2010 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     82624 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   7002545 |
|                DRAM_WRITES               | MBOX0C2 |  11050517 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.8006 |
|        Runtime unhalted [s]       |    0.3291 |
|            Clock [MHz]            | 2277.3983 |
|                CPI                |    0.7584 |
|             Energy [J]            |    4.3046 |
|             Power [W]             |    5.3770 |
|          Energy DRAM [J]          |    1.2010 |
|           Power DRAM [W]          |    1.5003 |
|            DP [MFLOP/s]           |    0.1032 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1032 |
|  Memory load bandwidth [MBytes/s] |  559.8099 |
|  Memory load data volume [GBytes] |    0.4482 |
| Memory evict bandwidth [MBytes/s] |  883.4201 |
| Memory evict data volume [GBytes] |    0.7072 |
|    Memory bandwidth [MBytes/s]    | 1443.2299 |
|    Memory data volume [GBytes]    |    1.1554 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 999708680 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 753101982 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 764046528 |
|              PWR_PKG_ENERGY              |   PWR0  |    4.3228 |
|              PWR_DRAM_ENERGY             |   PWR3  |    1.2033 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     82622 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   7103390 |
|                DRAM_WRITES               | MBOX0C2 |  11048560 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.7988 |
|        Runtime unhalted [s]       |    0.3270 |
|            Clock [MHz]            | 2270.3572 |
|                CPI                |    0.7533 |
|             Energy [J]            |    4.3228 |
|             Power [W]             |    5.4117 |
|          Energy DRAM [J]          |    1.2033 |
|           Power DRAM [W]          |    1.5064 |
|            DP [MFLOP/s]           |    0.1034 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1034 |
|  Memory load bandwidth [MBytes/s] |  569.1375 |
|  Memory load data volume [GBytes] |    0.4546 |
| Memory evict bandwidth [MBytes/s] |  885.2322 |
| Memory evict data volume [GBytes] |    0.7071 |
|    Memory bandwidth [MBytes/s]    | 1454.3697 |
|    Memory data volume [GBytes]    |    1.1617 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 2011704867 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 1508034249 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 1521712704 |
|              PWR_PKG_ENERGY              |   PWR0  |     8.6436 |
|              PWR_DRAM_ENERGY             |   PWR3  |     2.3660 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     165184 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   13056163 |
|                DRAM_WRITES               | MBOX0C2 |   22179944 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.5899 |
|        Runtime unhalted [s]       |    0.6545 |
|            Clock [MHz]            | 2283.2419 |
|                CPI                |    0.7496 |
|             Energy [J]            |    8.6436 |
|             Power [W]             |    5.4367 |
|          Energy DRAM [J]          |    2.3660 |
|           Power DRAM [W]          |    1.4882 |
|            DP [MFLOP/s]           |    0.1039 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1039 |
|  Memory load bandwidth [MBytes/s] |  525.5765 |
|  Memory load data volume [GBytes] |    0.8356 |
| Memory evict bandwidth [MBytes/s] |  892.8548 |
| Memory evict data volume [GBytes] |    1.4195 |
|    Memory bandwidth [MBytes/s]    | 1418.4314 |
|    Memory data volume [GBytes]    |    2.2551 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 2011704951 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 1549928880 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 1563304992 |
|              PWR_PKG_ENERGY              |   PWR0  |     8.7053 |
|              PWR_DRAM_ENERGY             |   PWR3  |     2.3897 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     165184 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   13098610 |
|                DRAM_WRITES               | MBOX0C2 |   22161556 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.6077 |
|        Runtime unhalted [s]       |    0.6727 |
|            Clock [MHz]            | 2284.2396 |
|                CPI                |    0.7705 |
|             Energy [J]            |    8.7053 |
|             Power [W]             |    5.4146 |
|          Energy DRAM [J]          |    2.3897 |
|           Power DRAM [W]          |    1.4864 |
|            DP [MFLOP/s]           |    0.1027 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1027 |
|  Memory load bandwidth [MBytes/s] |  521.4226 |
|  Memory load data volume [GBytes] |    0.8383 |
| Memory evict bandwidth [MBytes/s] |  882.1956 |
| Memory evict data volume [GBytes] |    1.4183 |
|    Memory bandwidth [MBytes/s]    | 1403.6182 |
|    Memory data volume [GBytes]    |    2.2567 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 2011704937 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 1537481183 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 1549970784 |
|              PWR_PKG_ENERGY              |   PWR0  |     8.7838 |
|              PWR_DRAM_ENERGY             |   PWR3  |     2.3731 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     165182 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   12972165 |
|                DRAM_WRITES               | MBOX0C2 |   22165731 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.6007 |
|        Runtime unhalted [s]       |    0.6673 |
|            Clock [MHz]            | 2285.3849 |
|                CPI                |    0.7643 |
|             Energy [J]            |    8.7838 |
|             Power [W]             |    5.4875 |
|          Energy DRAM [J]          |    2.3731 |
|           Power DRAM [W]          |    1.4826 |
|            DP [MFLOP/s]           |    0.1032 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1032 |
|  Memory load bandwidth [MBytes/s] |  518.6621 |
|  Memory load data volume [GBytes] |    0.8302 |
| Memory evict bandwidth [MBytes/s] |  886.2456 |
| Memory evict data volume [GBytes] |    1.4186 |
|    Memory bandwidth [MBytes/s]    | 1404.9077 |
|    Memory data volume [GBytes]    |    2.2488 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 2011704932 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 1525585995 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 1536013440 |
|              PWR_PKG_ENERGY              |   PWR0  |     8.9315 |
|              PWR_DRAM_ENERGY             |   PWR3  |     2.4352 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     165182 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   14220106 |
|                DRAM_WRITES               | MBOX0C2 |   22258065 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.5966 |
|        Runtime unhalted [s]       |    0.6622 |
|            Clock [MHz]            | 2288.3137 |
|                CPI                |    0.7584 |
|             Energy [J]            |    8.9315 |
|             Power [W]             |    5.5941 |
|          Energy DRAM [J]          |    2.4352 |
|           Power DRAM [W]          |    1.5253 |
|            DP [MFLOP/s]           |    0.1035 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1035 |
|  Memory load bandwidth [MBytes/s] |  570.0204 |
|  Memory load data volume [GBytes] |    0.9101 |
| Memory evict bandwidth [MBytes/s] |  892.2262 |
| Memory evict data volume [GBytes] |    1.4245 |
|    Memory bandwidth [MBytes/s]    | 1462.2465 |
|    Memory data volume [GBytes]    |    2.3346 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 2011704905 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 1505907764 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 1517840832 |
|              PWR_PKG_ENERGY              |   PWR0  |     8.5588 |
|              PWR_DRAM_ENERGY             |   PWR3  |     2.3499 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     165183 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   12358828 |
|                DRAM_WRITES               | MBOX0C2 |   22096456 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.5881 |
|        Runtime unhalted [s]       |    0.6536 |
|            Clock [MHz]            | 2285.8375 |
|                CPI                |    0.7486 |
|             Energy [J]            |    8.5588 |
|             Power [W]             |    5.3895 |
|          Energy DRAM [J]          |    2.3499 |
|           Power DRAM [W]          |    1.4797 |
|            DP [MFLOP/s]           |    0.1040 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1040 |
|  Memory load bandwidth [MBytes/s] |  498.0710 |
|  Memory load data volume [GBytes] |    0.7910 |
| Memory evict bandwidth [MBytes/s] |  890.5055 |
| Memory evict data volume [GBytes] |    1.4142 |
|    Memory bandwidth [MBytes/s]    | 1388.5764 |
|    Memory data volume [GBytes]    |    2.2051 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 4035697519 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 3045938013 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 3064320288 |
|              PWR_PKG_ENERGY              |   PWR0  |    17.2004 |
|              PWR_DRAM_ENERGY             |   PWR3  |     4.6730 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     330303 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   23621030 |
|                DRAM_WRITES               | MBOX0C2 |   44270063 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    3.1811 |
|        Runtime unhalted [s]       |    1.3221 |
|            Clock [MHz]            | 2290.1271 |
|                CPI                |    0.7547 |
|             Energy [J]            |   17.2004 |
|             Power [W]             |    5.4070 |
|          Energy DRAM [J]          |    4.6730 |
|           Power DRAM [W]          |    1.4690 |
|            DP [MFLOP/s]           |    0.1038 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1038 |
|  Memory load bandwidth [MBytes/s] |  475.2219 |
|  Memory load data volume [GBytes] |    1.5117 |
| Memory evict bandwidth [MBytes/s] |  890.6513 |
| Memory evict data volume [GBytes] |    2.8333 |
|    Memory bandwidth [MBytes/s]    | 1365.8732 |
|    Memory data volume [GBytes]    |    4.3450 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 4035697465 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 3052286882 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 3068014560 |
|              PWR_PKG_ENERGY              |   PWR0  |    17.7907 |
|              PWR_DRAM_ENERGY             |   PWR3  |     4.7330 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     330303 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   24790950 |
|                DRAM_WRITES               | MBOX0C2 |   44345168 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    3.1854 |
|        Runtime unhalted [s]       |    1.3248 |
|            Clock [MHz]            | 2292.1349 |
|                CPI                |    0.7563 |
|             Energy [J]            |   17.7907 |
|             Power [W]             |    5.5851 |
|          Energy DRAM [J]          |    4.7330 |
|           Power DRAM [W]          |    1.4858 |
|            DP [MFLOP/s]           |    0.1037 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1037 |
|  Memory load bandwidth [MBytes/s] |  498.0955 |
|  Memory load data volume [GBytes] |    1.5866 |
| Memory evict bandwidth [MBytes/s] |  890.9754 |
| Memory evict data volume [GBytes] |    2.8381 |
|    Memory bandwidth [MBytes/s]    | 1389.0708 |
|    Memory data volume [GBytes]    |    4.4247 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 4035697432 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 3019659841 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 3039755616 |
|              PWR_PKG_ENERGY              |   PWR0  |    17.2013 |
|              PWR_DRAM_ENERGY             |   PWR3  |     4.6805 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     330302 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   23890903 |
|                DRAM_WRITES               | MBOX0C2 |   44265000 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    3.1746 |
|        Runtime unhalted [s]       |    1.3106 |
|            Clock [MHz]            | 2288.7214 |
|                CPI                |    0.7482 |
|             Energy [J]            |   17.2013 |
|             Power [W]             |    5.4185 |
|          Energy DRAM [J]          |    4.6805 |
|           Power DRAM [W]          |    1.4744 |
|            DP [MFLOP/s]           |    0.1040 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1040 |
|  Memory load bandwidth [MBytes/s] |  481.6470 |
|  Memory load data volume [GBytes] |    1.5290 |
| Memory evict bandwidth [MBytes/s] |  892.3943 |
| Memory evict data volume [GBytes] |    2.8330 |
|    Memory bandwidth [MBytes/s]    | 1374.0413 |
|    Memory data volume [GBytes]    |    4.3620 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 4035697496 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 3086209429 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 3105443904 |
|              PWR_PKG_ENERGY              |   PWR0  |    17.6578 |
|              PWR_DRAM_ENERGY             |   PWR3  |     4.7363 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     330302 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   24607568 |
|                DRAM_WRITES               | MBOX0C2 |   44340486 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    3.2021 |
|        Runtime unhalted [s]       |    1.3396 |
|            Clock [MHz]            | 2289.6430 |
|                CPI                |    0.7647 |
|             Energy [J]            |   17.6578 |
|             Power [W]             |    5.5144 |
|          Energy DRAM [J]          |    4.7363 |
|           Power DRAM [W]          |    1.4791 |
|            DP [MFLOP/s]           |    0.1032 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1032 |
|  Memory load bandwidth [MBytes/s] |  491.8273 |
|  Memory load data volume [GBytes] |    1.5749 |
| Memory evict bandwidth [MBytes/s] |  886.2258 |
| Memory evict data volume [GBytes] |    2.8378 |
|    Memory bandwidth [MBytes/s]    | 1378.0531 |
|    Memory data volume [GBytes]    |    4.4127 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 4035697545 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 3090503043 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 3110361504 |
|              PWR_PKG_ENERGY              |   PWR0  |    18.5821 |
|              PWR_DRAM_ENERGY             |   PWR3  |     5.0137 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |     330302 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   31113304 |
|                DRAM_WRITES               | MBOX0C2 |   44602101 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    3.2233 |
|        Runtime unhalted [s]       |    1.3414 |
|            Clock [MHz]            | 2289.2454 |
|                CPI                |    0.7658 |
|             Energy [J]            |   18.5821 |
|             Power [W]             |    5.7649 |
|          Energy DRAM [J]          |    5.0137 |
|           Power DRAM [W]          |    1.5555 |
|            DP [MFLOP/s]           |    0.1025 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |         0 |
|          Scalar [MUOPS/s]         |    0.1025 |
|  Memory load bandwidth [MBytes/s] |  617.7659 |
|  Memory load data volume [GBytes] |    1.9913 |
| Memory evict bandwidth [MBytes/s] |  885.5908 |
| Memory evict data volume [GBytes] |    2.8545 |
|    Memory bandwidth [MBytes/s]    | 1503.3567 |
|    Memory data volume [GBytes]    |    4.8458 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

