Iteration with GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 2535301200456458802993406410752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 274893651 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 228856439 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 267457440 |
|              PWR_PKG_ENERGY              |   PWR0  |    0.8801 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.4409 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  18880570 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      2560 |
|                DRAM_READS                | MBOX0C1 |  10548426 |
|                DRAM_WRITES               | MBOX0C2 |   1252715 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1769 |
|        Runtime unhalted [s]       |    0.0993 |
|            Clock [MHz]            | 1971.4231 |
|                CPI                |    0.8325 |
|             Energy [J]            |    0.8801 |
|             Power [W]             |    4.9761 |
|          Energy DRAM [J]          |    0.4409 |
|           Power DRAM [W]          |    2.4929 |
|            DP [MFLOP/s]           |  106.8063 |
|          AVX DP [MFLOP/s]         |    0.0579 |
|          Packed [MUOPS/s]         |    0.0145 |
|          Scalar [MUOPS/s]         |  106.7484 |
|  Memory load bandwidth [MBytes/s] | 3816.9264 |
|  Memory load data volume [GBytes] |    0.6751 |
| Memory evict bandwidth [MBytes/s] |  453.2924 |
| Memory evict data volume [GBytes] |    0.0802 |
|    Memory bandwidth [MBytes/s]    | 4270.2188 |
|    Memory data volume [GBytes]    |    0.7553 |
|       Operational intensity       |    0.0250 |
+-----------------------------------+-----------+

Iteration with GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 2535301200456458802993406410752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 274893614 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 232613397 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 271422720 |
|              PWR_PKG_ENERGY              |   PWR0  |    0.8937 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.4476 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  18880567 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      2560 |
|                DRAM_READS                | MBOX0C1 |  10664026 |
|                DRAM_WRITES               | MBOX0C2 |   1257897 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1799 |
|        Runtime unhalted [s]       |    0.1010 |
|            Clock [MHz]            | 1974.5214 |
|                CPI                |    0.8462 |
|             Energy [J]            |    0.8937 |
|             Power [W]             |    4.9684 |
|          Energy DRAM [J]          |    0.4476 |
|           Power DRAM [W]          |    2.4886 |
|            DP [MFLOP/s]           |  105.0243 |
|          AVX DP [MFLOP/s]         |    0.0569 |
|          Packed [MUOPS/s]         |    0.0142 |
|          Scalar [MUOPS/s]         |  104.9674 |
|  Memory load bandwidth [MBytes/s] | 3794.3766 |
|  Memory load data volume [GBytes] |    0.6825 |
| Memory evict bandwidth [MBytes/s] |  447.5734 |
| Memory evict data volume [GBytes] |    0.0805 |
|    Memory bandwidth [MBytes/s]    | 4241.9500 |
|    Memory data volume [GBytes]    |    0.7630 |
|       Operational intensity       |    0.0248 |
+-----------------------------------+-----------+

Iteration with GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 2535301200456458802993406410752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 274893575 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 230845395 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 272651808 |
|              PWR_PKG_ENERGY              |   PWR0  |    0.8915 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.4494 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  18880566 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      2560 |
|                DRAM_READS                | MBOX0C1 |  10757068 |
|                DRAM_WRITES               | MBOX0C2 |   1254972 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1803 |
|        Runtime unhalted [s]       |    0.1002 |
|            Clock [MHz]            | 1950.6792 |
|                CPI                |    0.8398 |
|             Energy [J]            |    0.8915 |
|             Power [W]             |    4.9455 |
|          Energy DRAM [J]          |    0.4494 |
|           Power DRAM [W]          |    2.4929 |
|            DP [MFLOP/s]           |  104.7896 |
|          AVX DP [MFLOP/s]         |    0.0568 |
|          Packed [MUOPS/s]         |    0.0142 |
|          Scalar [MUOPS/s]         |  104.7328 |
|  Memory load bandwidth [MBytes/s] | 3818.9278 |
|  Memory load data volume [GBytes] |    0.6885 |
| Memory evict bandwidth [MBytes/s] |  445.5347 |
| Memory evict data volume [GBytes] |    0.0803 |
|    Memory bandwidth [MBytes/s]    | 4264.4625 |
|    Memory data volume [GBytes]    |    0.7688 |
|       Operational intensity       |    0.0246 |
+-----------------------------------+-----------+

Iteration with GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 2535301200456458802993406410752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 274893595 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 231388664 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 266538624 |
|              PWR_PKG_ENERGY              |   PWR0  |    0.8901 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.4424 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  18880566 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      2560 |
|                DRAM_READS                | MBOX0C1 |  10590401 |
|                DRAM_WRITES               | MBOX0C2 |   1253856 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1766 |
|        Runtime unhalted [s]       |    0.1004 |
|            Clock [MHz]            | 2000.1183 |
|                CPI                |    0.8417 |
|             Energy [J]            |    0.8901 |
|             Power [W]             |    5.0414 |
|          Energy DRAM [J]          |    0.4424 |
|           Power DRAM [W]          |    2.5055 |
|            DP [MFLOP/s]           |  106.9901 |
|          AVX DP [MFLOP/s]         |    0.0580 |
|          Packed [MUOPS/s]         |    0.0145 |
|          Scalar [MUOPS/s]         |  106.9321 |
|  Memory load bandwidth [MBytes/s] | 3838.7104 |
|  Memory load data volume [GBytes] |    0.6778 |
| Memory evict bandwidth [MBytes/s] |  454.4861 |
| Memory evict data volume [GBytes] |    0.0802 |
|    Memory bandwidth [MBytes/s]    | 4293.1965 |
|    Memory data volume [GBytes]    |    0.7580 |
|       Operational intensity       |    0.0249 |
+-----------------------------------+-----------+

Iteration with GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 2535301200456458802993406410752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 274893608 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 231221278 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 275365824 |
|              PWR_PKG_ENERGY              |   PWR0  |    0.8835 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.4491 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  18880566 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      2560 |
|                DRAM_READS                | MBOX0C1 |  10728201 |
|                DRAM_WRITES               | MBOX0C2 |   1252490 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1808 |
|        Runtime unhalted [s]       |    0.1004 |
|            Clock [MHz]            | 1934.6008 |
|                CPI                |    0.8411 |
|             Energy [J]            |    0.8835 |
|             Power [W]             |    4.8869 |
|          Energy DRAM [J]          |    0.4491 |
|           Power DRAM [W]          |    2.4840 |
|            DP [MFLOP/s]           |  104.4853 |
|          AVX DP [MFLOP/s]         |    0.0566 |
|          Packed [MUOPS/s]         |    0.0142 |
|          Scalar [MUOPS/s]         |  104.4286 |
|  Memory load bandwidth [MBytes/s] | 3797.6196 |
|  Memory load data volume [GBytes] |    0.6866 |
| Memory evict bandwidth [MBytes/s] |  443.3624 |
| Memory evict data volume [GBytes] |    0.0802 |
|    Memory bandwidth [MBytes/s]    | 4240.9819 |
|    Memory data volume [GBytes]    |    0.7668 |
|       Operational intensity       |    0.0246 |
+-----------------------------------+-----------+

Iteration with GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 3213876088517980551083924184682325205044405987565585670602752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 579849928 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 470975469 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 577918944 |
|              PWR_PKG_ENERGY              |   PWR0  |    1.8212 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.9348 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  39852088 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      5120 |
|                DRAM_READS                | MBOX0C1 |  22405624 |
|                DRAM_WRITES               | MBOX0C2 |   2632457 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.3706 |
|        Runtime unhalted [s]       |    0.2044 |
|            Clock [MHz]            | 1877.5794 |
|                CPI                |    0.8122 |
|             Energy [J]            |    1.8212 |
|             Power [W]             |    4.9147 |
|          Energy DRAM [J]          |    0.9348 |
|           Power DRAM [W]          |    2.5227 |
|            DP [MFLOP/s]           |  107.5985 |
|          AVX DP [MFLOP/s]         |    0.0553 |
|          Packed [MUOPS/s]         |    0.0138 |
|          Scalar [MUOPS/s]         |  107.5433 |
|  Memory load bandwidth [MBytes/s] | 3869.6278 |
|  Memory load data volume [GBytes] |    1.4340 |
| Memory evict bandwidth [MBytes/s] |  454.6461 |
| Memory evict data volume [GBytes] |    0.1685 |
|    Memory bandwidth [MBytes/s]    | 4324.2739 |
|    Memory data volume [GBytes]    |    1.6024 |
|       Operational intensity       |    0.0249 |
+-----------------------------------+-----------+

Iteration with GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 3213876088517980551083924184682325205044405987565585670602752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 579849925 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 474242891 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 578807136 |
|              PWR_PKG_ENERGY              |   PWR0  |    1.8244 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.9330 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  39852086 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      5120 |
|                DRAM_READS                | MBOX0C1 |  22303872 |
|                DRAM_WRITES               | MBOX0C2 |   2635920 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.3724 |
|        Runtime unhalted [s]       |    0.2058 |
|            Clock [MHz]            | 1887.6997 |
|                CPI                |    0.8179 |
|             Energy [J]            |    1.8244 |
|             Power [W]             |    4.8995 |
|          Energy DRAM [J]          |    0.9330 |
|           Power DRAM [W]          |    2.5057 |
|            DP [MFLOP/s]           |  107.0783 |
|          AVX DP [MFLOP/s]         |    0.0550 |
|          Packed [MUOPS/s]         |    0.0137 |
|          Scalar [MUOPS/s]         |  107.0233 |
|  Memory load bandwidth [MBytes/s] | 3833.4294 |
|  Memory load data volume [GBytes] |    1.4274 |
| Memory evict bandwidth [MBytes/s] |  453.0430 |
| Memory evict data volume [GBytes] |    0.1687 |
|    Memory bandwidth [MBytes/s]    | 4286.4724 |
|    Memory data volume [GBytes]    |    1.5961 |
|       Operational intensity       |    0.0250 |
+-----------------------------------+-----------+

Iteration with GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 3213876088517980551083924184682325205044405987565585670602752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 579850150 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 469470320 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 581063808 |
|              PWR_PKG_ENERGY              |   PWR0  |    1.8101 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.9351 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  39852088 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      5120 |
|                DRAM_READS                | MBOX0C1 |  22331703 |
|                DRAM_WRITES               | MBOX0C2 |   2633463 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.3730 |
|        Runtime unhalted [s]       |    0.2038 |
|            Clock [MHz]            | 1861.4757 |
|                CPI                |    0.8096 |
|             Energy [J]            |    1.8101 |
|             Power [W]             |    4.8521 |
|          Energy DRAM [J]          |    0.9351 |
|           Power DRAM [W]          |    2.5065 |
|            DP [MFLOP/s]           |  106.8828 |
|          AVX DP [MFLOP/s]         |    0.0549 |
|          Packed [MUOPS/s]         |    0.0137 |
|          Scalar [MUOPS/s]         |  106.8279 |
|  Memory load bandwidth [MBytes/s] | 3831.2064 |
|  Memory load data volume [GBytes] |    1.4292 |
| Memory evict bandwidth [MBytes/s] |  451.7945 |
| Memory evict data volume [GBytes] |    0.1685 |
|    Memory bandwidth [MBytes/s]    | 4283.0009 |
|    Memory data volume [GBytes]    |    1.5978 |
|       Operational intensity       |    0.0250 |
+-----------------------------------+-----------+

Iteration with GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 3213876088517980551083924184682325205044405987565585670602752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 579849913 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 469363841 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 582049632 |
|              PWR_PKG_ENERGY              |   PWR0  |    1.8134 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.9340 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  39852088 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      5120 |
|                DRAM_READS                | MBOX0C1 |  22238410 |
|                DRAM_WRITES               | MBOX0C2 |   2639404 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.3733 |
|        Runtime unhalted [s]       |    0.2037 |
|            Clock [MHz]            | 1857.8686 |
|                CPI                |    0.8095 |
|             Energy [J]            |    1.8134 |
|             Power [W]             |    4.8574 |
|          Energy DRAM [J]          |    0.9340 |
|           Power DRAM [W]          |    2.5019 |
|            DP [MFLOP/s]           |  106.8034 |
|          AVX DP [MFLOP/s]         |    0.0549 |
|          Packed [MUOPS/s]         |    0.0137 |
|          Scalar [MUOPS/s]         |  106.7486 |
|  Memory load bandwidth [MBytes/s] | 3812.3665 |
|  Memory load data volume [GBytes] |    1.4233 |
| Memory evict bandwidth [MBytes/s] |  452.4773 |
| Memory evict data volume [GBytes] |    0.1689 |
|    Memory bandwidth [MBytes/s]    | 4264.8438 |
|    Memory data volume [GBytes]    |    1.5922 |
|       Operational intensity       |    0.0250 |
+-----------------------------------+-----------+

Iteration with GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 3213876088517980551083924184682325205044405987565585670602752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 579849923 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 464305885 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 584032224 |
|              PWR_PKG_ENERGY              |   PWR0  |    1.8027 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.9333 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  39852087 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      5120 |
|                DRAM_READS                | MBOX0C1 |  22224086 |
|                DRAM_WRITES               | MBOX0C2 |   2629689 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.3731 |
|        Runtime unhalted [s]       |    0.2015 |
|            Clock [MHz]            | 1831.6013 |
|                CPI                |    0.8007 |
|             Energy [J]            |    1.8027 |
|             Power [W]             |    4.8324 |
|          Energy DRAM [J]          |    0.9333 |
|           Power DRAM [W]          |    2.5019 |
|            DP [MFLOP/s]           |  106.8822 |
|          AVX DP [MFLOP/s]         |    0.0549 |
|          Packed [MUOPS/s]         |    0.0137 |
|          Scalar [MUOPS/s]         |  106.8273 |
|  Memory load bandwidth [MBytes/s] | 3812.7219 |
|  Memory load data volume [GBytes] |    1.4223 |
| Memory evict bandwidth [MBytes/s] |  451.1444 |
| Memory evict data volume [GBytes] |    0.1683 |
|    Memory bandwidth [MBytes/s]    | 4263.8663 |
|    Memory data volume [GBytes]    |    1.5906 |
|       Operational intensity       |    0.0251 |
+-----------------------------------+-----------+

Iteration with GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 5164499756173817179311838344006023748659411585658447025661318713081295244033682389259290706560275662871806343945494986752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 1189762673 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  940446936 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 1216843104 |
|              PWR_PKG_ENERGY              |   PWR0  |     3.7076 |
|              PWR_DRAM_ENERGY             |   PWR3  |     1.9188 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   81795127 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      10240 |
|                DRAM_READS                | MBOX0C1 |   45679400 |
|                DRAM_WRITES               | MBOX0C2 |    5404231 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.7628 |
|        Runtime unhalted [s]       |    0.4082 |
|            Clock [MHz]            | 1780.6271 |
|                CPI                |    0.7904 |
|             Energy [J]            |    3.7076 |
|             Power [W]             |    4.8603 |
|          Energy DRAM [J]          |    1.9188 |
|           Power DRAM [W]          |    2.5153 |
|            DP [MFLOP/s]           |  107.2784 |
|          AVX DP [MFLOP/s]         |    0.0537 |
|          Packed [MUOPS/s]         |    0.0134 |
|          Scalar [MUOPS/s]         |  107.2247 |
|  Memory load bandwidth [MBytes/s] | 3832.3740 |
|  Memory load data volume [GBytes] |    2.9235 |
| Memory evict bandwidth [MBytes/s] |  453.3999 |
| Memory evict data volume [GBytes] |    0.3459 |
|    Memory bandwidth [MBytes/s]    | 4285.7739 |
|    Memory data volume [GBytes]    |    3.2694 |
|       Operational intensity       |    0.0250 |
+-----------------------------------+-----------+

Iteration with GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 5164499756173817179311838344006023748659411585658447025661318713081295244033682389259290706560275662871806343945494986752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 1189762646 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  943793113 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 1219567968 |
|              PWR_PKG_ENERGY              |   PWR0  |     3.7180 |
|              PWR_DRAM_ENERGY             |   PWR3  |     1.9292 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   81795128 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      10240 |
|                DRAM_READS                | MBOX0C1 |   46044460 |
|                DRAM_WRITES               | MBOX0C2 |    5402798 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.7653 |
|        Runtime unhalted [s]       |    0.4097 |
|            Clock [MHz]            | 1782.5500 |
|                CPI                |    0.7933 |
|             Energy [J]            |    3.7180 |
|             Power [W]             |    4.8581 |
|          Energy DRAM [J]          |    1.9292 |
|           Power DRAM [W]          |    2.5208 |
|            DP [MFLOP/s]           |  106.9309 |
|          AVX DP [MFLOP/s]         |    0.0535 |
|          Packed [MUOPS/s]         |    0.0134 |
|          Scalar [MUOPS/s]         |  106.8773 |
|  Memory load bandwidth [MBytes/s] | 3850.4863 |
|  Memory load data volume [GBytes] |    2.9468 |
| Memory evict bandwidth [MBytes/s] |  451.8111 |
| Memory evict data volume [GBytes] |    0.3458 |
|    Memory bandwidth [MBytes/s]    | 4302.2974 |
|    Memory data volume [GBytes]    |    3.2926 |
|       Operational intensity       |    0.0249 |
+-----------------------------------+-----------+

Iteration with GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 5164499756173817179311838344006023748659411585658447025661318713081295244033682389259290706560275662871806343945494986752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 1189762882 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  941330265 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 1216858656 |
|              PWR_PKG_ENERGY              |   PWR0  |     3.7066 |
|              PWR_DRAM_ENERGY             |   PWR3  |     1.9252 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   81795127 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      10240 |
|                DRAM_READS                | MBOX0C1 |   46255808 |
|                DRAM_WRITES               | MBOX0C2 |    5404903 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.7630 |
|        Runtime unhalted [s]       |    0.4086 |
|            Clock [MHz]            | 1782.2766 |
|                CPI                |    0.7912 |
|             Energy [J]            |    3.7066 |
|             Power [W]             |    4.8578 |
|          Energy DRAM [J]          |    1.9252 |
|           Power DRAM [W]          |    2.5232 |
|            DP [MFLOP/s]           |  107.2527 |
|          AVX DP [MFLOP/s]         |    0.0537 |
|          Packed [MUOPS/s]         |    0.0134 |
|          Scalar [MUOPS/s]         |  107.1990 |
|  Memory load bandwidth [MBytes/s] | 3879.8007 |
|  Memory load data volume [GBytes] |    2.9604 |
| Memory evict bandwidth [MBytes/s] |  453.3473 |
| Memory evict data volume [GBytes] |    0.3459 |
|    Memory bandwidth [MBytes/s]    | 4333.1481 |
|    Memory data volume [GBytes]    |    3.3063 |
|       Operational intensity       |    0.0248 |
+-----------------------------------+-----------+

Iteration with GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 5164499756173817179311838344006023748659411585658447025661318713081295244033682389259290706560275662871806343945494986752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 1189762682 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  940457474 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 1218377472 |
|              PWR_PKG_ENERGY              |   PWR0  |     3.7128 |
|              PWR_DRAM_ENERGY             |   PWR3  |     1.9210 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   81795128 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      10240 |
|                DRAM_READS                | MBOX0C1 |   45922610 |
|                DRAM_WRITES               | MBOX0C2 |    5399878 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.7627 |
|        Runtime unhalted [s]       |    0.4083 |
|            Clock [MHz]            | 1778.0439 |
|                CPI                |    0.7905 |
|             Energy [J]            |    3.7128 |
|             Power [W]             |    4.8679 |
|          Energy DRAM [J]          |    1.9210 |
|           Power DRAM [W]          |    2.5186 |
|            DP [MFLOP/s]           |  107.2962 |
|          AVX DP [MFLOP/s]         |    0.0537 |
|          Packed [MUOPS/s]         |    0.0134 |
|          Scalar [MUOPS/s]         |  107.2425 |
|  Memory load bandwidth [MBytes/s] | 3853.4158 |
|  Memory load data volume [GBytes] |    2.9390 |
| Memory evict bandwidth [MBytes/s] |  453.1096 |
| Memory evict data volume [GBytes] |    0.3456 |
|    Memory bandwidth [MBytes/s]    | 4306.5254 |
|    Memory data volume [GBytes]    |    3.2846 |
|       Operational intensity       |    0.0249 |
+-----------------------------------+-----------+

Iteration with GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 5164499756173817179311838344006023748659411585658447025661318713081295244033682389259290706560275662871806343945494986752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 1189762669 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  940610534 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 1212892800 |
|              PWR_PKG_ENERGY              |   PWR0  |     3.7047 |
|              PWR_DRAM_ENERGY             |   PWR3  |     1.9236 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   81795128 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      10240 |
|                DRAM_READS                | MBOX0C1 |   46115070 |
|                DRAM_WRITES               | MBOX0C2 |    5398968 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.7625 |
|        Runtime unhalted [s]       |    0.4083 |
|            Clock [MHz]            | 1786.7378 |
|                CPI                |    0.7906 |
|             Energy [J]            |    3.7047 |
|             Power [W]             |    4.8587 |
|          Energy DRAM [J]          |    1.9236 |
|           Power DRAM [W]          |    2.5228 |
|            DP [MFLOP/s]           |  107.3273 |
|          AVX DP [MFLOP/s]         |    0.0537 |
|          Packed [MUOPS/s]         |    0.0134 |
|          Scalar [MUOPS/s]         |  107.2736 |
|  Memory load bandwidth [MBytes/s] | 3870.6895 |
|  Memory load data volume [GBytes] |    2.9514 |
| Memory evict bandwidth [MBytes/s] |  453.1649 |
| Memory evict data volume [GBytes] |    0.3455 |
|    Memory bandwidth [MBytes/s]    | 4323.8544 |
|    Memory data volume [GBytes]    |    3.2969 |
|       Operational intensity       |    0.0248 |
+-----------------------------------+-----------+

Iteration with GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 13336028865759708548159703581442515594289516644631816320792515623528074475635264143042864401743108581485859821186866480891777603308238730160726712104661660092190315159028029116926156571823628049457930032271773203963381496074952922582327754752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 2409598277 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 1914873080 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 2451821376 |
|              PWR_PKG_ENERGY              |   PWR0  |     7.5377 |
|              PWR_DRAM_ENERGY             |   PWR3  |     3.8737 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  165681205 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      20480 |
|                DRAM_READS                | MBOX0C1 |   93207752 |
|                DRAM_WRITES               | MBOX0C2 |   10958152 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.5305 |
|        Runtime unhalted [s]       |    0.8312 |
|            Clock [MHz]            | 1799.3318 |
|                CPI                |    0.7947 |
|             Energy [J]            |    7.5377 |
|             Power [W]             |    4.9250 |
|          Energy DRAM [J]          |    3.8737 |
|           Power DRAM [W]          |    2.5310 |
|            DP [MFLOP/s]           |  108.3063 |
|          AVX DP [MFLOP/s]         |    0.0535 |
|          Packed [MUOPS/s]         |    0.0134 |
|          Scalar [MUOPS/s]         |  108.2528 |
|  Memory load bandwidth [MBytes/s] | 3897.6061 |
|  Memory load data volume [GBytes] |    5.9653 |
| Memory evict bandwidth [MBytes/s] |  458.2297 |
| Memory evict data volume [GBytes] |    0.7013 |
|    Memory bandwidth [MBytes/s]    | 4355.8358 |
|    Memory data volume [GBytes]    |    6.6666 |
|       Operational intensity       |    0.0249 |
+-----------------------------------+-----------+

Iteration with GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 13336028865759708548159703581442515594289516644631816320792515623528074475635264143042864401743108581485859821186866480891777603308238730160726712104661660092190315159028029116926156571823628049457930032271773203963381496074952922582327754752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 2409597991 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 1941699187 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 2417074848 |
|              PWR_PKG_ENERGY              |   PWR0  |     7.5745 |
|              PWR_DRAM_ENERGY             |   PWR3  |     3.8448 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  165681206 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      20480 |
|                DRAM_READS                | MBOX0C1 |   93029239 |
|                DRAM_WRITES               | MBOX0C2 |   10940373 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.5138 |
|        Runtime unhalted [s]       |    0.8428 |
|            Clock [MHz]            | 1850.7094 |
|                CPI                |    0.8058 |
|             Energy [J]            |    7.5745 |
|             Power [W]             |    5.0035 |
|          Energy DRAM [J]          |    3.8448 |
|           Power DRAM [W]          |    2.5398 |
|            DP [MFLOP/s]           |  109.4987 |
|          AVX DP [MFLOP/s]         |    0.0541 |
|          Packed [MUOPS/s]         |    0.0135 |
|          Scalar [MUOPS/s]         |  109.4446 |
|  Memory load bandwidth [MBytes/s] | 3932.9691 |
|  Memory load data volume [GBytes] |    5.9539 |
| Memory evict bandwidth [MBytes/s] |  462.5228 |
| Memory evict data volume [GBytes] |    0.7002 |
|    Memory bandwidth [MBytes/s]    | 4395.4919 |
|    Memory data volume [GBytes]    |    6.6541 |
|       Operational intensity       |    0.0249 |
+-----------------------------------+-----------+

Iteration with GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 13336028865759708548159703581442515594289516644631816320792515623528074475635264143042864401743108581485859821186866480891777603308238730160726712104661660092190315159028029116926156571823628049457930032271773203963381496074952922582327754752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 2409597981 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 1919303180 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 2422159008 |
|              PWR_PKG_ENERGY              |   PWR0  |     7.5230 |
|              PWR_DRAM_ENERGY             |   PWR3  |     3.8469 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  165681207 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      20480 |
|                DRAM_READS                | MBOX0C1 |   92715616 |
|                DRAM_WRITES               | MBOX0C2 |   10953967 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.5168 |
|        Runtime unhalted [s]       |    0.8331 |
|            Clock [MHz]            | 1825.6096 |
|                CPI                |    0.7965 |
|             Energy [J]            |    7.5230 |
|             Power [W]             |    4.9597 |
|          Energy DRAM [J]          |    3.8469 |
|           Power DRAM [W]          |    2.5361 |
|            DP [MFLOP/s]           |  109.2829 |
|          AVX DP [MFLOP/s]         |    0.0540 |
|          Packed [MUOPS/s]         |    0.0135 |
|          Scalar [MUOPS/s]         |  109.2289 |
|  Memory load bandwidth [MBytes/s] | 3911.9847 |
|  Memory load data volume [GBytes] |    5.9338 |
| Memory evict bandwidth [MBytes/s] |  462.1848 |
| Memory evict data volume [GBytes] |    0.7011 |
|    Memory bandwidth [MBytes/s]    | 4374.1696 |
|    Memory data volume [GBytes]    |    6.6349 |
|       Operational intensity       |    0.0250 |
+-----------------------------------+-----------+

Iteration with GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 13336028865759708548159703581442515594289516644631816320792515623528074475635264143042864401743108581485859821186866480891777603308238730160726712104661660092190315159028029116926156571823628049457930032271773203963381496074952922582327754752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 2409598024 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 1895502951 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 2454395232 |
|              PWR_PKG_ENERGY              |   PWR0  |     7.4756 |
|              PWR_DRAM_ENERGY             |   PWR3  |     3.8707 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  165681207 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      20480 |
|                DRAM_READS                | MBOX0C1 |   92624723 |
|                DRAM_WRITES               | MBOX0C2 |   10947829 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.5298 |
|        Runtime unhalted [s]       |    0.8227 |
|            Clock [MHz]            | 1779.3157 |
|                CPI                |    0.7866 |
|             Energy [J]            |    7.4756 |
|             Power [W]             |    4.8865 |
|          Energy DRAM [J]          |    3.8707 |
|           Power DRAM [W]          |    2.5301 |
|            DP [MFLOP/s]           |  108.3535 |
|          AVX DP [MFLOP/s]         |    0.0535 |
|          Packed [MUOPS/s]         |    0.0134 |
|          Scalar [MUOPS/s]         |  108.3000 |
|  Memory load bandwidth [MBytes/s] | 3874.9132 |
|  Memory load data volume [GBytes] |    5.9280 |
| Memory evict bandwidth [MBytes/s] |  457.9974 |
| Memory evict data volume [GBytes] |    0.7007 |
|    Memory bandwidth [MBytes/s]    | 4332.9106 |
|    Memory data volume [GBytes]    |    6.6286 |
|       Operational intensity       |    0.0250 |
+-----------------------------------+-----------+

Iteration with GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 13336028865759708548159703581442515594289516644631816320792515623528074475635264143042864401743108581485859821186866480891777603308238730160726712104661660092190315159028029116926156571823628049457930032271773203963381496074952922582327754752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 2409598245 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 1898193602 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 2460151488 |
|              PWR_PKG_ENERGY              |   PWR0  |     7.4809 |
|              PWR_DRAM_ENERGY             |   PWR3  |     3.8781 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  165681208 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      20480 |
|                DRAM_READS                | MBOX0C1 |   92684100 |
|                DRAM_WRITES               | MBOX0C2 |   10952447 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.5336 |
|        Runtime unhalted [s]       |    0.8239 |
|            Clock [MHz]            | 1777.6722 |
|                CPI                |    0.7878 |
|             Energy [J]            |    7.4809 |
|             Power [W]             |    4.8782 |
|          Energy DRAM [J]          |    3.8781 |
|           Power DRAM [W]          |    2.5288 |
|            DP [MFLOP/s]           |  108.0911 |
|          AVX DP [MFLOP/s]         |    0.0534 |
|          Packed [MUOPS/s]         |    0.0134 |
|          Scalar [MUOPS/s]         |  108.0377 |
|  Memory load bandwidth [MBytes/s] | 3868.0063 |
|  Memory load data volume [GBytes] |    5.9318 |
| Memory evict bandwidth [MBytes/s] |  457.0809 |
| Memory evict data volume [GBytes] |    0.7010 |
|    Memory bandwidth [MBytes/s]    | 4325.0872 |
|    Memory data volume [GBytes]    |    6.6327 |
|       Operational intensity       |    0.0250 |
+-----------------------------------+-----------+

Iteration with GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 4849084508 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 3861992939 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 4886240064 |
|              PWR_PKG_ENERGY              |   PWR0  |    15.1630 |
|              PWR_DRAM_ENERGY             |   PWR3  |     7.7313 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  333453368 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      40960 |
|                DRAM_READS                | MBOX0C1 |  186904512 |
|                DRAM_WRITES               | MBOX0C2 |   22035979 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    3.0434 |
|        Runtime unhalted [s]       |    1.6762 |
|            Clock [MHz]            | 1820.9994 |
|                CPI                |    0.7964 |
|             Energy [J]            |   15.1630 |
|             Power [W]             |    4.9822 |
|          Energy DRAM [J]          |    7.7313 |
|           Power DRAM [W]          |    2.5403 |
|            DP [MFLOP/s]           |  109.6192 |
|          AVX DP [MFLOP/s]         |    0.0538 |
|          Packed [MUOPS/s]         |    0.0135 |
|          Scalar [MUOPS/s]         |  109.5653 |
|  Memory load bandwidth [MBytes/s] | 3930.4094 |
|  Memory load data volume [GBytes] |   11.9619 |
| Memory evict bandwidth [MBytes/s] |  463.3939 |
| Memory evict data volume [GBytes] |    1.4103 |
|    Memory bandwidth [MBytes/s]    | 4393.8034 |
|    Memory data volume [GBytes]    |   13.3722 |
|       Operational intensity       |    0.0249 |
+-----------------------------------+-----------+

Iteration with GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 4849084513 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 3859361248 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 4881750624 |
|              PWR_PKG_ENERGY              |   PWR0  |    15.2294 |
|              PWR_DRAM_ENERGY             |   PWR3  |     7.7473 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  333453368 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      40960 |
|                DRAM_READS                | MBOX0C1 |  187640392 |
|                DRAM_WRITES               | MBOX0C2 |   22079985 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    3.0451 |
|        Runtime unhalted [s]       |    1.6751 |
|            Clock [MHz]            | 1821.4092 |
|                CPI                |    0.7959 |
|             Energy [J]            |   15.2294 |
|             Power [W]             |    5.0013 |
|          Energy DRAM [J]          |    7.7473 |
|           Power DRAM [W]          |    2.5442 |
|            DP [MFLOP/s]           |  109.5579 |
|          AVX DP [MFLOP/s]         |    0.0538 |
|          Packed [MUOPS/s]         |    0.0135 |
|          Scalar [MUOPS/s]         |  109.5041 |
|  Memory load bandwidth [MBytes/s] | 3943.6787 |
|  Memory load data volume [GBytes] |   12.0090 |
| Memory evict bandwidth [MBytes/s] |  464.0598 |
| Memory evict data volume [GBytes] |    1.4131 |
|    Memory bandwidth [MBytes/s]    | 4407.7385 |
|    Memory data volume [GBytes]    |   13.4221 |
|       Operational intensity       |    0.0249 |
+-----------------------------------+-----------+

Iteration with GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 4849084467 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 3858616133 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 4866094752 |
|              PWR_PKG_ENERGY              |   PWR0  |    15.1837 |
|              PWR_DRAM_ENERGY             |   PWR3  |     7.7134 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  333453366 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      40960 |
|                DRAM_READS                | MBOX0C1 |  186023833 |
|                DRAM_WRITES               | MBOX0C2 |   22053331 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    3.0357 |
|        Runtime unhalted [s]       |    1.6748 |
|            Clock [MHz]            | 1826.9409 |
|                CPI                |    0.7957 |
|             Energy [J]            |   15.1837 |
|             Power [W]             |    5.0017 |
|          Energy DRAM [J]          |    7.7134 |
|           Power DRAM [W]          |    2.5409 |
|            DP [MFLOP/s]           |  109.8983 |
|          AVX DP [MFLOP/s]         |    0.0540 |
|          Packed [MUOPS/s]         |    0.0135 |
|          Scalar [MUOPS/s]         |  109.8444 |
|  Memory load bandwidth [MBytes/s] | 3921.8522 |
|  Memory load data volume [GBytes] |   11.9055 |
| Memory evict bandwidth [MBytes/s] |  464.9399 |
| Memory evict data volume [GBytes] |    1.4114 |
|    Memory bandwidth [MBytes/s]    | 4386.7921 |
|    Memory data volume [GBytes]    |   13.3169 |
|       Operational intensity       |    0.0251 |
+-----------------------------------+-----------+

Iteration with GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 4849084512 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 3849021536 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 4890027456 |
|              PWR_PKG_ENERGY              |   PWR0  |    15.1661 |
|              PWR_DRAM_ENERGY             |   PWR3  |     7.7520 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  333453367 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      40960 |
|                DRAM_READS                | MBOX0C1 |  187508314 |
|                DRAM_WRITES               | MBOX0C2 |   22053243 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    3.0449 |
|        Runtime unhalted [s]       |    1.6706 |
|            Clock [MHz]            | 1813.4620 |
|                CPI                |    0.7938 |
|             Energy [J]            |   15.1661 |
|             Power [W]             |    4.9809 |
|          Energy DRAM [J]          |    7.7520 |
|           Power DRAM [W]          |    2.5459 |
|            DP [MFLOP/s]           |  109.5669 |
|          AVX DP [MFLOP/s]         |    0.0538 |
|          Packed [MUOPS/s]         |    0.0135 |
|          Scalar [MUOPS/s]         |  109.5130 |
|  Memory load bandwidth [MBytes/s] | 3941.2252 |
|  Memory load data volume [GBytes] |   12.0005 |
| Memory evict bandwidth [MBytes/s] |  463.5357 |
| Memory evict data volume [GBytes] |    1.4114 |
|    Memory bandwidth [MBytes/s]    | 4404.7609 |
|    Memory data volume [GBytes]    |   13.4119 |
|       Operational intensity       |    0.0249 |
+-----------------------------------+-----------+

Iteration with GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 4849084472 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 3850775601 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 4890411744 |
|              PWR_PKG_ENERGY              |   PWR0  |    15.1815 |
|              PWR_DRAM_ENERGY             |   PWR3  |     7.7366 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  333453366 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      40960 |
|                DRAM_READS                | MBOX0C1 |  186743012 |
|                DRAM_WRITES               | MBOX0C2 |   22060204 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    3.0443 |
|        Runtime unhalted [s]       |    1.6714 |
|            Clock [MHz]            | 1814.1622 |
|                CPI                |    0.7941 |
|             Energy [J]            |   15.1815 |
|             Power [W]             |    4.9869 |
|          Energy DRAM [J]          |    7.7366 |
|           Power DRAM [W]          |    2.5413 |
|            DP [MFLOP/s]           |  109.5882 |
|          AVX DP [MFLOP/s]         |    0.0538 |
|          Packed [MUOPS/s]         |    0.0135 |
|          Scalar [MUOPS/s]         |  109.5344 |
|  Memory load bandwidth [MBytes/s] | 3925.9035 |
|  Memory load data volume [GBytes] |   11.9516 |
| Memory evict bandwidth [MBytes/s] |  463.7723 |
| Memory evict data volume [GBytes] |    1.4119 |
|    Memory bandwidth [MBytes/s]    | 4389.6758 |
|    Memory data volume [GBytes]    |   13.3634 |
|       Operational intensity       |    0.0250 |
+-----------------------------------+-----------+

Iteration with GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 9728230005 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 7862617995 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 9685373856 |
|              PWR_PKG_ENERGY              |   PWR0  |    30.6949 |
|              PWR_DRAM_ENERGY             |   PWR3  |    15.4234 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  668997688 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      81920 |
|                DRAM_READS                | MBOX0C1 |  376444435 |
|                DRAM_WRITES               | MBOX0C2 |   44316705 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    6.0417 |
|        Runtime unhalted [s]       |    3.4127 |
|            Clock [MHz]            | 1870.3447 |
|                CPI                |    0.8082 |
|             Energy [J]            |   30.6949 |
|             Power [W]             |    5.0805 |
|          Energy DRAM [J]          |   15.4234 |
|           Power DRAM [W]          |    2.5528 |
|            DP [MFLOP/s]           |  110.7836 |
|          AVX DP [MFLOP/s]         |    0.0542 |
|          Packed [MUOPS/s]         |    0.0136 |
|          Scalar [MUOPS/s]         |  110.7294 |
|  Memory load bandwidth [MBytes/s] | 3987.6700 |
|  Memory load data volume [GBytes] |   24.0924 |
| Memory evict bandwidth [MBytes/s] |  469.4462 |
| Memory evict data volume [GBytes] |    2.8363 |
|    Memory bandwidth [MBytes/s]    | 4457.1162 |
|    Memory data volume [GBytes]    |   26.9287 |
|       Operational intensity       |    0.0249 |
+-----------------------------------+-----------+

Iteration with GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 9728229783 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 7778982341 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 9700137120 |
|              PWR_PKG_ENERGY              |   PWR0  |    30.5060 |
|              PWR_DRAM_ENERGY             |   PWR3  |    15.4154 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  668997686 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      81920 |
|                DRAM_READS                | MBOX0C1 |  373784243 |
|                DRAM_WRITES               | MBOX0C2 |   44252408 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    6.0476 |
|        Runtime unhalted [s]       |    3.3765 |
|            Clock [MHz]            | 1847.5965 |
|                CPI                |    0.7996 |
|             Energy [J]            |   30.5060 |
|             Power [W]             |    5.0443 |
|          Energy DRAM [J]          |   15.4154 |
|           Power DRAM [W]          |    2.5490 |
|            DP [MFLOP/s]           |  110.6763 |
|          AVX DP [MFLOP/s]         |    0.0542 |
|          Packed [MUOPS/s]         |    0.0135 |
|          Scalar [MUOPS/s]         |  110.6221 |
|  Memory load bandwidth [MBytes/s] | 3955.6541 |
|  Memory load data volume [GBytes] |   23.9222 |
| Memory evict bandwidth [MBytes/s] |  468.3109 |
| Memory evict data volume [GBytes] |    2.8322 |
|    Memory bandwidth [MBytes/s]    | 4423.9650 |
|    Memory data volume [GBytes]    |   26.7543 |
|       Operational intensity       |    0.0250 |
+-----------------------------------+-----------+

Iteration with GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 9728230136 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 7944316794 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 9826960032 |
|              PWR_PKG_ENERGY              |   PWR0  |    31.2377 |
|              PWR_DRAM_ENERGY             |   PWR3  |    15.6608 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  668997685 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      81920 |
|                DRAM_READS                | MBOX0C1 |  384620910 |
|                DRAM_WRITES               | MBOX0C2 |   44470975 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    6.1251 |
|        Runtime unhalted [s]       |    3.4481 |
|            Clock [MHz]            | 1862.5624 |
|                CPI                |    0.8166 |
|             Energy [J]            |   31.2377 |
|             Power [W]             |    5.0999 |
|          Energy DRAM [J]          |   15.6608 |
|           Power DRAM [W]          |    2.5568 |
|            DP [MFLOP/s]           |  109.2750 |
|          AVX DP [MFLOP/s]         |    0.0535 |
|          Packed [MUOPS/s]         |    0.0134 |
|          Scalar [MUOPS/s]         |  109.2215 |
|  Memory load bandwidth [MBytes/s] | 4018.7990 |
|  Memory load data volume [GBytes] |   24.6157 |
| Memory evict bandwidth [MBytes/s] |  464.6651 |
| Memory evict data volume [GBytes] |    2.8461 |
|    Memory bandwidth [MBytes/s]    | 4483.4641 |
|    Memory data volume [GBytes]    |   27.4619 |
|       Operational intensity       |    0.0244 |
+-----------------------------------+-----------+

Iteration with GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 9728230106 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 7791786424 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 9753287136 |
|              PWR_PKG_ENERGY              |   PWR0  |    30.6929 |
|              PWR_DRAM_ENERGY             |   PWR3  |    15.5443 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  668997686 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      81920 |
|                DRAM_READS                | MBOX0C1 |  377486565 |
|                DRAM_WRITES               | MBOX0C2 |   44375256 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    6.0851 |
|        Runtime unhalted [s]       |    3.3819 |
|            Clock [MHz]            | 1840.5989 |
|                CPI                |    0.8009 |
|             Energy [J]            |   30.6929 |
|             Power [W]             |    5.0439 |
|          Energy DRAM [J]          |   15.5443 |
|           Power DRAM [W]          |    2.5545 |
|            DP [MFLOP/s]           |  109.9937 |
|          AVX DP [MFLOP/s]         |    0.0538 |
|          Packed [MUOPS/s]         |    0.0135 |
|          Scalar [MUOPS/s]         |  109.9399 |
|  Memory load bandwidth [MBytes/s] | 3970.1982 |
|  Memory load data volume [GBytes] |   24.1591 |
| Memory evict bandwidth [MBytes/s] |  466.7148 |
| Memory evict data volume [GBytes] |    2.8400 |
|    Memory bandwidth [MBytes/s]    | 4436.9130 |
|    Memory data volume [GBytes]    |   26.9992 |
|       Operational intensity       |    0.0248 |
+-----------------------------------+-----------+

Iteration with GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 9728230106 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 7801634640 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 9801382656 |
|              PWR_PKG_ENERGY              |   PWR0  |    30.6187 |
|              PWR_DRAM_ENERGY             |   PWR3  |    15.5081 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |          0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  668997689 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |      81920 |
|                DRAM_READS                | MBOX0C1 |  375417149 |
|                DRAM_WRITES               | MBOX0C2 |   44255580 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    6.0970 |
|        Runtime unhalted [s]       |    3.3862 |
|            Clock [MHz]            | 1833.8721 |
|                CPI                |    0.8020 |
|             Energy [J]            |   30.6187 |
|             Power [W]             |    5.0219 |
|          Energy DRAM [J]          |   15.5081 |
|           Power DRAM [W]          |    2.5436 |
|            DP [MFLOP/s]           |  109.7795 |
|          AVX DP [MFLOP/s]         |    0.0537 |
|          Packed [MUOPS/s]         |    0.0134 |
|          Scalar [MUOPS/s]         |  109.7258 |
|  Memory load bandwidth [MBytes/s] | 3940.7440 |
|  Memory load data volume [GBytes] |   24.0267 |
| Memory evict bandwidth [MBytes/s] |  464.5497 |
| Memory evict data volume [GBytes] |    2.8324 |
|    Memory bandwidth [MBytes/s]    | 4405.2937 |
|    Memory data volume [GBytes]    |   26.8591 |
|       Operational intensity       |    0.0249 |
+-----------------------------------+-----------+

Iteration without GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  |  9933374 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 17908400 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 21279264 |
|              PWR_PKG_ENERGY              |   PWR0  |   0.3342 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.1224 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |        0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       54 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     2560 |
|                DRAM_READS                | MBOX0C1 |   614674 |
|                DRAM_WRITES               | MBOX0C2 |  1244183 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.0708 |
|        Runtime unhalted [s]       |    0.0078 |
|            Clock [MHz]            | 1938.9686 |
|                CPI                |    1.8029 |
|             Energy [J]            |    0.3342 |
|             Power [W]             |    4.7197 |
|          Energy DRAM [J]          |    0.1224 |
|           Power DRAM [W]          |    1.7284 |
|            DP [MFLOP/s]           |    0.1454 |
|          AVX DP [MFLOP/s]         |    0.1446 |
|          Packed [MUOPS/s]         |    0.0362 |
|          Scalar [MUOPS/s]         |    0.0008 |
|  Memory load bandwidth [MBytes/s] |  555.6132 |
|  Memory load data volume [GBytes] |    0.0393 |
| Memory evict bandwidth [MBytes/s] | 1124.6360 |
| Memory evict data volume [GBytes] |    0.0796 |
|    Memory bandwidth [MBytes/s]    | 1680.2492 |
|    Memory data volume [GBytes]    |    0.1190 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  |  9933420 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 18234658 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 21631296 |
|              PWR_PKG_ENERGY              |   PWR0  |   0.3323 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.1228 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |        0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       56 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     2560 |
|                DRAM_READS                | MBOX0C1 |   632509 |
|                DRAM_WRITES               | MBOX0C2 |  1243504 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.0710 |
|        Runtime unhalted [s]       |    0.0079 |
|            Clock [MHz]            | 1942.1697 |
|                CPI                |    1.8357 |
|             Energy [J]            |    0.3323 |
|             Power [W]             |    4.6823 |
|          Energy DRAM [J]          |    0.1228 |
|           Power DRAM [W]          |    1.7305 |
|            DP [MFLOP/s]           |    0.1451 |
|          AVX DP [MFLOP/s]         |    0.1443 |
|          Packed [MUOPS/s]         |    0.0361 |
|          Scalar [MUOPS/s]         |    0.0008 |
|  Memory load bandwidth [MBytes/s] |  570.4374 |
|  Memory load data volume [GBytes] |    0.0405 |
| Memory evict bandwidth [MBytes/s] | 1121.4722 |
| Memory evict data volume [GBytes] |    0.0796 |
|    Memory bandwidth [MBytes/s]    | 1691.9096 |
|    Memory data volume [GBytes]    |    0.1201 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  |  9933399 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 18016413 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 21032544 |
|              PWR_PKG_ENERGY              |   PWR0  |   0.3315 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.1212 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |        0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       54 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     2560 |
|                DRAM_READS                | MBOX0C1 |   620610 |
|                DRAM_WRITES               | MBOX0C2 |  1244474 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.0698 |
|        Runtime unhalted [s]       |    0.0078 |
|            Clock [MHz]            | 1973.5522 |
|                CPI                |    1.8137 |
|             Energy [J]            |    0.3315 |
|             Power [W]             |    4.7468 |
|          Energy DRAM [J]          |    0.1212 |
|           Power DRAM [W]          |    1.7358 |
|            DP [MFLOP/s]           |    0.1474 |
|          AVX DP [MFLOP/s]         |    0.1466 |
|          Packed [MUOPS/s]         |    0.0367 |
|          Scalar [MUOPS/s]         |    0.0008 |
|  Memory load bandwidth [MBytes/s] |  568.7769 |
|  Memory load data volume [GBytes] |    0.0397 |
| Memory evict bandwidth [MBytes/s] | 1140.5359 |
| Memory evict data volume [GBytes] |    0.0796 |
|    Memory bandwidth [MBytes/s]    | 1709.3128 |
|    Memory data volume [GBytes]    |    0.1194 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  |  9933382 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 18338638 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 20996832 |
|              PWR_PKG_ENERGY              |   PWR0  |   0.3357 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.1213 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |        0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       56 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     2560 |
|                DRAM_READS                | MBOX0C1 |   633543 |
|                DRAM_WRITES               | MBOX0C2 |  1244031 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.0688 |
|        Runtime unhalted [s]       |    0.0080 |
|            Clock [MHz]            | 2012.2612 |
|                CPI                |    1.8462 |
|             Energy [J]            |    0.3357 |
|             Power [W]             |    4.8804 |
|          Energy DRAM [J]          |    0.1213 |
|           Power DRAM [W]          |    1.7631 |
|            DP [MFLOP/s]           |    0.1497 |
|          AVX DP [MFLOP/s]         |    0.1489 |
|          Packed [MUOPS/s]         |    0.0372 |
|          Scalar [MUOPS/s]         |    0.0008 |
|  Memory load bandwidth [MBytes/s] |  589.4765 |
|  Memory load data volume [GBytes] |    0.0405 |
| Memory evict bandwidth [MBytes/s] | 1157.5016 |
| Memory evict data volume [GBytes] |    0.0796 |
|    Memory bandwidth [MBytes/s]    | 1746.9780 |
|    Memory data volume [GBytes]    |    0.1202 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  |  9933369 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 18289158 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 21540768 |
|              PWR_PKG_ENERGY              |   PWR0  |   0.3386 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.1238 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |        0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       56 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     2560 |
|                DRAM_READS                | MBOX0C1 |   620902 |
|                DRAM_WRITES               | MBOX0C2 |  1241045 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.0705 |
|        Runtime unhalted [s]       |    0.0079 |
|            Clock [MHz]            | 1956.1215 |
|                CPI                |    1.8412 |
|             Energy [J]            |    0.3386 |
|             Power [W]             |    4.8030 |
|          Energy DRAM [J]          |    0.1238 |
|           Power DRAM [W]          |    1.7557 |
|            DP [MFLOP/s]           |    0.1460 |
|          AVX DP [MFLOP/s]         |    0.1452 |
|          Packed [MUOPS/s]         |    0.0363 |
|          Scalar [MUOPS/s]         |    0.0008 |
|  Memory load bandwidth [MBytes/s] |  563.6393 |
|  Memory load data volume [GBytes] |    0.0397 |
| Memory evict bandwidth [MBytes/s] | 1126.5896 |
| Memory evict data volume [GBytes] |    0.0794 |
|    Memory bandwidth [MBytes/s]    | 1690.2289 |
|    Memory data volume [GBytes]    |    0.1192 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 20652477 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 37764163 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 41297088 |
|              PWR_PKG_ENERGY              |   PWR0  |   0.6961 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.2403 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |        0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       56 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     5120 |
|                DRAM_READS                | MBOX0C1 |  1168457 |
|                DRAM_WRITES               | MBOX0C2 |  2617587 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1365 |
|        Runtime unhalted [s]       |    0.0164 |
|            Clock [MHz]            | 2106.8439 |
|                CPI                |    1.8286 |
|             Energy [J]            |    0.6961 |
|             Power [W]             |    5.0999 |
|          Energy DRAM [J]          |    0.2403 |
|           Power DRAM [W]          |    1.7605 |
|            DP [MFLOP/s]           |    0.1505 |
|          AVX DP [MFLOP/s]         |    0.1500 |
|          Packed [MUOPS/s]         |    0.0375 |
|          Scalar [MUOPS/s]         |    0.0004 |
|  Memory load bandwidth [MBytes/s] |  547.8679 |
|  Memory load data volume [GBytes] |    0.0748 |
| Memory evict bandwidth [MBytes/s] | 1227.3381 |
| Memory evict data volume [GBytes] |    0.1675 |
|    Memory bandwidth [MBytes/s]    | 1775.2060 |
|    Memory data volume [GBytes]    |    0.2423 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 20652466 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 37779820 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 40639488 |
|              PWR_PKG_ENERGY              |   PWR0  |   0.6910 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.2359 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |        0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       57 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     5120 |
|                DRAM_READS                | MBOX0C1 |  1158183 |
|                DRAM_WRITES               | MBOX0C2 |  2617445 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1345 |
|        Runtime unhalted [s]       |    0.0164 |
|            Clock [MHz]            | 2141.8232 |
|                CPI                |    1.8293 |
|             Energy [J]            |    0.6910 |
|             Power [W]             |    5.1387 |
|          Energy DRAM [J]          |    0.2359 |
|           Power DRAM [W]          |    1.7544 |
|            DP [MFLOP/s]           |    0.1527 |
|          AVX DP [MFLOP/s]         |    0.1523 |
|          Packed [MUOPS/s]         |    0.0381 |
|          Scalar [MUOPS/s]         |    0.0004 |
|  Memory load bandwidth [MBytes/s] |  551.2512 |
|  Memory load data volume [GBytes] |    0.0741 |
| Memory evict bandwidth [MBytes/s] | 1245.8045 |
| Memory evict data volume [GBytes] |    0.1675 |
|    Memory bandwidth [MBytes/s]    | 1797.0557 |
|    Memory data volume [GBytes]    |    0.2416 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 20652496 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 37584908 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 40740288 |
|              PWR_PKG_ENERGY              |   PWR0  |   0.6895 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.2373 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |        0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       56 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     5120 |
|                DRAM_READS                | MBOX0C1 |  1153615 |
|                DRAM_WRITES               | MBOX0C2 |  2623952 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1353 |
|        Runtime unhalted [s]       |    0.0163 |
|            Clock [MHz]            | 2125.5009 |
|                CPI                |    1.8199 |
|             Energy [J]            |    0.6895 |
|             Power [W]             |    5.0940 |
|          Energy DRAM [J]          |    0.2373 |
|           Power DRAM [W]          |    1.7533 |
|            DP [MFLOP/s]           |    0.1517 |
|          AVX DP [MFLOP/s]         |    0.1513 |
|          Packed [MUOPS/s]         |    0.0378 |
|          Scalar [MUOPS/s]         |    0.0004 |
|  Memory load bandwidth [MBytes/s] |  545.4954 |
|  Memory load data volume [GBytes] |    0.0738 |
| Memory evict bandwidth [MBytes/s] | 1240.7552 |
| Memory evict data volume [GBytes] |    0.1679 |
|    Memory bandwidth [MBytes/s]    | 1786.2506 |
|    Memory data volume [GBytes]    |    0.2418 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 20652458 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 37505608 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 40436256 |
|              PWR_PKG_ENERGY              |   PWR0  |   0.6935 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.2368 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |        0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       54 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     5120 |
|                DRAM_READS                | MBOX0C1 |  1139220 |
|                DRAM_WRITES               | MBOX0C2 |  2616111 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1348 |
|        Runtime unhalted [s]       |    0.0163 |
|            Clock [MHz]            | 2136.9577 |
|                CPI                |    1.8160 |
|             Energy [J]            |    0.6935 |
|             Power [W]             |    5.1452 |
|          Energy DRAM [J]          |    0.2368 |
|           Power DRAM [W]          |    1.7569 |
|            DP [MFLOP/s]           |    0.1523 |
|          AVX DP [MFLOP/s]         |    0.1519 |
|          Packed [MUOPS/s]         |    0.0380 |
|          Scalar [MUOPS/s]         |    0.0004 |
|  Memory load bandwidth [MBytes/s] |  540.8973 |
|  Memory load data volume [GBytes] |    0.0729 |
| Memory evict bandwidth [MBytes/s] | 1242.1194 |
| Memory evict data volume [GBytes] |    0.1674 |
|    Memory bandwidth [MBytes/s]    | 1783.0166 |
|    Memory data volume [GBytes]    |    0.2403 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 20652464 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 37931064 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 41017248 |
|              PWR_PKG_ENERGY              |   PWR0  |   0.6963 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.2382 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |        0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       57 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     5120 |
|                DRAM_READS                | MBOX0C1 |  1177112 |
|                DRAM_WRITES               | MBOX0C2 |  2622853 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1353 |
|        Runtime unhalted [s]       |    0.0165 |
|            Clock [MHz]            | 2130.5928 |
|                CPI                |    1.8366 |
|             Energy [J]            |    0.6963 |
|             Power [W]             |    5.1474 |
|          Energy DRAM [J]          |    0.2382 |
|           Power DRAM [W]          |    1.7606 |
|            DP [MFLOP/s]           |    0.1518 |
|          AVX DP [MFLOP/s]         |    0.1514 |
|          Packed [MUOPS/s]         |    0.0378 |
|          Scalar [MUOPS/s]         |    0.0004 |
|  Memory load bandwidth [MBytes/s] |  556.9188 |
|  Memory load data volume [GBytes] |    0.0753 |
| Memory evict bandwidth [MBytes/s] | 1240.9322 |
| Memory evict data volume [GBytes] |    0.1679 |
|    Memory bandwidth [MBytes/s]    | 1797.8510 |
|    Memory data volume [GBytes]    |    0.2432 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 42090841 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 77413344 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 81171936 |
|              PWR_PKG_ENERGY              |   PWR0  |   1.4203 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.4732 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |        0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       56 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |    10240 |
|                DRAM_READS                | MBOX0C1 |  2315169 |
|                DRAM_WRITES               | MBOX0C2 |  5375386 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.2677 |
|        Runtime unhalted [s]       |    0.0336 |
|            Clock [MHz]            | 2197.2341 |
|                CPI                |    1.8392 |
|             Energy [J]            |    1.4203 |
|             Power [W]             |    5.3054 |
|          Energy DRAM [J]          |    0.4732 |
|           Power DRAM [W]          |    1.7676 |
|            DP [MFLOP/s]           |    0.1532 |
|          AVX DP [MFLOP/s]         |    0.1530 |
|          Packed [MUOPS/s]         |    0.0383 |
|          Scalar [MUOPS/s]         |    0.0002 |
|  Memory load bandwidth [MBytes/s] |  553.4783 |
|  Memory load data volume [GBytes] |    0.1482 |
| Memory evict bandwidth [MBytes/s] | 1285.0723 |
| Memory evict data volume [GBytes] |    0.3440 |
|    Memory bandwidth [MBytes/s]    | 1838.5505 |
|    Memory data volume [GBytes]    |    0.4922 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 42090857 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 76621518 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 80222592 |
|              PWR_PKG_ENERGY              |   PWR0  |   1.4071 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.4686 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |        0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       55 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |    10240 |
|                DRAM_READS                | MBOX0C1 |  2150142 |
|                DRAM_WRITES               | MBOX0C2 |  5366185 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.2670 |
|        Runtime unhalted [s]       |    0.0333 |
|            Clock [MHz]            | 2200.5253 |
|                CPI                |    1.8204 |
|             Energy [J]            |    1.4071 |
|             Power [W]             |    5.2693 |
|          Energy DRAM [J]          |    0.4686 |
|           Power DRAM [W]          |    1.7549 |
|            DP [MFLOP/s]           |    0.1536 |
|          AVX DP [MFLOP/s]         |    0.1534 |
|          Packed [MUOPS/s]         |    0.0383 |
|          Scalar [MUOPS/s]         |    0.0002 |
|  Memory load bandwidth [MBytes/s] |  515.3202 |
|  Memory load data volume [GBytes] |    0.1376 |
| Memory evict bandwidth [MBytes/s] | 1286.1027 |
| Memory evict data volume [GBytes] |    0.3434 |
|    Memory bandwidth [MBytes/s]    | 1801.4229 |
|    Memory data volume [GBytes]    |    0.4810 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 42090880 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 77399314 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 80738496 |
|              PWR_PKG_ENERGY              |   PWR0  |   1.4135 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.4721 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |        0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       57 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |    10240 |
|                DRAM_READS                | MBOX0C1 |  2325940 |
|                DRAM_WRITES               | MBOX0C2 |  5371177 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.2669 |
|        Runtime unhalted [s]       |    0.0336 |
|            Clock [MHz]            | 2208.6604 |
|                CPI                |    1.8389 |
|             Energy [J]            |    1.4135 |
|             Power [W]             |    5.2962 |
|          Energy DRAM [J]          |    0.4721 |
|           Power DRAM [W]          |    1.7690 |
|            DP [MFLOP/s]           |    0.1537 |
|          AVX DP [MFLOP/s]         |    0.1535 |
|          Packed [MUOPS/s]         |    0.0384 |
|          Scalar [MUOPS/s]         |    0.0002 |
|  Memory load bandwidth [MBytes/s] |  557.7787 |
|  Memory load data volume [GBytes] |    0.1489 |
| Memory evict bandwidth [MBytes/s] | 1288.0504 |
| Memory evict data volume [GBytes] |    0.3438 |
|    Memory bandwidth [MBytes/s]    | 1845.8291 |
|    Memory data volume [GBytes]    |    0.4926 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 42090796 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 77082568 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 80633088 |
|              PWR_PKG_ENERGY              |   PWR0  |   1.4114 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.4707 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |        0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       55 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |    10240 |
|                DRAM_READS                | MBOX0C1 |  2292766 |
|                DRAM_WRITES               | MBOX0C2 |  5365918 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.2671 |
|        Runtime unhalted [s]       |    0.0335 |
|            Clock [MHz]            | 2202.4958 |
|                CPI                |    1.8313 |
|             Energy [J]            |    1.4114 |
|             Power [W]             |    5.2843 |
|          Energy DRAM [J]          |    0.4707 |
|           Power DRAM [W]          |    1.7623 |
|            DP [MFLOP/s]           |    0.1536 |
|          AVX DP [MFLOP/s]         |    0.1534 |
|          Packed [MUOPS/s]         |    0.0383 |
|          Scalar [MUOPS/s]         |    0.0002 |
|  Memory load bandwidth [MBytes/s] |  549.3713 |
|  Memory load data volume [GBytes] |    0.1467 |
| Memory evict bandwidth [MBytes/s] | 1285.7316 |
| Memory evict data volume [GBytes] |    0.3434 |
|    Memory bandwidth [MBytes/s]    | 1835.1029 |
|    Memory data volume [GBytes]    |    0.4902 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 42090835 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 76495407 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 79624704 |
|              PWR_PKG_ENERGY              |   PWR0  |   1.4106 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.4683 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |        0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       54 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |    10240 |
|                DRAM_READS                | MBOX0C1 |  2225077 |
|                DRAM_WRITES               | MBOX0C2 |  5366609 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.2659 |
|        Runtime unhalted [s]       |    0.0332 |
|            Clock [MHz]            | 2213.3994 |
|                CPI                |    1.8174 |
|             Energy [J]            |    1.4106 |
|             Power [W]             |    5.3050 |
|          Energy DRAM [J]          |    0.4683 |
|           Power DRAM [W]          |    1.7610 |
|            DP [MFLOP/s]           |    0.1542 |
|          AVX DP [MFLOP/s]         |    0.1540 |
|          Packed [MUOPS/s]         |    0.0385 |
|          Scalar [MUOPS/s]         |    0.0002 |
|  Memory load bandwidth [MBytes/s] |  535.5449 |
|  Memory load data volume [GBytes] |    0.1424 |
| Memory evict bandwidth [MBytes/s] | 1291.6678 |
| Memory evict data volume [GBytes] |    0.3435 |
|    Memory bandwidth [MBytes/s]    | 1827.2127 |
|    Memory data volume [GBytes]    |    0.4859 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  |  84967653 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 153947681 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 157568064 |
|              PWR_PKG_ENERGY              |   PWR0  |    2.8378 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.9277 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        56 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     20480 |
|                DRAM_READS                | MBOX0C1 |   4223619 |
|                DRAM_WRITES               | MBOX0C2 |  10883811 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.5286 |
|        Runtime unhalted [s]       |    0.0668 |
|            Clock [MHz]            | 2250.9760 |
|                CPI                |    1.8118 |
|             Energy [J]            |    2.8378 |
|             Power [W]             |    5.3691 |
|          Energy DRAM [J]          |    0.9277 |
|           Power DRAM [W]          |    1.7551 |
|            DP [MFLOP/s]           |    0.1551 |
|          AVX DP [MFLOP/s]         |    0.1550 |
|          Packed [MUOPS/s]         |    0.0387 |
|          Scalar [MUOPS/s]         |    0.0001 |
|  Memory load bandwidth [MBytes/s] |  511.4190 |
|  Memory load data volume [GBytes] |    0.2703 |
| Memory evict bandwidth [MBytes/s] | 1317.8716 |
| Memory evict data volume [GBytes] |    0.6966 |
|    Memory bandwidth [MBytes/s]    | 1829.2906 |
|    Memory data volume [GBytes]    |    0.9669 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  |  84967426 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 157262357 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 160954368 |
|              PWR_PKG_ENERGY              |   PWR0  |    2.8466 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.9344 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        55 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     20480 |
|                DRAM_READS                | MBOX0C1 |   4557326 |
|                DRAM_WRITES               | MBOX0C2 |  10881102 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.5298 |
|        Runtime unhalted [s]       |    0.0683 |
|            Clock [MHz]            | 2251.0971 |
|                CPI                |    1.8509 |
|             Energy [J]            |    2.8466 |
|             Power [W]             |    5.3731 |
|          Energy DRAM [J]          |    0.9344 |
|           Power DRAM [W]          |    1.7637 |
|            DP [MFLOP/s]           |    0.1547 |
|          AVX DP [MFLOP/s]         |    0.1546 |
|          Packed [MUOPS/s]         |    0.0387 |
|          Scalar [MUOPS/s]         |    0.0001 |
|  Memory load bandwidth [MBytes/s] |  550.5357 |
|  Memory load data volume [GBytes] |    0.2917 |
| Memory evict bandwidth [MBytes/s] | 1314.4628 |
| Memory evict data volume [GBytes] |    0.6964 |
|    Memory bandwidth [MBytes/s]    | 1864.9986 |
|    Memory data volume [GBytes]    |    0.9881 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  |  84967419 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 154787296 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 158552448 |
|              PWR_PKG_ENERGY              |   PWR0  |    2.8228 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.9270 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        56 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     20480 |
|                DRAM_READS                | MBOX0C1 |   4258714 |
|                DRAM_WRITES               | MBOX0C2 |  10876986 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.5280 |
|        Runtime unhalted [s]       |    0.0672 |
|            Clock [MHz]            | 2249.1675 |
|                CPI                |    1.8217 |
|             Energy [J]            |    2.8228 |
|             Power [W]             |    5.3466 |
|          Energy DRAM [J]          |    0.9270 |
|           Power DRAM [W]          |    1.7558 |
|            DP [MFLOP/s]           |    0.1553 |
|          AVX DP [MFLOP/s]         |    0.1552 |
|          Packed [MUOPS/s]         |    0.0388 |
|          Scalar [MUOPS/s]         |    0.0001 |
|  Memory load bandwidth [MBytes/s] |  516.2397 |
|  Memory load data volume [GBytes] |    0.2726 |
| Memory evict bandwidth [MBytes/s] | 1318.5042 |
| Memory evict data volume [GBytes] |    0.6961 |
|    Memory bandwidth [MBytes/s]    | 1834.7439 |
|    Memory data volume [GBytes]    |    0.9687 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  |  84967449 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 153578707 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 157327680 |
|              PWR_PKG_ENERGY              |   PWR0  |    2.8188 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.9266 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        56 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     20480 |
|                DRAM_READS                | MBOX0C1 |   4207866 |
|                DRAM_WRITES               | MBOX0C2 |  10895386 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.5272 |
|        Runtime unhalted [s]       |    0.0667 |
|            Clock [MHz]            | 2249.0499 |
|                CPI                |    1.8075 |
|             Energy [J]            |    2.8188 |
|             Power [W]             |    5.3465 |
|          Energy DRAM [J]          |    0.9266 |
|           Power DRAM [W]          |    1.7574 |
|            DP [MFLOP/s]           |    0.1555 |
|          AVX DP [MFLOP/s]         |    0.1554 |
|          Packed [MUOPS/s]         |    0.0388 |
|          Scalar [MUOPS/s]         |    0.0001 |
|  Memory load bandwidth [MBytes/s] |  510.7825 |
|  Memory load data volume [GBytes] |    0.2693 |
| Memory evict bandwidth [MBytes/s] | 1322.5641 |
| Memory evict data volume [GBytes] |    0.6973 |
|    Memory bandwidth [MBytes/s]    | 1833.3466 |
|    Memory data volume [GBytes]    |    0.9666 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  |  84967437 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 155339329 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 159464256 |
|              PWR_PKG_ENERGY              |   PWR0  |    2.8288 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.9296 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        56 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     20480 |
|                DRAM_READS                | MBOX0C1 |   4326370 |
|                DRAM_WRITES               | MBOX0C2 |  10872947 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.5289 |
|        Runtime unhalted [s]       |    0.0674 |
|            Clock [MHz]            | 2244.3291 |
|                CPI                |    1.8282 |
|             Energy [J]            |    2.8288 |
|             Power [W]             |    5.3489 |
|          Energy DRAM [J]          |    0.9296 |
|           Power DRAM [W]          |    1.7578 |
|            DP [MFLOP/s]           |    0.1550 |
|          AVX DP [MFLOP/s]         |    0.1549 |
|          Packed [MUOPS/s]         |    0.0387 |
|          Scalar [MUOPS/s]         |    0.0001 |
|  Memory load bandwidth [MBytes/s] |  523.5625 |
|  Memory load data volume [GBytes] |    0.2769 |
| Memory evict bandwidth [MBytes/s] | 1315.8068 |
| Memory evict data volume [GBytes] |    0.6959 |
|    Memory bandwidth [MBytes/s]    | 1839.3692 |
|    Memory data volume [GBytes]    |    0.9728 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 170721925 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 312440819 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 317660256 |
|              PWR_PKG_ENERGY              |   PWR0  |    5.6673 |
|              PWR_DRAM_ENERGY             |   PWR3  |    1.8533 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        55 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     40960 |
|                DRAM_READS                | MBOX0C1 |   8457573 |
|                DRAM_WRITES               | MBOX0C2 |  21885623 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.0530 |
|        Runtime unhalted [s]       |    0.1356 |
|            Clock [MHz]            | 2266.0823 |
|                CPI                |    1.8301 |
|             Energy [J]            |    5.6673 |
|             Power [W]             |    5.3820 |
|          Energy DRAM [J]          |    1.8533 |
|           Power DRAM [W]          |    1.7600 |
|            DP [MFLOP/s]           |    0.1556 |
|          AVX DP [MFLOP/s]         |    0.1556 |
|          Packed [MUOPS/s]         |    0.0389 |
|          Scalar [MUOPS/s]         |    0.0001 |
|  Memory load bandwidth [MBytes/s] |  514.0384 |
|  Memory load data volume [GBytes] |    0.5413 |
| Memory evict bandwidth [MBytes/s] | 1330.1747 |
| Memory evict data volume [GBytes] |    1.4007 |
|    Memory bandwidth [MBytes/s]    | 1844.2131 |
|    Memory data volume [GBytes]    |    1.9420 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 170721926 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 313563080 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 318255360 |
|              PWR_PKG_ENERGY              |   PWR0  |    5.6849 |
|              PWR_DRAM_ENERGY             |   PWR3  |    1.8586 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        56 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     40960 |
|                DRAM_READS                | MBOX0C1 |   8743549 |
|                DRAM_WRITES               | MBOX0C2 |  21884160 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.0537 |
|        Runtime unhalted [s]       |    0.1361 |
|            Clock [MHz]            | 2269.9272 |
|                CPI                |    1.8367 |
|             Energy [J]            |    5.6849 |
|             Power [W]             |    5.3953 |
|          Energy DRAM [J]          |    1.8586 |
|           Power DRAM [W]          |    1.7639 |
|            DP [MFLOP/s]           |    0.1555 |
|          AVX DP [MFLOP/s]         |    0.1555 |
|          Packed [MUOPS/s]         |    0.0389 |
|          Scalar [MUOPS/s]         |    0.0001 |
|  Memory load bandwidth [MBytes/s] |  531.0745 |
|  Memory load data volume [GBytes] |    0.5596 |
| Memory evict bandwidth [MBytes/s] | 1329.2223 |
| Memory evict data volume [GBytes] |    1.4006 |
|    Memory bandwidth [MBytes/s]    | 1860.2968 |
|    Memory data volume [GBytes]    |    1.9602 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 170721921 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 309452690 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 313815840 |
|              PWR_PKG_ENERGY              |   PWR0  |    5.8126 |
|              PWR_DRAM_ENERGY             |   PWR3  |    1.8688 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        56 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     40960 |
|                DRAM_READS                | MBOX0C1 |   8944786 |
|                DRAM_WRITES               | MBOX0C2 |  21966472 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.0474 |
|        Runtime unhalted [s]       |    0.1343 |
|            Clock [MHz]            | 2271.9155 |
|                CPI                |    1.8126 |
|             Energy [J]            |    5.8126 |
|             Power [W]             |    5.5497 |
|          Energy DRAM [J]          |    1.8688 |
|           Power DRAM [W]          |    1.7843 |
|            DP [MFLOP/s]           |    0.1565 |
|          AVX DP [MFLOP/s]         |    0.1564 |
|          Packed [MUOPS/s]         |    0.0391 |
|          Scalar [MUOPS/s]         |    0.0001 |
|  Memory load bandwidth [MBytes/s] |  546.5773 |
|  Memory load data volume [GBytes] |    0.5725 |
| Memory evict bandwidth [MBytes/s] | 1342.2764 |
| Memory evict data volume [GBytes] |    1.4059 |
|    Memory bandwidth [MBytes/s]    | 1888.8536 |
|    Memory data volume [GBytes]    |    1.9783 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 170721898 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 315808774 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 319056000 |
|              PWR_PKG_ENERGY              |   PWR0  |    5.8288 |
|              PWR_DRAM_ENERGY             |   PWR3  |    1.8808 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        54 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     40960 |
|                DRAM_READS                | MBOX0C1 |   9584951 |
|                DRAM_WRITES               | MBOX0C2 |  21977330 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.0486 |
|        Runtime unhalted [s]       |    0.1371 |
|            Clock [MHz]            | 2280.5023 |
|                CPI                |    1.8498 |
|             Energy [J]            |    5.8288 |
|             Power [W]             |    5.5587 |
|          Energy DRAM [J]          |    1.8808 |
|           Power DRAM [W]          |    1.7936 |
|            DP [MFLOP/s]           |    0.1563 |
|          AVX DP [MFLOP/s]         |    0.1562 |
|          Packed [MUOPS/s]         |    0.0391 |
|          Scalar [MUOPS/s]         |    0.0001 |
|  Memory load bandwidth [MBytes/s] |  585.0071 |
|  Memory load data volume [GBytes] |    0.6134 |
| Memory evict bandwidth [MBytes/s] | 1341.3625 |
| Memory evict data volume [GBytes] |    1.4065 |
|    Memory bandwidth [MBytes/s]    | 1926.3696 |
|    Memory data volume [GBytes]    |    2.0200 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 170721882 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 313641593 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 317633856 |
|              PWR_PKG_ENERGY              |   PWR0  |    5.7515 |
|              PWR_DRAM_ENERGY             |   PWR3  |    1.8738 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        55 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     40960 |
|                DRAM_READS                | MBOX0C1 |   9432802 |
|                DRAM_WRITES               | MBOX0C2 |  21949434 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.0534 |
|        Runtime unhalted [s]       |    0.1361 |
|            Clock [MHz]            | 2274.9891 |
|                CPI                |    1.8371 |
|             Energy [J]            |    5.7515 |
|             Power [W]             |    5.4601 |
|          Energy DRAM [J]          |    1.8738 |
|           Power DRAM [W]          |    1.7789 |
|            DP [MFLOP/s]           |    0.1556 |
|          AVX DP [MFLOP/s]         |    0.1555 |
|          Packed [MUOPS/s]         |    0.0389 |
|          Scalar [MUOPS/s]         |    0.0001 |
|  Memory load bandwidth [MBytes/s] |  573.1192 |
|  Memory load data volume [GBytes] |    0.6037 |
| Memory evict bandwidth [MBytes/s] | 1333.6061 |
| Memory evict data volume [GBytes] |    1.4048 |
|    Memory bandwidth [MBytes/s]    | 1906.7253 |
|    Memory data volume [GBytes]    |    2.0085 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 342230960 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 622514484 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 628539264 |
|              PWR_PKG_ENERGY              |   PWR0  |   11.4338 |
|              PWR_DRAM_ENERGY             |   PWR3  |    3.7015 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        54 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     81920 |
|                DRAM_READS                | MBOX0C1 |  17185538 |
|                DRAM_WRITES               | MBOX0C2 |  43969123 |
+------------------------------------------+---------+-----------+

+-----------------------------------+--------------+
|               Metric              |    Core 0    |
+-----------------------------------+--------------+
|        Runtime (RDTSC) [s]        |       2.0970 |
|        Runtime unhalted [s]       |       0.2702 |
|            Clock [MHz]            |    2281.8564 |
|                CPI                |       1.8190 |
|             Energy [J]            |      11.4338 |
|             Power [W]             |       5.4524 |
|          Energy DRAM [J]          |       3.7015 |
|           Power DRAM [W]          |       1.7651 |
|            DP [MFLOP/s]           |       0.1563 |
|          AVX DP [MFLOP/s]         |       0.1563 |
|          Packed [MUOPS/s]         |       0.0391 |
|          Scalar [MUOPS/s]         | 2.575084e-05 |
|  Memory load bandwidth [MBytes/s] |     524.4943 |
|  Memory load data volume [GBytes] |       1.0999 |
| Memory evict bandwidth [MBytes/s] |    1341.9165 |
| Memory evict data volume [GBytes] |       2.8140 |
|    Memory bandwidth [MBytes/s]    |    1866.4108 |
|    Memory data volume [GBytes]    |       3.9139 |
|       Operational intensity       |       0.0001 |
+-----------------------------------+--------------+

Iteration without GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 342231260 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 627828810 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 633800832 |
|              PWR_PKG_ENERGY              |   PWR0  |   11.4222 |
|              PWR_DRAM_ENERGY             |   PWR3  |    3.7130 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        57 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     81920 |
|                DRAM_READS                | MBOX0C1 |  17687621 |
|                DRAM_WRITES               | MBOX0C2 |  43933617 |
+------------------------------------------+---------+-----------+

+-----------------------------------+--------------+
|               Metric              |    Core 0    |
+-----------------------------------+--------------+
|        Runtime (RDTSC) [s]        |       2.1034 |
|        Runtime unhalted [s]       |       0.2725 |
|            Clock [MHz]            |    2282.2384 |
|                CPI                |       1.8345 |
|             Energy [J]            |      11.4222 |
|             Power [W]             |       5.4304 |
|          Energy DRAM [J]          |       3.7130 |
|           Power DRAM [W]          |       1.7653 |
|            DP [MFLOP/s]           |       0.1558 |
|          AVX DP [MFLOP/s]         |       0.1558 |
|          Packed [MUOPS/s]         |       0.0389 |
|          Scalar [MUOPS/s]         | 2.709924e-05 |
|  Memory load bandwidth [MBytes/s] |     538.1850 |
|  Memory load data volume [GBytes] |       1.1320 |
| Memory evict bandwidth [MBytes/s] |    1336.7775 |
| Memory evict data volume [GBytes] |       2.8118 |
|    Memory bandwidth [MBytes/s]    |    1874.9626 |
|    Memory data volume [GBytes]    |       3.9438 |
|       Operational intensity       |       0.0001 |
+-----------------------------------+--------------+

Iteration without GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 342231272 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 619947145 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 625923360 |
|              PWR_PKG_ENERGY              |   PWR0  |   11.3712 |
|              PWR_DRAM_ENERGY             |   PWR3  |    3.6881 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        54 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     81920 |
|                DRAM_READS                | MBOX0C1 |  16574415 |
|                DRAM_WRITES               | MBOX0C2 |  43947066 |
+------------------------------------------+---------+-----------+

+-----------------------------------+--------------+
|               Metric              |    Core 0    |
+-----------------------------------+--------------+
|        Runtime (RDTSC) [s]        |       2.0956 |
|        Runtime unhalted [s]       |       0.2691 |
|            Clock [MHz]            |    2281.9490 |
|                CPI                |       1.8115 |
|             Energy [J]            |      11.3712 |
|             Power [W]             |       5.4261 |
|          Energy DRAM [J]          |       3.6881 |
|           Power DRAM [W]          |       1.7599 |
|            DP [MFLOP/s]           |       0.1564 |
|          AVX DP [MFLOP/s]         |       0.1564 |
|          Packed [MUOPS/s]         |       0.0391 |
|          Scalar [MUOPS/s]         | 2.576778e-05 |
|  Memory load bandwidth [MBytes/s] |     506.1758 |
|  Memory load data volume [GBytes] |       1.0608 |
| Memory evict bandwidth [MBytes/s] |    1342.1254 |
| Memory evict data volume [GBytes] |       2.8126 |
|    Memory bandwidth [MBytes/s]    |    1848.3012 |
|    Memory data volume [GBytes]    |       3.8734 |
|       Operational intensity       |       0.0001 |
+-----------------------------------+--------------+

Iteration without GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 342231338 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 626908733 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 632593152 |
|              PWR_PKG_ENERGY              |   PWR0  |   11.4424 |
|              PWR_DRAM_ENERGY             |   PWR3  |    3.7205 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        56 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     81920 |
|                DRAM_READS                | MBOX0C1 |  17629952 |
|                DRAM_WRITES               | MBOX0C2 |  43992199 |
+------------------------------------------+---------+-----------+

+-----------------------------------+--------------+
|               Metric              |    Core 0    |
+-----------------------------------+--------------+
|        Runtime (RDTSC) [s]        |       2.1033 |
|        Runtime unhalted [s]       |       0.2721 |
|            Clock [MHz]            |    2283.1819 |
|                CPI                |       1.8318 |
|             Energy [J]            |      11.4424 |
|             Power [W]             |       5.4402 |
|          Energy DRAM [J]          |       3.7205 |
|           Power DRAM [W]          |       1.7689 |
|            DP [MFLOP/s]           |       0.1558 |
|          AVX DP [MFLOP/s]         |       0.1558 |
|          Packed [MUOPS/s]         |       0.0389 |
|          Scalar [MUOPS/s]         | 2.662475e-05 |
|  Memory load bandwidth [MBytes/s] |     536.4491 |
|  Memory load data volume [GBytes] |       1.1283 |
| Memory evict bandwidth [MBytes/s] |    1338.6070 |
| Memory evict data volume [GBytes] |       2.8155 |
|    Memory bandwidth [MBytes/s]    |    1875.0561 |
|    Memory data volume [GBytes]    |       3.9438 |
|       Operational intensity       |       0.0001 |
+-----------------------------------+--------------+

Iteration without GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 342231035 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 621823651 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 629301216 |
|              PWR_PKG_ENERGY              |   PWR0  |   11.4047 |
|              PWR_DRAM_ENERGY             |   PWR3  |    3.7022 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |         0 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        55 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |     81920 |
|                DRAM_READS                | MBOX0C1 |  16801964 |
|                DRAM_WRITES               | MBOX0C2 |  43953175 |
+------------------------------------------+---------+-----------+

+-----------------------------------+--------------+
|               Metric              |    Core 0    |
+-----------------------------------+--------------+
|        Runtime (RDTSC) [s]        |       2.1029 |
|        Runtime unhalted [s]       |       0.2699 |
|            Clock [MHz]            |    2276.5719 |
|                CPI                |       1.8170 |
|             Energy [J]            |      11.4047 |
|             Power [W]             |       5.4232 |
|          Energy DRAM [J]          |       3.7022 |
|           Power DRAM [W]          |       1.7605 |
|            DP [MFLOP/s]           |       0.1558 |
|          AVX DP [MFLOP/s]         |       0.1558 |
|          Packed [MUOPS/s]         |       0.0390 |
|          Scalar [MUOPS/s]         | 2.615376e-05 |
|  Memory load bandwidth [MBytes/s] |     511.3421 |
|  Memory load data volume [GBytes] |       1.0753 |
| Memory evict bandwidth [MBytes/s] |    1337.6476 |
| Memory evict data volume [GBytes] |       2.8130 |
|    Memory bandwidth [MBytes/s]    |    1848.9897 |
|    Memory data volume [GBytes]    |       3.8883 |
|       Operational intensity       |       0.0001 |
+-----------------------------------+--------------+

