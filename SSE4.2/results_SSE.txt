Iteration with GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 2535301200456458802993406410752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 293701817 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 246406701 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 286821312 |
|              PWR_PKG_ENERGY              |   PWR0  |    0.9706 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.4736 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      5120 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  18880566 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |  11686149 |
|                DRAM_WRITES               | MBOX0C2 |   1401293 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1904 |
|        Runtime unhalted [s]       |    0.1069 |
|            Clock [MHz]            | 1979.3117 |
|                CPI                |    0.8390 |
|             Energy [J]            |    0.9706 |
|             Power [W]             |    5.0972 |
|          Energy DRAM [J]          |    0.4736 |
|           Power DRAM [W]          |    2.4872 |
|            DP [MFLOP/s]           |   99.2020 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0269 |
|          Scalar [MUOPS/s]         |   99.1482 |
|  Memory load bandwidth [MBytes/s] | 3927.5452 |
|  Memory load data volume [GBytes] |    0.7479 |
| Memory evict bandwidth [MBytes/s] |  470.9543 |
| Memory evict data volume [GBytes] |    0.0897 |
|    Memory bandwidth [MBytes/s]    | 4398.4995 |
|    Memory data volume [GBytes]    |    0.8376 |
|       Operational intensity       |    0.0226 |
+-----------------------------------+-----------+

Iteration with GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 2535301200456458802993406410752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 293701850 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 246301010 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 291223104 |
|              PWR_PKG_ENERGY              |   PWR0  |    0.9036 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.4626 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      5120 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  18880567 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |  11470282 |
|                DRAM_WRITES               | MBOX0C2 |   1275697 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1866 |
|        Runtime unhalted [s]       |    0.1069 |
|            Clock [MHz]            | 1948.4481 |
|                CPI                |    0.8386 |
|             Energy [J]            |    0.9036 |
|             Power [W]             |    4.8437 |
|          Energy DRAM [J]          |    0.4626 |
|           Power DRAM [W]          |    2.4799 |
|            DP [MFLOP/s]           |  101.2602 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0274 |
|          Scalar [MUOPS/s]         |  101.2054 |
|  Memory load bandwidth [MBytes/s] | 3934.9801 |
|  Memory load data volume [GBytes] |    0.7341 |
| Memory evict bandwidth [MBytes/s] |  437.6390 |
| Memory evict data volume [GBytes] |    0.0816 |
|    Memory bandwidth [MBytes/s]    | 4372.6191 |
|    Memory data volume [GBytes]    |    0.8157 |
|       Operational intensity       |    0.0232 |
+-----------------------------------+-----------+

Iteration with GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 2535301200456458802993406410752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 293701846 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 247539597 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 298399872 |
|              PWR_PKG_ENERGY              |   PWR0  |    0.9183 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.4746 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      5120 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  18880565 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |  11846456 |
|                DRAM_WRITES               | MBOX0C2 |   1286874 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1928 |
|        Runtime unhalted [s]       |    0.1075 |
|            Clock [MHz]            | 1910.6850 |
|                CPI                |    0.8428 |
|             Energy [J]            |    0.9183 |
|             Power [W]             |    4.7620 |
|          Energy DRAM [J]          |    0.4746 |
|           Power DRAM [W]          |    2.4612 |
|            DP [MFLOP/s]           |   97.9639 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0266 |
|          Scalar [MUOPS/s]         |   97.9108 |
|  Memory load bandwidth [MBytes/s] | 3931.7316 |
|  Memory load data volume [GBytes] |    0.7582 |
| Memory evict bandwidth [MBytes/s] |  427.1018 |
| Memory evict data volume [GBytes] |    0.0824 |
|    Memory bandwidth [MBytes/s]    | 4358.8335 |
|    Memory data volume [GBytes]    |    0.8405 |
|       Operational intensity       |    0.0225 |
+-----------------------------------+-----------+

Iteration with GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 2535301200456458802993406410752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 293701794 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 248397016 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 291949056 |
|              PWR_PKG_ENERGY              |   PWR0  |    0.9295 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.4714 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      5120 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  18880565 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |  11865759 |
|                DRAM_WRITES               | MBOX0C2 |   1298137 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1901 |
|        Runtime unhalted [s]       |    0.1078 |
|            Clock [MHz]            | 1960.2402 |
|                CPI                |    0.8457 |
|             Energy [J]            |    0.9295 |
|             Power [W]             |    4.8907 |
|          Energy DRAM [J]          |    0.4714 |
|           Power DRAM [W]          |    2.4805 |
|            DP [MFLOP/s]           |   99.3958 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0269 |
|          Scalar [MUOPS/s]         |   99.3419 |
|  Memory load bandwidth [MBytes/s] | 3995.7010 |
|  Memory load data volume [GBytes] |    0.7594 |
| Memory evict bandwidth [MBytes/s] |  437.1374 |
| Memory evict data volume [GBytes] |    0.0831 |
|    Memory bandwidth [MBytes/s]    | 4432.8384 |
|    Memory data volume [GBytes]    |    0.8425 |
|       Operational intensity       |    0.0224 |
+-----------------------------------+-----------+

Iteration with GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 2535301200456458802993406410752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 293701824 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 248639772 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 292493856 |
|              PWR_PKG_ENERGY              |   PWR0  |    0.9071 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.4617 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      5120 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  18880566 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |  11624841 |
|                DRAM_WRITES               | MBOX0C2 |   1269530 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1854 |
|        Runtime unhalted [s]       |    0.1079 |
|            Clock [MHz]            | 1958.4790 |
|                CPI                |    0.8466 |
|             Energy [J]            |    0.9071 |
|             Power [W]             |    4.8919 |
|          Energy DRAM [J]          |    0.4617 |
|           Power DRAM [W]          |    2.4900 |
|            DP [MFLOP/s]           |  101.8752 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0276 |
|          Scalar [MUOPS/s]         |  101.8200 |
|  Memory load bandwidth [MBytes/s] | 4012.2234 |
|  Memory load data volume [GBytes] |    0.7440 |
| Memory evict bandwidth [MBytes/s] |  438.1684 |
| Memory evict data volume [GBytes] |    0.0812 |
|    Memory bandwidth [MBytes/s]    | 4450.3918 |
|    Memory data volume [GBytes]    |    0.8252 |
|       Operational intensity       |    0.0229 |
+-----------------------------------+-----------+

Iteration with GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 3213876088517980551083924184682325205044405987565585670602752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 619557704 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 496068722 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 617107392 |
|              PWR_PKG_ENERGY              |   PWR0  |    1.8939 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.9822 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     10240 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  39852087 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |  24278785 |
|                DRAM_WRITES               | MBOX0C2 |   2697786 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.3928 |
|        Runtime unhalted [s]       |    0.2153 |
|            Clock [MHz]            | 1852.0521 |
|                CPI                |    0.8007 |
|             Energy [J]            |    1.8939 |
|             Power [W]             |    4.8209 |
|          Energy DRAM [J]          |    0.9822 |
|           Power DRAM [W]          |    2.5003 |
|            DP [MFLOP/s]           |  101.4981 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0261 |
|          Scalar [MUOPS/s]         |  101.4459 |
|  Memory load bandwidth [MBytes/s] | 3955.4012 |
|  Memory load data volume [GBytes] |    1.5538 |
| Memory evict bandwidth [MBytes/s] |  439.5124 |
| Memory evict data volume [GBytes] |    0.1727 |
|    Memory bandwidth [MBytes/s]    | 4394.9135 |
|    Memory data volume [GBytes]    |    1.7265 |
|       Operational intensity       |    0.0231 |
+-----------------------------------+-----------+

Iteration with GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 3213876088517980551083924184682325205044405987565585670602752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 619557682 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 494234753 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 619731456 |
|              PWR_PKG_ENERGY              |   PWR0  |    1.8601 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.9770 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     10240 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  39852087 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |  24095657 |
|                DRAM_WRITES               | MBOX0C2 |   2689982 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.3910 |
|        Runtime unhalted [s]       |    0.2145 |
|            Clock [MHz]            | 1837.3948 |
|                CPI                |    0.7977 |
|             Energy [J]            |    1.8601 |
|             Power [W]             |    4.7576 |
|          Energy DRAM [J]          |    0.9770 |
|           Power DRAM [W]          |    2.4989 |
|            DP [MFLOP/s]           |  101.9828 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0262 |
|          Scalar [MUOPS/s]         |  101.9304 |
|  Memory load bandwidth [MBytes/s] | 3944.3143 |
|  Memory load data volume [GBytes] |    1.5421 |
| Memory evict bandwidth [MBytes/s] |  440.3339 |
| Memory evict data volume [GBytes] |    0.1722 |
|    Memory bandwidth [MBytes/s]    | 4384.6482 |
|    Memory data volume [GBytes]    |    1.7143 |
|       Operational intensity       |    0.0233 |
+-----------------------------------+-----------+

Iteration with GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 3213876088517980551083924184682325205044405987565585670602752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 619557730 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 512057605 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 640102848 |
|              PWR_PKG_ENERGY              |   PWR0  |    1.9103 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.9962 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     10240 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  39852087 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |  24717092 |
|                DRAM_WRITES               | MBOX0C2 |   2688607 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.3996 |
|        Runtime unhalted [s]       |    0.2223 |
|            Clock [MHz]            | 1842.6245 |
|                CPI                |    0.8265 |
|             Energy [J]            |    1.9103 |
|             Power [W]             |    4.7811 |
|          Energy DRAM [J]          |    0.9962 |
|           Power DRAM [W]          |    2.4933 |
|            DP [MFLOP/s]           |   99.7902 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0256 |
|          Scalar [MUOPS/s]         |   99.7389 |
|  Memory load bandwidth [MBytes/s] | 3959.0488 |
|  Memory load data volume [GBytes] |    1.5819 |
| Memory evict bandwidth [MBytes/s] |  430.6464 |
| Memory evict data volume [GBytes] |    0.1721 |
|    Memory bandwidth [MBytes/s]    | 4389.6952 |
|    Memory data volume [GBytes]    |    1.7540 |
|       Operational intensity       |    0.0227 |
+-----------------------------------+-----------+

Iteration with GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 3213876088517980551083924184682325205044405987565585670602752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 619557692 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 492333621 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 619580736 |
|              PWR_PKG_ENERGY              |   PWR0  |    1.8525 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.9733 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     10240 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  39852087 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |  23935661 |
|                DRAM_WRITES               | MBOX0C2 |   2675488 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.3890 |
|        Runtime unhalted [s]       |    0.2137 |
|            Clock [MHz]            | 1830.7695 |
|                CPI                |    0.7947 |
|             Energy [J]            |    1.8525 |
|             Power [W]             |    4.7622 |
|          Energy DRAM [J]          |    0.9733 |
|           Power DRAM [W]          |    2.5021 |
|            DP [MFLOP/s]           |  102.4978 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0263 |
|          Scalar [MUOPS/s]         |  102.4451 |
|  Memory load bandwidth [MBytes/s] | 3937.9090 |
|  Memory load data volume [GBytes] |    1.5319 |
| Memory evict bandwidth [MBytes/s] |  440.1729 |
| Memory evict data volume [GBytes] |    0.1712 |
|    Memory bandwidth [MBytes/s]    | 4378.0819 |
|    Memory data volume [GBytes]    |    1.7031 |
|       Operational intensity       |    0.0234 |
+-----------------------------------+-----------+

Iteration with GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 3213876088517980551083924184682325205044405987565585670602752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 619558438 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 496421905 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 632635392 |
|              PWR_PKG_ENERGY              |   PWR0  |    1.8656 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.9898 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     10240 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  39852086 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |  24409935 |
|                DRAM_WRITES               | MBOX0C2 |   2679719 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.3963 |
|        Runtime unhalted [s]       |    0.2155 |
|            Clock [MHz]            | 1807.8826 |
|                CPI                |    0.8013 |
|             Energy [J]            |    1.8656 |
|             Power [W]             |    4.7080 |
|          Energy DRAM [J]          |    0.9898 |
|           Power DRAM [W]          |    2.4979 |
|            DP [MFLOP/s]           |  100.6219 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0258 |
|          Scalar [MUOPS/s]         |  100.5702 |
|  Memory load bandwidth [MBytes/s] | 3942.4368 |
|  Memory load data volume [GBytes] |    1.5622 |
| Memory evict bandwidth [MBytes/s] |  432.8001 |
| Memory evict data volume [GBytes] |    0.1715 |
|    Memory bandwidth [MBytes/s]    | 4375.2369 |
|    Memory data volume [GBytes]    |    1.7337 |
|       Operational intensity       |    0.0230 |
+-----------------------------------+-----------+

Iteration with GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 5164499756173817179311838344006023748659411585658447025661318713081295244033682389259290706560275662871806343945494986752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 1271269596 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  981800642 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 1258510752 |
|              PWR_PKG_ENERGY              |   PWR0  |     3.8027 |
|              PWR_DRAM_ENERGY             |   PWR3  |     1.9664 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      20480 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   81795125 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   47591370 |
|                DRAM_WRITES               | MBOX0C2 |    5467382 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.7833 |
|        Runtime unhalted [s]       |    0.4261 |
|            Clock [MHz]            | 1797.3752 |
|                CPI                |    0.7723 |
|             Energy [J]            |    3.8027 |
|             Power [W]             |    4.8549 |
|          Energy DRAM [J]          |    1.9664 |
|           Power DRAM [W]          |    2.5104 |
|            DP [MFLOP/s]           |  104.4788 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0261 |
|          Scalar [MUOPS/s]         |  104.4266 |
|  Memory load bandwidth [MBytes/s] | 3888.5859 |
|  Memory load data volume [GBytes] |    3.0458 |
| Memory evict bandwidth [MBytes/s] |  446.7277 |
| Memory evict data volume [GBytes] |    0.3499 |
|    Memory bandwidth [MBytes/s]    | 4335.3136 |
|    Memory data volume [GBytes]    |    3.3958 |
|       Operational intensity       |    0.0241 |
+-----------------------------------+-----------+

Iteration with GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 5164499756173817179311838344006023748659411585658447025661318713081295244033682389259290706560275662871806343945494986752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 1271269592 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  998783506 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 1257874080 |
|              PWR_PKG_ENERGY              |   PWR0  |     3.8781 |
|              PWR_DRAM_ENERGY             |   PWR3  |     1.9686 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      20480 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   81795127 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   48350528 |
|                DRAM_WRITES               | MBOX0C2 |    5483424 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.7817 |
|        Runtime unhalted [s]       |    0.4335 |
|            Clock [MHz]            | 1829.3910 |
|                CPI                |    0.7857 |
|             Energy [J]            |    3.8781 |
|             Power [W]             |    4.9610 |
|          Energy DRAM [J]          |    1.9686 |
|           Power DRAM [W]          |    2.5183 |
|            DP [MFLOP/s]           |  104.6895 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0262 |
|          Scalar [MUOPS/s]         |  104.6371 |
|  Memory load bandwidth [MBytes/s] | 3958.5806 |
|  Memory load data volume [GBytes] |    3.0944 |
| Memory evict bandwidth [MBytes/s] |  448.9419 |
| Memory evict data volume [GBytes] |    0.3509 |
|    Memory bandwidth [MBytes/s]    | 4407.5224 |
|    Memory data volume [GBytes]    |    3.4454 |
|       Operational intensity       |    0.0238 |
+-----------------------------------+-----------+

Iteration with GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 5164499756173817179311838344006023748659411585658447025661318713081295244033682389259290706560275662871806343945494986752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 1271269627 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 1002420207 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 1254115008 |
|              PWR_PKG_ENERGY              |   PWR0  |     3.9121 |
|              PWR_DRAM_ENERGY             |   PWR3  |     1.9811 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      20480 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   81795125 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   49283418 |
|                DRAM_WRITES               | MBOX0C2 |    5492730 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.7812 |
|        Runtime unhalted [s]       |    0.4351 |
|            Clock [MHz]            | 1841.5247 |
|                CPI                |    0.7885 |
|             Energy [J]            |    3.9121 |
|             Power [W]             |    5.0079 |
|          Energy DRAM [J]          |    1.9811 |
|           Power DRAM [W]          |    2.5360 |
|            DP [MFLOP/s]           |  104.7596 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0262 |
|          Scalar [MUOPS/s]         |  104.7072 |
|  Memory load bandwidth [MBytes/s] | 4037.6598 |
|  Memory load data volume [GBytes] |    3.1541 |
| Memory evict bandwidth [MBytes/s] |  450.0048 |
| Memory evict data volume [GBytes] |    0.3515 |
|    Memory bandwidth [MBytes/s]    | 4487.6646 |
|    Memory data volume [GBytes]    |    3.5057 |
|       Operational intensity       |    0.0233 |
+-----------------------------------+-----------+

Iteration with GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 5164499756173817179311838344006023748659411585658447025661318713081295244033682389259290706560275662871806343945494986752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 1271269620 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 1010914062 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 1264608096 |
|              PWR_PKG_ENERGY              |   PWR0  |     3.8800 |
|              PWR_DRAM_ENERGY             |   PWR3  |     1.9763 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      20480 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   81795127 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   48750155 |
|                DRAM_WRITES               | MBOX0C2 |    5467896 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.7849 |
|        Runtime unhalted [s]       |    0.4388 |
|            Clock [MHz]            | 1841.7226 |
|                CPI                |    0.7952 |
|             Energy [J]            |    3.8800 |
|             Power [W]             |    4.9434 |
|          Energy DRAM [J]          |    1.9763 |
|           Power DRAM [W]          |    2.5179 |
|            DP [MFLOP/s]           |  104.2656 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0261 |
|          Scalar [MUOPS/s]         |  104.2135 |
|  Memory load bandwidth [MBytes/s] | 3975.1391 |
|  Memory load data volume [GBytes] |    3.1200 |
| Memory evict bandwidth [MBytes/s] |  445.8580 |
| Memory evict data volume [GBytes] |    0.3499 |
|    Memory bandwidth [MBytes/s]    | 4420.9971 |
|    Memory data volume [GBytes]    |    3.4700 |
|       Operational intensity       |    0.0236 |
+-----------------------------------+-----------+

Iteration with GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 5164499756173817179311838344006023748659411585658447025661318713081295244033682389259290706560275662871806343945494986752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 1271269670 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  997049969 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 1275728352 |
|              PWR_PKG_ENERGY              |   PWR0  |     3.8392 |
|              PWR_DRAM_ENERGY             |   PWR3  |     1.9870 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      20480 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   81795126 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   48854621 |
|                DRAM_WRITES               | MBOX0C2 |    5465274 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.7913 |
|        Runtime unhalted [s]       |    0.4328 |
|            Clock [MHz]            | 1800.6608 |
|                CPI                |    0.7843 |
|             Energy [J]            |    3.8392 |
|             Power [W]             |    4.8520 |
|          Energy DRAM [J]          |    1.9870 |
|           Power DRAM [W]          |    2.5111 |
|            DP [MFLOP/s]           |  103.4229 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0259 |
|          Scalar [MUOPS/s]         |  103.3711 |
|  Memory load bandwidth [MBytes/s] | 3951.4590 |
|  Memory load data volume [GBytes] |    3.1267 |
| Memory evict bandwidth [MBytes/s] |  442.0422 |
| Memory evict data volume [GBytes] |    0.3498 |
|    Memory bandwidth [MBytes/s]    | 4393.5013 |
|    Memory data volume [GBytes]    |    3.4765 |
|       Operational intensity       |    0.0235 |
+-----------------------------------+-----------+

Iteration with GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 13336028865759708548159703581442515594289516644631816320792515623528074475635264143042864401743108581485859821186866480891777603308238730160726712104661660092190315159028029116926156571823628049457930032271773203963381496074952922582327754752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 2574703423 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 1996186540 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 2558728896 |
|              PWR_PKG_ENERGY              |   PWR0  |     7.5546 |
|              PWR_DRAM_ENERGY             |   PWR3  |     3.9814 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      40960 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  165681207 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   97326549 |
|                DRAM_WRITES               | MBOX0C2 |   11075588 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.5785 |
|        Runtime unhalted [s]       |    0.8664 |
|            Clock [MHz]            | 1797.3863 |
|                CPI                |    0.7753 |
|             Energy [J]            |    7.5546 |
|             Power [W]             |    4.7858 |
|          Energy DRAM [J]          |    3.9814 |
|           Power DRAM [W]          |    2.5222 |
|            DP [MFLOP/s]           |  105.0105 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0259 |
|          Scalar [MUOPS/s]         |  104.9586 |
|  Memory load bandwidth [MBytes/s] | 3945.9913 |
|  Memory load data volume [GBytes] |    6.2289 |
| Memory evict bandwidth [MBytes/s] |  449.0468 |
| Memory evict data volume [GBytes] |    0.7088 |
|    Memory bandwidth [MBytes/s]    | 4395.0381 |
|    Memory data volume [GBytes]    |    6.9377 |
|       Operational intensity       |    0.0239 |
+-----------------------------------+-----------+

Iteration with GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 13336028865759708548159703581442515594289516644631816320792515623528074475635264143042864401743108581485859821186866480891777603308238730160726712104661660092190315159028029116926156571823628049457930032271773203963381496074952922582327754752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 2574703378 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 2009395724 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 2539893984 |
|              PWR_PKG_ENERGY              |   PWR0  |     7.5817 |
|              PWR_DRAM_ENERGY             |   PWR3  |     3.9761 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      40960 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  165681207 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   97910229 |
|                DRAM_WRITES               | MBOX0C2 |   11088482 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.5711 |
|        Runtime unhalted [s]       |    0.8722 |
|            Clock [MHz]            | 1822.6972 |
|                CPI                |    0.7804 |
|             Energy [J]            |    7.5817 |
|             Power [W]             |    4.8256 |
|          Energy DRAM [J]          |    3.9761 |
|           Power DRAM [W]          |    2.5307 |
|            DP [MFLOP/s]           |  105.5043 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0261 |
|          Scalar [MUOPS/s]         |  105.4522 |
|  Memory load bandwidth [MBytes/s] | 3988.3240 |
|  Memory load data volume [GBytes] |    6.2663 |
| Memory evict bandwidth [MBytes/s] |  451.6837 |
| Memory evict data volume [GBytes] |    0.7097 |
|    Memory bandwidth [MBytes/s]    | 4440.0077 |
|    Memory data volume [GBytes]    |    6.9759 |
|       Operational intensity       |    0.0238 |
+-----------------------------------+-----------+

Iteration with GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 13336028865759708548159703581442515594289516644631816320792515623528074475635264143042864401743108581485859821186866480891777603308238730160726712104661660092190315159028029116926156571823628049457930032271773203963381496074952922582327754752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 2574703363 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 2007059192 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 2542458048 |
|              PWR_PKG_ENERGY              |   PWR0  |     7.6121 |
|              PWR_DRAM_ENERGY             |   PWR3  |     3.9923 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      40960 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  165681205 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   98801740 |
|                DRAM_WRITES               | MBOX0C2 |   11095081 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.5739 |
|        Runtime unhalted [s]       |    0.8711 |
|            Clock [MHz]            | 1818.7749 |
|                CPI                |    0.7795 |
|             Energy [J]            |    7.6121 |
|             Power [W]             |    4.8366 |
|          Energy DRAM [J]          |    3.9923 |
|           Power DRAM [W]          |    2.5366 |
|            DP [MFLOP/s]           |  105.3229 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0260 |
|          Scalar [MUOPS/s]         |  105.2708 |
|  Memory load bandwidth [MBytes/s] | 4017.7164 |
|  Memory load data volume [GBytes] |    6.3233 |
| Memory evict bandwidth [MBytes/s] |  451.1751 |
| Memory evict data volume [GBytes] |    0.7101 |
|    Memory bandwidth [MBytes/s]    | 4468.8916 |
|    Memory data volume [GBytes]    |    7.0334 |
|       Operational intensity       |    0.0236 |
+-----------------------------------+-----------+

Iteration with GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 13336028865759708548159703581442515594289516644631816320792515623528074475635264143042864401743108581485859821186866480891777603308238730160726712104661660092190315159028029116926156571823628049457930032271773203963381496074952922582327754752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 2574703327 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 2013215810 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 2542046880 |
|              PWR_PKG_ENERGY              |   PWR0  |     7.5723 |
|              PWR_DRAM_ENERGY             |   PWR3  |     3.9670 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      40960 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  165681205 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   97924529 |
|                DRAM_WRITES               | MBOX0C2 |   11057772 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.5688 |
|        Runtime unhalted [s]       |    0.8738 |
|            Clock [MHz]            | 1824.6480 |
|                CPI                |    0.7819 |
|             Energy [J]            |    7.5723 |
|             Power [W]             |    4.8267 |
|          Energy DRAM [J]          |    3.9670 |
|           Power DRAM [W]          |    2.5286 |
|            DP [MFLOP/s]           |  105.6608 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0261 |
|          Scalar [MUOPS/s]         |  105.6086 |
|  Memory load bandwidth [MBytes/s] | 3994.8217 |
|  Memory load data volume [GBytes] |    6.2672 |
| Memory evict bandwidth [MBytes/s] |  451.1007 |
| Memory evict data volume [GBytes] |    0.7077 |
|    Memory bandwidth [MBytes/s]    | 4445.9225 |
|    Memory data volume [GBytes]    |    6.9749 |
|       Operational intensity       |    0.0238 |
+-----------------------------------+-----------+

Iteration with GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 13336028865759708548159703581442515594289516644631816320792515623528074475635264143042864401743108581485859821186866480891777603308238730160726712104661660092190315159028029116926156571823628049457930032271773203963381496074952922582327754752.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 2574703392 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 1987355909 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 2572534560 |
|              PWR_PKG_ENERGY              |   PWR0  |     7.5253 |
|              PWR_DRAM_ENERGY             |   PWR3  |     3.9954 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      40960 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  165681206 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |   98020827 |
|                DRAM_WRITES               | MBOX0C2 |   11060213 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.5812 |
|        Runtime unhalted [s]       |    0.8626 |
|            Clock [MHz]            | 1779.8665 |
|                CPI                |    0.7719 |
|             Energy [J]            |    7.5253 |
|             Power [W]             |    4.7591 |
|          Energy DRAM [J]          |    3.9954 |
|           Power DRAM [W]          |    2.5267 |
|            DP [MFLOP/s]           |  104.8311 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0259 |
|          Scalar [MUOPS/s]         |  104.7793 |
|  Memory load bandwidth [MBytes/s] | 3967.3499 |
|  Memory load data volume [GBytes] |    6.2733 |
| Memory evict bandwidth [MBytes/s] |  447.6573 |
| Memory evict data volume [GBytes] |    0.7079 |
|    Memory bandwidth [MBytes/s]    | 4415.0072 |
|    Memory data volume [GBytes]    |    6.9812 |
|       Operational intensity       |    0.0237 |
+-----------------------------------+-----------+

Iteration with GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 5181550731 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 4070522363 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 5057471424 |
|              PWR_PKG_ENERGY              |   PWR0  |    15.7052 |
|              PWR_DRAM_ENERGY             |   PWR3  |     7.9444 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      81920 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  333453367 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |  197251896 |
|                DRAM_WRITES               | MBOX0C2 |   22318413 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    3.1212 |
|        Runtime unhalted [s]       |    1.7668 |
|            Clock [MHz]            | 1854.3404 |
|                CPI                |    0.7856 |
|             Energy [J]            |   15.7052 |
|             Power [W]             |    5.0318 |
|          Energy DRAM [J]          |    7.9444 |
|           Power DRAM [W]          |    2.5453 |
|            DP [MFLOP/s]           |  106.8879 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0262 |
|          Scalar [MUOPS/s]         |  106.8354 |
|  Memory load bandwidth [MBytes/s] | 4044.6519 |
|  Memory load data volume [GBytes] |   12.6241 |
| Memory evict bandwidth [MBytes/s] |  457.6393 |
| Memory evict data volume [GBytes] |    1.4284 |
|    Memory bandwidth [MBytes/s]    | 4502.2912 |
|    Memory data volume [GBytes]    |   14.0525 |
|       Operational intensity       |    0.0237 |
+-----------------------------------+-----------+

Iteration with GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 5181386265 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 4091994843 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 5048811360 |
|              PWR_PKG_ENERGY              |   PWR0  |    15.7432 |
|              PWR_DRAM_ENERGY             |   PWR3  |     7.9231 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      81920 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  333453368 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |  196636977 |
|                DRAM_WRITES               | MBOX0C2 |   22285679 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    3.1169 |
|        Runtime unhalted [s]       |    1.7761 |
|            Clock [MHz]            | 1867.3189 |
|                CPI                |    0.7897 |
|             Energy [J]            |   15.7432 |
|             Power [W]             |    5.0510 |
|          Energy DRAM [J]          |    7.9231 |
|           Power DRAM [W]          |    2.5420 |
|            DP [MFLOP/s]           |  107.0362 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0263 |
|          Scalar [MUOPS/s]         |  106.9836 |
|  Memory load bandwidth [MBytes/s] | 4037.6368 |
|  Memory load data volume [GBytes] |   12.5848 |
| Memory evict bandwidth [MBytes/s] |  457.6020 |
| Memory evict data volume [GBytes] |    1.4263 |
|    Memory bandwidth [MBytes/s]    | 4495.2388 |
|    Memory data volume [GBytes]    |   14.0110 |
|       Operational intensity       |    0.0238 |
+-----------------------------------+-----------+

Iteration with GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 5181386278 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 4055688905 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 5061782688 |
|              PWR_PKG_ENERGY              |   PWR0  |    15.6129 |
|              PWR_DRAM_ENERGY             |   PWR3  |     7.9361 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      81920 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  333453368 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |  196494805 |
|                DRAM_WRITES               | MBOX0C2 |   22295274 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    3.1197 |
|        Runtime unhalted [s]       |    1.7604 |
|            Clock [MHz]            | 1845.9113 |
|                CPI                |    0.7827 |
|             Energy [J]            |   15.6129 |
|             Power [W]             |    5.0046 |
|          Energy DRAM [J]          |    7.9361 |
|           Power DRAM [W]          |    2.5438 |
|            DP [MFLOP/s]           |  106.9380 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0263 |
|          Scalar [MUOPS/s]         |  106.8855 |
|  Memory load bandwidth [MBytes/s] | 4031.0171 |
|  Memory load data volume [GBytes] |   12.5757 |
| Memory evict bandwidth [MBytes/s] |  457.3792 |
| Memory evict data volume [GBytes] |    1.4269 |
|    Memory bandwidth [MBytes/s]    | 4488.3962 |
|    Memory data volume [GBytes]    |   14.0026 |
|       Operational intensity       |    0.0238 |
+-----------------------------------+-----------+

Iteration with GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 5181386315 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 4071962206 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 5084504352 |
|              PWR_PKG_ENERGY              |   PWR0  |    15.6189 |
|              PWR_DRAM_ENERGY             |   PWR3  |     7.9523 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      81920 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  333453368 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |  197161802 |
|                DRAM_WRITES               | MBOX0C2 |   22259299 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    3.1299 |
|        Runtime unhalted [s]       |    1.7674 |
|            Clock [MHz]            | 1845.1325 |
|                CPI                |    0.7859 |
|             Energy [J]            |   15.6189 |
|             Power [W]             |    4.9903 |
|          Energy DRAM [J]          |    7.9523 |
|           Power DRAM [W]          |    2.5408 |
|            DP [MFLOP/s]           |  106.5920 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0262 |
|          Scalar [MUOPS/s]         |  106.5396 |
|  Memory load bandwidth [MBytes/s] | 4031.6122 |
|  Memory load data volume [GBytes] |   12.6184 |
| Memory evict bandwidth [MBytes/s] |  455.1635 |
| Memory evict data volume [GBytes] |    1.4246 |
|    Memory bandwidth [MBytes/s]    | 4486.7757 |
|    Memory data volume [GBytes]    |   14.0430 |
|       Operational intensity       |    0.0238 |
+-----------------------------------+-----------+

Iteration with GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+------------+
|                   Event                  | Counter |   Core 0   |
+------------------------------------------+---------+------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 5181386272 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 4050999505 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 5070645504 |
|              PWR_PKG_ENERGY              |   PWR0  |    15.5909 |
|              PWR_DRAM_ENERGY             |   PWR3  |     7.9362 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      81920 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |  333453366 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |          0 |
|                DRAM_READS                | MBOX0C1 |  195723581 |
|                DRAM_WRITES               | MBOX0C2 |   22234775 |
+------------------------------------------+---------+------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    3.1245 |
|        Runtime unhalted [s]       |    1.7583 |
|            Clock [MHz]            | 1840.6537 |
|                CPI                |    0.7818 |
|             Energy [J]            |   15.5909 |
|             Power [W]             |    4.9898 |
|          Energy DRAM [J]          |    7.9362 |
|           Power DRAM [W]          |    2.5400 |
|            DP [MFLOP/s]           |  106.7735 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0262 |
|          Scalar [MUOPS/s]         |  106.7210 |
|  Memory load bandwidth [MBytes/s] | 4009.0181 |
|  Memory load data volume [GBytes] |   12.5263 |
| Memory evict bandwidth [MBytes/s] |  455.4363 |
| Memory evict data volume [GBytes] |    1.4230 |
|    Memory bandwidth [MBytes/s]    | 4464.4544 |
|    Memory data volume [GBytes]    |   13.9493 |
|       Operational intensity       |    0.0239 |
+-----------------------------------+-----------+

Iteration with GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-------------+
|                   Event                  | Counter |    Core 0   |
+------------------------------------------+---------+-------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 10394925081 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  8287110295 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 10004725248 |
|              PWR_PKG_ENERGY              |   PWR0  |     32.2375 |
|              PWR_DRAM_ENERGY             |   PWR3  |     15.8471 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      163840 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   668997688 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |           0 |
|                DRAM_READS                | MBOX0C1 |   395928058 |
|                DRAM_WRITES               | MBOX0C2 |    44926684 |
+------------------------------------------+---------+-------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    6.1954 |
|        Runtime unhalted [s]       |    3.5982 |
|            Clock [MHz]            | 1907.7462 |
|                CPI                |    0.7972 |
|             Energy [J]            |   32.2375 |
|             Power [W]             |    5.2035 |
|          Energy DRAM [J]          |   15.8471 |
|           Power DRAM [W]          |    2.5579 |
|            DP [MFLOP/s]           |  108.0360 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0264 |
|          Scalar [MUOPS/s]         |  107.9831 |
|  Memory load bandwidth [MBytes/s] | 4090.0377 |
|  Memory load data volume [GBytes] |   25.3394 |
| Memory evict bandwidth [MBytes/s] |  464.1041 |
| Memory evict data volume [GBytes] |    2.8753 |
|    Memory bandwidth [MBytes/s]    | 4554.1418 |
|    Memory data volume [GBytes]    |   28.2147 |
|       Operational intensity       |    0.0237 |
+-----------------------------------+-----------+

Iteration with GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-------------+
|                   Event                  | Counter |    Core 0   |
+------------------------------------------+---------+-------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 10394925102 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  8280943581 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  |  9999155136 |
|              PWR_PKG_ENERGY              |   PWR0  |     32.1743 |
|              PWR_DRAM_ENERGY             |   PWR3  |     15.8571 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      163840 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   668997686 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |           0 |
|                DRAM_READS                | MBOX0C1 |   394437126 |
|                DRAM_WRITES               | MBOX0C2 |    44875702 |
+------------------------------------------+---------+-------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    6.2147 |
|        Runtime unhalted [s]       |    3.5943 |
|            Clock [MHz]            | 1908.0284 |
|                CPI                |    0.7966 |
|             Energy [J]            |   32.1743 |
|             Power [W]             |    5.1771 |
|          Energy DRAM [J]          |   15.8571 |
|           Power DRAM [W]          |    2.5515 |
|            DP [MFLOP/s]           |  107.6997 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0264 |
|          Scalar [MUOPS/s]         |  107.6469 |
|  Memory load bandwidth [MBytes/s] | 4061.9522 |
|  Memory load data volume [GBytes] |   25.2440 |
| Memory evict bandwidth [MBytes/s] |  462.1344 |
| Memory evict data volume [GBytes] |    2.8720 |
|    Memory bandwidth [MBytes/s]    | 4524.0866 |
|    Memory data volume [GBytes]    |   28.1160 |
|       Operational intensity       |    0.0238 |
+-----------------------------------+-----------+

Iteration with GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-------------+
|                   Event                  | Counter |    Core 0   |
+------------------------------------------+---------+-------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 10394925056 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  8317003161 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 10007361216 |
|              PWR_PKG_ENERGY              |   PWR0  |     31.7018 |
|              PWR_DRAM_ENERGY             |   PWR3  |     15.8240 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      163840 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   668997685 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |           0 |
|                DRAM_READS                | MBOX0C1 |   394324540 |
|                DRAM_WRITES               | MBOX0C2 |    44768536 |
+------------------------------------------+---------+-------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    6.1993 |
|        Runtime unhalted [s]       |    3.6101 |
|            Clock [MHz]            | 1914.6560 |
|                CPI                |    0.8001 |
|             Energy [J]            |   31.7018 |
|             Power [W]             |    5.1138 |
|          Energy DRAM [J]          |   15.8240 |
|           Power DRAM [W]          |    2.5526 |
|            DP [MFLOP/s]           |  107.9686 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0264 |
|          Scalar [MUOPS/s]         |  107.9157 |
|  Memory load bandwidth [MBytes/s] | 4070.9333 |
|  Memory load data volume [GBytes] |   25.2368 |
| Memory evict bandwidth [MBytes/s] |  462.1821 |
| Memory evict data volume [GBytes] |    2.8652 |
|    Memory bandwidth [MBytes/s]    | 4533.1154 |
|    Memory data volume [GBytes]    |   28.1020 |
|       Operational intensity       |    0.0238 |
+-----------------------------------+-----------+

Iteration with GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-------------+
|                   Event                  | Counter |    Core 0   |
+------------------------------------------+---------+-------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 10394925069 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  8283874797 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 10028209824 |
|              PWR_PKG_ENERGY              |   PWR0  |     31.5731 |
|              PWR_DRAM_ENERGY             |   PWR3  |     15.8044 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      163840 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   668997686 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |           0 |
|                DRAM_READS                | MBOX0C1 |   393638976 |
|                DRAM_WRITES               | MBOX0C2 |    44639103 |
+------------------------------------------+---------+-------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    6.2001 |
|        Runtime unhalted [s]       |    3.5955 |
|            Clock [MHz]            | 1903.1974 |
|                CPI                |    0.7969 |
|             Energy [J]            |   31.5731 |
|             Power [W]             |    5.0923 |
|          Energy DRAM [J]          |   15.8044 |
|           Power DRAM [W]          |    2.5491 |
|            DP [MFLOP/s]           |  107.9540 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0264 |
|          Scalar [MUOPS/s]         |  107.9011 |
|  Memory load bandwidth [MBytes/s] | 4063.3044 |
|  Memory load data volume [GBytes] |   25.1929 |
| Memory evict bandwidth [MBytes/s] |  460.7833 |
| Memory evict data volume [GBytes] |    2.8569 |
|    Memory bandwidth [MBytes/s]    | 4524.0877 |
|    Memory data volume [GBytes]    |   28.0498 |
|       Operational intensity       |    0.0239 |
+-----------------------------------+-----------+

Iteration with GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: inf
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-------------+
|                   Event                  | Counter |    Core 0   |
+------------------------------------------+---------+-------------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 10394925080 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  |  8305712913 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 10045658592 |
|              PWR_PKG_ENERGY              |   PWR0  |     31.5555 |
|              PWR_DRAM_ENERGY             |   PWR3  |     15.8113 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |      163840 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |   668997686 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |           0 |
|                DRAM_READS                | MBOX0C1 |   392096228 |
|                DRAM_WRITES               | MBOX0C2 |    44658430 |
+------------------------------------------+---------+-------------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    6.2078 |
|        Runtime unhalted [s]       |    3.6050 |
|            Clock [MHz]            | 1904.8876 |
|                CPI                |    0.7990 |
|             Energy [J]            |   31.5555 |
|             Power [W]             |    5.0832 |
|          Energy DRAM [J]          |   15.8113 |
|           Power DRAM [W]          |    2.5470 |
|            DP [MFLOP/s]           |  107.8196 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0264 |
|          Scalar [MUOPS/s]         |  107.7668 |
|  Memory load bandwidth [MBytes/s] | 4042.3430 |
|  Memory load data volume [GBytes] |   25.0942 |
| Memory evict bandwidth [MBytes/s] |  460.4092 |
| Memory evict data volume [GBytes] |    2.8581 |
|    Memory bandwidth [MBytes/s]    | 4502.7521 |
|    Memory data volume [GBytes]    |   27.9523 |
|       Operational intensity       |    0.0239 |
+-----------------------------------+-----------+

Iteration without GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 19404156 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 19452192 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 20593248 |
|              PWR_PKG_ENERGY              |   PWR0  |   0.3390 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.1187 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     5120 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       56 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |        0 |
|                DRAM_READS                | MBOX0C1 |   750340 |
|                DRAM_WRITES               | MBOX0C2 |  1263669 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.0655 |
|        Runtime unhalted [s]       |    0.0084 |
|            Clock [MHz]            | 2176.2898 |
|                CPI                |    1.0025 |
|             Energy [J]            |    0.3390 |
|             Power [W]             |    5.1785 |
|          Energy DRAM [J]          |    0.1187 |
|           Power DRAM [W]          |    1.8135 |
|            DP [MFLOP/s]           |    0.1573 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0782 |
|          Scalar [MUOPS/s]         |    0.0009 |
|  Memory load bandwidth [MBytes/s] |  733.5987 |
|  Memory load data volume [GBytes] |    0.0480 |
| Memory evict bandwidth [MBytes/s] | 1235.4744 |
| Memory evict data volume [GBytes] |    0.0809 |
|    Memory bandwidth [MBytes/s]    | 1969.0731 |
|    Memory data volume [GBytes]    |    0.1289 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 19404143 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 19365943 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 22130304 |
|              PWR_PKG_ENERGY              |   PWR0  |   0.3500 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.1274 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     5120 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       54 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |        0 |
|                DRAM_READS                | MBOX0C1 |   863367 |
|                DRAM_WRITES               | MBOX0C2 |  1276153 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.0702 |
|        Runtime unhalted [s]       |    0.0084 |
|            Clock [MHz]            | 2015.6738 |
|                CPI                |    0.9980 |
|             Energy [J]            |    0.3500 |
|             Power [W]             |    4.9846 |
|          Energy DRAM [J]          |    0.1274 |
|           Power DRAM [W]          |    1.8148 |
|            DP [MFLOP/s]           |    0.1466 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0729 |
|          Scalar [MUOPS/s]         |    0.0008 |
|  Memory load bandwidth [MBytes/s] |  786.8563 |
|  Memory load data volume [GBytes] |    0.0553 |
| Memory evict bandwidth [MBytes/s] | 1163.0616 |
| Memory evict data volume [GBytes] |    0.0817 |
|    Memory bandwidth [MBytes/s]    | 1949.9180 |
|    Memory data volume [GBytes]    |    0.1369 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 19404150 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 19241001 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 21855360 |
|              PWR_PKG_ENERGY              |   PWR0  |   0.3399 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.1243 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     5120 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       53 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |        0 |
|                DRAM_READS                | MBOX0C1 |   775951 |
|                DRAM_WRITES               | MBOX0C2 |  1262090 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.0692 |
|        Runtime unhalted [s]       |    0.0084 |
|            Clock [MHz]            | 2028.3137 |
|                CPI                |    0.9916 |
|             Energy [J]            |    0.3399 |
|             Power [W]             |    4.9108 |
|          Energy DRAM [J]          |    0.1243 |
|           Power DRAM [W]          |    1.7954 |
|            DP [MFLOP/s]           |    0.1487 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0740 |
|          Scalar [MUOPS/s]         |    0.0008 |
|  Memory load bandwidth [MBytes/s] |  717.4761 |
|  Memory load data volume [GBytes] |    0.0497 |
| Memory evict bandwidth [MBytes/s] | 1166.9801 |
| Memory evict data volume [GBytes] |    0.0808 |
|    Memory bandwidth [MBytes/s]    | 1884.4563 |
|    Memory data volume [GBytes]    |    0.1304 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 19404136 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 19287903 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 22142304 |
|              PWR_PKG_ENERGY              |   PWR0  |   0.3422 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.1257 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     5120 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       53 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |        0 |
|                DRAM_READS                | MBOX0C1 |   773443 |
|                DRAM_WRITES               | MBOX0C2 |  1257389 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.0701 |
|        Runtime unhalted [s]       |    0.0084 |
|            Clock [MHz]            | 2006.9458 |
|                CPI                |    0.9940 |
|             Energy [J]            |    0.3422 |
|             Power [W]             |    4.8798 |
|          Energy DRAM [J]          |    0.1257 |
|           Power DRAM [W]          |    1.7920 |
|            DP [MFLOP/s]           |    0.1468 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0730 |
|          Scalar [MUOPS/s]         |    0.0008 |
|  Memory load bandwidth [MBytes/s] |  705.8309 |
|  Memory load data volume [GBytes] |    0.0495 |
| Memory evict bandwidth [MBytes/s] | 1147.4718 |
| Memory evict data volume [GBytes] |    0.0805 |
|    Memory bandwidth [MBytes/s]    | 1853.3027 |
|    Memory data volume [GBytes]    |    0.1300 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 10 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 19404152 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 19238119 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 22334592 |
|              PWR_PKG_ENERGY              |   PWR0  |   0.3373 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.1246 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     5120 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       54 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |        0 |
|                DRAM_READS                | MBOX0C1 |   732183 |
|                DRAM_WRITES               | MBOX0C2 |  1255647 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.0707 |
|        Runtime unhalted [s]       |    0.0084 |
|            Clock [MHz]            | 1984.5296 |
|                CPI                |    0.9914 |
|             Energy [J]            |    0.3373 |
|             Power [W]             |    4.7735 |
|          Energy DRAM [J]          |    0.1246 |
|           Power DRAM [W]          |    1.7636 |
|            DP [MFLOP/s]           |    0.1457 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0724 |
|          Scalar [MUOPS/s]         |    0.0008 |
|  Memory load bandwidth [MBytes/s] |  663.0769 |
|  Memory load data volume [GBytes] |    0.0469 |
| Memory evict bandwidth [MBytes/s] | 1137.1345 |
| Memory evict data volume [GBytes] |    0.0804 |
|    Memory bandwidth [MBytes/s]    | 1800.2114 |
|    Memory data volume [GBytes]    |    0.1272 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 40639603 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 40012656 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 42655488 |
|              PWR_PKG_ENERGY              |   PWR0  |   0.7178 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.2435 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |    10240 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       54 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |        0 |
|                DRAM_READS                | MBOX0C1 |  1437045 |
|                DRAM_WRITES               | MBOX0C2 |  2659047 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1355 |
|        Runtime unhalted [s]       |    0.0174 |
|            Clock [MHz]            | 2161.1783 |
|                CPI                |    0.9846 |
|             Energy [J]            |    0.7178 |
|             Power [W]             |    5.2995 |
|          Energy DRAM [J]          |    0.2435 |
|           Power DRAM [W]          |    1.7975 |
|            DP [MFLOP/s]           |    0.1516 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0756 |
|          Scalar [MUOPS/s]         |    0.0004 |
|  Memory load bandwidth [MBytes/s] |  678.9902 |
|  Memory load data volume [GBytes] |    0.0920 |
| Memory evict bandwidth [MBytes/s] | 1256.3746 |
| Memory evict data volume [GBytes] |    0.1702 |
|    Memory bandwidth [MBytes/s]    | 1935.3648 |
|    Memory data volume [GBytes]    |    0.2621 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 40639642 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 40088316 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 43377312 |
|              PWR_PKG_ENERGY              |   PWR0  |   0.7253 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.2502 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |    10240 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       56 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |        0 |
|                DRAM_READS                | MBOX0C1 |  1769671 |
|                DRAM_WRITES               | MBOX0C2 |  2680571 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1372 |
|        Runtime unhalted [s]       |    0.0174 |
|            Clock [MHz]            | 2129.2593 |
|                CPI                |    0.9864 |
|             Energy [J]            |    0.7253 |
|             Power [W]             |    5.2858 |
|          Energy DRAM [J]          |    0.2502 |
|           Power DRAM [W]          |    1.8238 |
|            DP [MFLOP/s]           |    0.1497 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0746 |
|          Scalar [MUOPS/s]         |    0.0004 |
|  Memory load bandwidth [MBytes/s] |  825.4210 |
|  Memory load data volume [GBytes] |    0.1133 |
| Memory evict bandwidth [MBytes/s] | 1250.2886 |
| Memory evict data volume [GBytes] |    0.1716 |
|    Memory bandwidth [MBytes/s]    | 2075.7096 |
|    Memory data volume [GBytes]    |    0.2848 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 40639596 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 39992001 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 42702912 |
|              PWR_PKG_ENERGY              |   PWR0  |   0.6987 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.2423 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |    10240 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       53 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |        0 |
|                DRAM_READS                | MBOX0C1 |  1404579 |
|                DRAM_WRITES               | MBOX0C2 |  2653685 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1358 |
|        Runtime unhalted [s]       |    0.0174 |
|            Clock [MHz]            | 2157.6873 |
|                CPI                |    0.9841 |
|             Energy [J]            |    0.6987 |
|             Power [W]             |    5.1445 |
|          Energy DRAM [J]          |    0.2423 |
|           Power DRAM [W]          |    1.7841 |
|            DP [MFLOP/s]           |    0.1512 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0754 |
|          Scalar [MUOPS/s]         |    0.0004 |
|  Memory load bandwidth [MBytes/s] |  661.8563 |
|  Memory load data volume [GBytes] |    0.0899 |
| Memory evict bandwidth [MBytes/s] | 1250.4516 |
| Memory evict data volume [GBytes] |    0.1698 |
|    Memory bandwidth [MBytes/s]    | 1912.3079 |
|    Memory data volume [GBytes]    |    0.2597 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 40639661 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 39921188 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 44537952 |
|              PWR_PKG_ENERGY              |   PWR0  |   0.6990 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.2496 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |    10240 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       55 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |        0 |
|                DRAM_READS                | MBOX0C1 |  1361218 |
|                DRAM_WRITES               | MBOX0C2 |  2635644 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1408 |
|        Runtime unhalted [s]       |    0.0173 |
|            Clock [MHz]            | 2065.1067 |
|                CPI                |    0.9823 |
|             Energy [J]            |    0.6990 |
|             Power [W]             |    4.9647 |
|          Energy DRAM [J]          |    0.2496 |
|           Power DRAM [W]          |    1.7725 |
|            DP [MFLOP/s]           |    0.1458 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0727 |
|          Scalar [MUOPS/s]         |    0.0004 |
|  Memory load bandwidth [MBytes/s] |  618.7301 |
|  Memory load data volume [GBytes] |    0.0871 |
| Memory evict bandwidth [MBytes/s] | 1198.0097 |
| Memory evict data volume [GBytes] |    0.1687 |
|    Memory bandwidth [MBytes/s]    | 1816.7398 |
|    Memory data volume [GBytes]    |    0.2558 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 20 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 40639660 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 40357566 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 43722336 |
|              PWR_PKG_ENERGY              |   PWR0  |   0.7003 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.2477 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |    10240 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       53 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |        0 |
|                DRAM_READS                | MBOX0C1 |  1451544 |
|                DRAM_WRITES               | MBOX0C2 |  2647976 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.1381 |
|        Runtime unhalted [s]       |    0.0175 |
|            Clock [MHz]            | 2126.1447 |
|                CPI                |    0.9931 |
|             Energy [J]            |    0.7003 |
|             Power [W]             |    5.0706 |
|          Energy DRAM [J]          |    0.2477 |
|           Power DRAM [W]          |    1.7937 |
|            DP [MFLOP/s]           |    0.1487 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0741 |
|          Scalar [MUOPS/s]         |    0.0004 |
|  Memory load bandwidth [MBytes/s] |  672.6236 |
|  Memory load data volume [GBytes] |    0.0929 |
| Memory evict bandwidth [MBytes/s] | 1227.0322 |
| Memory evict data volume [GBytes] |    0.1695 |
|    Memory bandwidth [MBytes/s]    | 1899.6558 |
|    Memory data volume [GBytes]    |    0.2624 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 83110802 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 82896911 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 84958560 |
|              PWR_PKG_ENERGY              |   PWR0  |   1.4345 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.4861 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |    20480 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       54 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |        0 |
|                DRAM_READS                | MBOX0C1 |  2805646 |
|                DRAM_WRITES               | MBOX0C2 |  5458883 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.2696 |
|        Runtime unhalted [s]       |    0.0360 |
|            Clock [MHz]            | 2247.1709 |
|                CPI                |    0.9974 |
|             Energy [J]            |    1.4345 |
|             Power [W]             |    5.3212 |
|          Energy DRAM [J]          |    0.4861 |
|           Power DRAM [W]          |    1.8033 |
|            DP [MFLOP/s]           |    0.1521 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0760 |
|          Scalar [MUOPS/s]         |    0.0002 |
|  Memory load bandwidth [MBytes/s] |  666.0650 |
|  Memory load data volume [GBytes] |    0.1796 |
| Memory evict bandwidth [MBytes/s] | 1295.9478 |
| Memory evict data volume [GBytes] |    0.3494 |
|    Memory bandwidth [MBytes/s]    | 1962.0127 |
|    Memory data volume [GBytes]    |    0.5289 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  |  83110875 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 101761527 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 104482368 |
|              PWR_PKG_ENERGY              |   PWR0  |    1.8909 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.5809 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     20480 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        55 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   4039658 |
|                DRAM_WRITES               | MBOX0C2 |   5429386 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.3119 |
|        Runtime unhalted [s]       |    0.0442 |
|            Clock [MHz]            | 2243.7045 |
|                CPI                |    1.2244 |
|             Energy [J]            |    1.8909 |
|             Power [W]             |    6.0634 |
|          Energy DRAM [J]          |    0.5809 |
|           Power DRAM [W]          |    1.8628 |
|            DP [MFLOP/s]           |    0.1315 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0657 |
|          Scalar [MUOPS/s]         |    0.0002 |
|  Memory load bandwidth [MBytes/s] |  829.0229 |
|  Memory load data volume [GBytes] |    0.2585 |
| Memory evict bandwidth [MBytes/s] | 1114.2244 |
| Memory evict data volume [GBytes] |    0.3475 |
|    Memory bandwidth [MBytes/s]    | 1943.2473 |
|    Memory data volume [GBytes]    |    0.6060 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 83110774 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 81774983 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 84796704 |
|              PWR_PKG_ENERGY              |   PWR0  |   1.4318 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.4817 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |    20480 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       54 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |        0 |
|                DRAM_READS                | MBOX0C1 |  2693040 |
|                DRAM_WRITES               | MBOX0C2 |  5433918 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.2681 |
|        Runtime unhalted [s]       |    0.0355 |
|            Clock [MHz]            | 2221.8509 |
|                CPI                |    0.9839 |
|             Energy [J]            |    1.4318 |
|             Power [W]             |    5.3401 |
|          Energy DRAM [J]          |    0.4817 |
|           Power DRAM [W]          |    1.7966 |
|            DP [MFLOP/s]           |    0.1530 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0764 |
|          Scalar [MUOPS/s]         |    0.0002 |
|  Memory load bandwidth [MBytes/s] |  642.8351 |
|  Memory load data volume [GBytes] |    0.1724 |
| Memory evict bandwidth [MBytes/s] | 1297.0893 |
| Memory evict data volume [GBytes] |    0.3478 |
|    Memory bandwidth [MBytes/s]    | 1939.9244 |
|    Memory data volume [GBytes]    |    0.5201 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 83110815 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 81749370 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 85179456 |
|              PWR_PKG_ENERGY              |   PWR0  |   1.4161 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.4809 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |    20480 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       54 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |        0 |
|                DRAM_READS                | MBOX0C1 |  2635392 |
|                DRAM_WRITES               | MBOX0C2 |  5418523 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.2693 |
|        Runtime unhalted [s]       |    0.0355 |
|            Clock [MHz]            | 2210.6921 |
|                CPI                |    0.9836 |
|             Energy [J]            |    1.4161 |
|             Power [W]             |    5.2576 |
|          Energy DRAM [J]          |    0.4809 |
|           Power DRAM [W]          |    1.7855 |
|            DP [MFLOP/s]           |    0.1523 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0760 |
|          Scalar [MUOPS/s]         |    0.0002 |
|  Memory load bandwidth [MBytes/s] |  626.2153 |
|  Memory load data volume [GBytes] |    0.1687 |
| Memory evict bandwidth [MBytes/s] | 1287.5359 |
| Memory evict data volume [GBytes] |    0.3468 |
|    Memory bandwidth [MBytes/s]    | 1913.7511 |
|    Memory data volume [GBytes]    |    0.5155 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 40 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+----------+
|                   Event                  | Counter |  Core 0  |
+------------------------------------------+---------+----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 83110789 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 81917744 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 85466976 |
|              PWR_PKG_ENERGY              |   PWR0  |   1.4103 |
|              PWR_DRAM_ENERGY             |   PWR3  |   0.4814 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |    20480 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |       54 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |        0 |
|                DRAM_READS                | MBOX0C1 |  2658862 |
|                DRAM_WRITES               | MBOX0C2 |  5408683 |
+------------------------------------------+---------+----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.2699 |
|        Runtime unhalted [s]       |    0.0356 |
|            Clock [MHz]            | 2208.2717 |
|                CPI                |    0.9856 |
|             Energy [J]            |    1.4103 |
|             Power [W]             |    5.2245 |
|          Energy DRAM [J]          |    0.4814 |
|           Power DRAM [W]          |    1.7835 |
|            DP [MFLOP/s]           |    0.1519 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0759 |
|          Scalar [MUOPS/s]         |    0.0002 |
|  Memory load bandwidth [MBytes/s] |  630.3954 |
|  Memory load data volume [GBytes] |    0.1702 |
| Memory evict bandwidth [MBytes/s] | 1282.3566 |
| Memory evict data volume [GBytes] |    0.3462 |
|    Memory bandwidth [MBytes/s]    | 1912.7520 |
|    Memory data volume [GBytes]    |    0.5163 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 168053068 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 164950477 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 168200352 |
|              PWR_PKG_ENERGY              |   PWR0  |    2.8386 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.9480 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     40960 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        54 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   4929182 |
|                DRAM_WRITES               | MBOX0C2 |  10940831 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.5318 |
|        Runtime unhalted [s]       |    0.0716 |
|            Clock [MHz]            | 2259.3966 |
|                CPI                |    0.9815 |
|             Energy [J]            |    2.8386 |
|             Power [W]             |    5.3372 |
|          Energy DRAM [J]          |    0.9480 |
|           Power DRAM [W]          |    1.7825 |
|            DP [MFLOP/s]           |    0.1541 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0770 |
|          Scalar [MUOPS/s]         |    0.0001 |
|  Memory load bandwidth [MBytes/s] |  593.1573 |
|  Memory load data volume [GBytes] |    0.3155 |
| Memory evict bandwidth [MBytes/s] | 1316.5741 |
| Memory evict data volume [GBytes] |    0.7002 |
|    Memory bandwidth [MBytes/s]    | 1909.7314 |
|    Memory data volume [GBytes]    |    1.0157 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 168053053 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 164582101 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 168688800 |
|              PWR_PKG_ENERGY              |   PWR0  |    2.8467 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.9503 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     40960 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        56 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   4939950 |
|                DRAM_WRITES               | MBOX0C2 |  10942346 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.5334 |
|        Runtime unhalted [s]       |    0.0714 |
|            Clock [MHz]            | 2247.8186 |
|                CPI                |    0.9793 |
|             Energy [J]            |    2.8467 |
|             Power [W]             |    5.3373 |
|          Energy DRAM [J]          |    0.9503 |
|           Power DRAM [W]          |    1.7816 |
|            DP [MFLOP/s]           |    0.1537 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0768 |
|          Scalar [MUOPS/s]         |    0.0001 |
|  Memory load bandwidth [MBytes/s] |  592.7565 |
|  Memory load data volume [GBytes] |    0.3162 |
| Memory evict bandwidth [MBytes/s] | 1312.9985 |
| Memory evict data volume [GBytes] |    0.7003 |
|    Memory bandwidth [MBytes/s]    | 1905.7550 |
|    Memory data volume [GBytes]    |    1.0165 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 168053073 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 164513117 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 168506496 |
|              PWR_PKG_ENERGY              |   PWR0  |    2.8320 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.9470 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     40960 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        54 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   4734638 |
|                DRAM_WRITES               | MBOX0C2 |  10928843 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.5328 |
|        Runtime unhalted [s]       |    0.0714 |
|            Clock [MHz]            | 2249.1902 |
|                CPI                |    0.9789 |
|             Energy [J]            |    2.8320 |
|             Power [W]             |    5.3151 |
|          Energy DRAM [J]          |    0.9470 |
|           Power DRAM [W]          |    1.7773 |
|            DP [MFLOP/s]           |    0.1538 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0769 |
|          Scalar [MUOPS/s]         |    0.0001 |
|  Memory load bandwidth [MBytes/s] |  568.7005 |
|  Memory load data volume [GBytes] |    0.3030 |
| Memory evict bandwidth [MBytes/s] | 1312.7168 |
| Memory evict data volume [GBytes] |    0.6994 |
|    Memory bandwidth [MBytes/s]    | 1881.4173 |
|    Memory data volume [GBytes]    |    1.0025 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 168053020 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 164931359 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 168417504 |
|              PWR_PKG_ENERGY              |   PWR0  |    2.8709 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.9543 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     40960 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        54 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   5210845 |
|                DRAM_WRITES               | MBOX0C2 |  10965526 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.5325 |
|        Runtime unhalted [s]       |    0.0716 |
|            Clock [MHz]            | 2256.2605 |
|                CPI                |    0.9814 |
|             Energy [J]            |    2.8709 |
|             Power [W]             |    5.3919 |
|          Energy DRAM [J]          |    0.9543 |
|           Power DRAM [W]          |    1.7922 |
|            DP [MFLOP/s]           |    0.1540 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0769 |
|          Scalar [MUOPS/s]         |    0.0001 |
|  Memory load bandwidth [MBytes/s] |  626.3347 |
|  Memory load data volume [GBytes] |    0.3335 |
| Memory evict bandwidth [MBytes/s] | 1318.0376 |
| Memory evict data volume [GBytes] |    0.7018 |
|    Memory bandwidth [MBytes/s]    | 1944.3723 |
|    Memory data volume [GBytes]    |    1.0353 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 80 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 168053032 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 164443162 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 167315424 |
|              PWR_PKG_ENERGY              |   PWR0  |    2.8433 |
|              PWR_DRAM_ENERGY             |   PWR3  |    0.9469 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     40960 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        53 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   4972936 |
|                DRAM_WRITES               | MBOX0C2 |  10935308 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    0.5298 |
|        Runtime unhalted [s]       |    0.0714 |
|            Clock [MHz]            | 2264.3957 |
|                CPI                |    0.9785 |
|             Energy [J]            |    2.8433 |
|             Power [W]             |    5.3664 |
|          Energy DRAM [J]          |    0.9469 |
|           Power DRAM [W]          |    1.7871 |
|            DP [MFLOP/s]           |    0.1547 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0773 |
|          Scalar [MUOPS/s]         |    0.0001 |
|  Memory load bandwidth [MBytes/s] |  600.6864 |
|  Memory load data volume [GBytes] |    0.3183 |
| Memory evict bandwidth [MBytes/s] | 1320.8879 |
| Memory evict data volume [GBytes] |    0.6999 |
|    Memory bandwidth [MBytes/s]    | 1921.5744 |
|    Memory data volume [GBytes]    |    1.0181 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 337938757 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 330613835 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 334671744 |
|              PWR_PKG_ENERGY              |   PWR0  |    5.6712 |
|              PWR_DRAM_ENERGY             |   PWR3  |    1.8788 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     81920 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        55 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   9183115 |
|                DRAM_WRITES               | MBOX0C2 |  21977811 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.0605 |
|        Runtime unhalted [s]       |    0.1435 |
|            Clock [MHz]            | 2275.4711 |
|                CPI                |    0.9783 |
|             Energy [J]            |    5.6712 |
|             Power [W]             |    5.3476 |
|          Energy DRAM [J]          |    1.8788 |
|           Power DRAM [W]          |    1.7716 |
|            DP [MFLOP/s]           |    0.1545 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0772 |
|          Scalar [MUOPS/s]         |    0.0001 |
|  Memory load bandwidth [MBytes/s] |  554.1802 |
|  Memory load data volume [GBytes] |    0.5877 |
| Memory evict bandwidth [MBytes/s] | 1326.3112 |
| Memory evict data volume [GBytes] |    1.4066 |
|    Memory bandwidth [MBytes/s]    | 1880.4914 |
|    Memory data volume [GBytes]    |    1.9943 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 337938761 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 330181415 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 335854752 |
|              PWR_PKG_ENERGY              |   PWR0  |    5.6373 |
|              PWR_DRAM_ENERGY             |   PWR3  |    1.8804 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     81920 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        56 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   9102241 |
|                DRAM_WRITES               | MBOX0C2 |  21980131 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.0638 |
|        Runtime unhalted [s]       |    0.1433 |
|            Clock [MHz]            | 2265.0132 |
|                CPI                |    0.9770 |
|             Energy [J]            |    5.6373 |
|             Power [W]             |    5.2991 |
|          Energy DRAM [J]          |    1.8804 |
|           Power DRAM [W]          |    1.7676 |
|            DP [MFLOP/s]           |    0.1541 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0770 |
|          Scalar [MUOPS/s]         |    0.0001 |
|  Memory load bandwidth [MBytes/s] |  547.5986 |
|  Memory load data volume [GBytes] |    0.5825 |
| Memory evict bandwidth [MBytes/s] | 1322.3434 |
| Memory evict data volume [GBytes] |    1.4067 |
|    Memory bandwidth [MBytes/s]    | 1869.9420 |
|    Memory data volume [GBytes]    |    1.9893 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 337938790 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 330896493 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 335279232 |
|              PWR_PKG_ENERGY              |   PWR0  |    5.6862 |
|              PWR_DRAM_ENERGY             |   PWR3  |    1.8922 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     81920 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        53 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   9622329 |
|                DRAM_WRITES               | MBOX0C2 |  22027324 |
+------------------------------------------+---------+-----------+

+-----------------------------------+--------------+
|               Metric              |    Core 0    |
+-----------------------------------+--------------+
|        Runtime (RDTSC) [s]        |       1.0633 |
|        Runtime unhalted [s]       |       0.1436 |
|            Clock [MHz]            |    2273.8362 |
|                CPI                |       0.9792 |
|             Energy [J]            |       5.6862 |
|             Power [W]             |       5.3474 |
|          Energy DRAM [J]          |       1.8922 |
|           Power DRAM [W]          |       1.7794 |
|            DP [MFLOP/s]           |       0.1541 |
|          AVX DP [MFLOP/s]         |            0 |
|          Packed [MUOPS/s]         |       0.0770 |
|          Scalar [MUOPS/s]         | 4.984293e-05 |
|  Memory load bandwidth [MBytes/s] |     579.1457 |
|  Memory load data volume [GBytes] |       0.6158 |
| Memory evict bandwidth [MBytes/s] |    1325.7736 |
| Memory evict data volume [GBytes] |       1.4097 |
|    Memory bandwidth [MBytes/s]    |    1904.9193 |
|    Memory data volume [GBytes]    |       2.0256 |
|       Operational intensity       |       0.0001 |
+-----------------------------------+--------------+

Iteration without GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 337938742 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 330866160 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 335223456 |
|              PWR_PKG_ENERGY              |   PWR0  |    5.6450 |
|              PWR_DRAM_ENERGY             |   PWR3  |    1.8793 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     81920 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        53 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   9187242 |
|                DRAM_WRITES               | MBOX0C2 |  21982576 |
+------------------------------------------+---------+-----------+

+-----------------------------------+--------------+
|               Metric              |    Core 0    |
+-----------------------------------+--------------+
|        Runtime (RDTSC) [s]        |       1.0603 |
|        Runtime unhalted [s]       |       0.1436 |
|            Clock [MHz]            |    2273.9990 |
|                CPI                |       0.9791 |
|             Energy [J]            |       5.6450 |
|             Power [W]             |       5.3239 |
|          Energy DRAM [J]          |       1.8793 |
|           Power DRAM [W]          |       1.7724 |
|            DP [MFLOP/s]           |       0.1546 |
|          AVX DP [MFLOP/s]         |            0 |
|          Packed [MUOPS/s]         |       0.0773 |
|          Scalar [MUOPS/s]         | 4.998572e-05 |
|  Memory load bandwidth [MBytes/s] |     554.5429 |
|  Memory load data volume [GBytes] |       0.5880 |
| Memory evict bandwidth [MBytes/s] |    1326.8707 |
| Memory evict data volume [GBytes] |       1.4069 |
|    Memory bandwidth [MBytes/s]    |    1881.4137 |
|    Memory data volume [GBytes]    |       1.9949 |
|       Operational intensity       |       0.0001 |
+-----------------------------------+--------------+

Iteration without GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 160 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 337938769 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 330448785 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 335082816 |
|              PWR_PKG_ENERGY              |   PWR0  |    5.6390 |
|              PWR_DRAM_ENERGY             |   PWR3  |    1.8784 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |     81920 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        55 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |   9227903 |
|                DRAM_WRITES               | MBOX0C2 |  22004710 |
+------------------------------------------+---------+-----------+

+-----------------------------------+-----------+
|               Metric              |   Core 0  |
+-----------------------------------+-----------+
|        Runtime (RDTSC) [s]        |    1.0595 |
|        Runtime unhalted [s]       |    0.1434 |
|            Clock [MHz]            | 2272.0832 |
|                CPI                |    0.9778 |
|             Energy [J]            |    5.6390 |
|             Power [W]             |    5.3226 |
|          Energy DRAM [J]          |    1.8784 |
|           Power DRAM [W]          |    1.7730 |
|            DP [MFLOP/s]           |    0.1547 |
|          AVX DP [MFLOP/s]         |         0 |
|          Packed [MUOPS/s]         |    0.0773 |
|          Scalar [MUOPS/s]         |    0.0001 |
|  Memory load bandwidth [MBytes/s] |  557.4419 |
|  Memory load data volume [GBytes] |    0.5906 |
| Memory evict bandwidth [MBytes/s] | 1329.2671 |
| Memory evict data volume [GBytes] |    1.4083 |
|    Memory bandwidth [MBytes/s]    | 1886.7090 |
|    Memory data volume [GBytes]    |    1.9989 |
|       Operational intensity       |    0.0001 |
+-----------------------------------+-----------+

Iteration without GEMM: 1
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 677710361 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 663277359 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 669307872 |
|              PWR_PKG_ENERGY              |   PWR0  |   11.3171 |
|              PWR_DRAM_ENERGY             |   PWR3  |    3.7574 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |    163840 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        55 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |  18378695 |
|                DRAM_WRITES               | MBOX0C2 |  44127905 |
+------------------------------------------+---------+-----------+

+-----------------------------------+--------------+
|               Metric              |    Core 0    |
+-----------------------------------+--------------+
|        Runtime (RDTSC) [s]        |       2.1181 |
|        Runtime unhalted [s]       |       0.2879 |
|            Clock [MHz]            |    2283.1792 |
|                CPI                |       0.9787 |
|             Energy [J]            |      11.3171 |
|             Power [W]             |       5.3431 |
|          Energy DRAM [J]          |       3.7574 |
|           Power DRAM [W]          |       1.7739 |
|            DP [MFLOP/s]           |       0.1547 |
|          AVX DP [MFLOP/s]         |            0 |
|          Packed [MUOPS/s]         |       0.0774 |
|          Scalar [MUOPS/s]         | 2.596666e-05 |
|  Memory load bandwidth [MBytes/s] |     555.3260 |
|  Memory load data volume [GBytes] |       1.1762 |
| Memory evict bandwidth [MBytes/s] |    1333.3576 |
| Memory evict data volume [GBytes] |       2.8242 |
|    Memory bandwidth [MBytes/s]    |    1888.6836 |
|    Memory data volume [GBytes]    |       4.0004 |
|       Operational intensity       |       0.0001 |
+-----------------------------------+--------------+

Iteration without GEMM: 2
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 677710341 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 664092476 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 668529888 |
|              PWR_PKG_ENERGY              |   PWR0  |   11.3524 |
|              PWR_DRAM_ENERGY             |   PWR3  |    3.7685 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |    163840 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        53 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |  18816682 |
|                DRAM_WRITES               | MBOX0C2 |  44181595 |
+------------------------------------------+---------+-----------+

+-----------------------------------+--------------+
|               Metric              |    Core 0    |
+-----------------------------------+--------------+
|        Runtime (RDTSC) [s]        |       2.1190 |
|        Runtime unhalted [s]       |       0.2883 |
|            Clock [MHz]            |    2288.5110 |
|                CPI                |       0.9799 |
|             Energy [J]            |      11.3524 |
|             Power [W]             |       5.3573 |
|          Energy DRAM [J]          |       3.7685 |
|           Power DRAM [W]          |       1.7784 |
|            DP [MFLOP/s]           |       0.1547 |
|          AVX DP [MFLOP/s]         |            0 |
|          Packed [MUOPS/s]         |       0.0773 |
|          Scalar [MUOPS/s]         | 2.501146e-05 |
|  Memory load bandwidth [MBytes/s] |     568.3113 |
|  Memory load data volume [GBytes] |       1.2043 |
| Memory evict bandwidth [MBytes/s] |    1334.3956 |
| Memory evict data volume [GBytes] |       2.8276 |
|    Memory bandwidth [MBytes/s]    |    1902.7069 |
|    Memory data volume [GBytes]    |       4.0319 |
|       Operational intensity       |       0.0001 |
+-----------------------------------+--------------+

Iteration without GEMM: 3
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 677710326 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 663442587 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 668566176 |
|              PWR_PKG_ENERGY              |   PWR0  |   11.2822 |
|              PWR_DRAM_ENERGY             |   PWR3  |    3.7476 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |    163840 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        55 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |  17971211 |
|                DRAM_WRITES               | MBOX0C2 |  44087339 |
+------------------------------------------+---------+-----------+

+-----------------------------------+--------------+
|               Metric              |    Core 0    |
+-----------------------------------+--------------+
|        Runtime (RDTSC) [s]        |       2.1170 |
|        Runtime unhalted [s]       |       0.2880 |
|            Clock [MHz]            |    2286.2979 |
|                CPI                |       0.9789 |
|             Energy [J]            |      11.2822 |
|             Power [W]             |       5.3293 |
|          Energy DRAM [J]          |       3.7476 |
|           Power DRAM [W]          |       1.7702 |
|            DP [MFLOP/s]           |       0.1548 |
|          AVX DP [MFLOP/s]         |            0 |
|          Packed [MUOPS/s]         |       0.0774 |
|          Scalar [MUOPS/s]         | 2.597980e-05 |
|  Memory load bandwidth [MBytes/s] |     543.2885 |
|  Memory load data volume [GBytes] |       1.1502 |
| Memory evict bandwidth [MBytes/s] |    1332.8063 |
| Memory evict data volume [GBytes] |       2.8216 |
|    Memory bandwidth [MBytes/s]    |    1876.0948 |
|    Memory data volume [GBytes]    |       3.9717 |
|       Operational intensity       |       0.0001 |
+-----------------------------------+--------------+

Iteration without GEMM: 4
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 677710309 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 665308370 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 670591488 |
|              PWR_PKG_ENERGY              |   PWR0  |   11.4386 |
|              PWR_DRAM_ENERGY             |   PWR3  |    3.7845 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |    163840 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        53 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |  19442708 |
|                DRAM_WRITES               | MBOX0C2 |  44202215 |
+------------------------------------------+---------+-----------+

+-----------------------------------+--------------+
|               Metric              |    Core 0    |
+-----------------------------------+--------------+
|        Runtime (RDTSC) [s]        |       2.1212 |
|        Runtime unhalted [s]       |       0.2888 |
|            Clock [MHz]            |    2285.8003 |
|                CPI                |       0.9817 |
|             Energy [J]            |      11.4386 |
|             Power [W]             |       5.3925 |
|          Energy DRAM [J]          |       3.7845 |
|           Power DRAM [W]          |       1.7841 |
|            DP [MFLOP/s]           |       0.1545 |
|          AVX DP [MFLOP/s]         |            0 |
|          Packed [MUOPS/s]         |       0.0772 |
|          Scalar [MUOPS/s]         | 2.498572e-05 |
|  Memory load bandwidth [MBytes/s] |     586.6144 |
|  Memory load data volume [GBytes] |       1.2443 |
| Memory evict bandwidth [MBytes/s] |    1333.6443 |
| Memory evict data volume [GBytes] |       2.8289 |
|    Memory bandwidth [MBytes/s]    |    1920.2587 |
|    Memory data volume [GBytes]    |       4.0733 |
|       Operational intensity       |       0.0001 |
+-----------------------------------+--------------+

Iteration without GEMM: 5
--------------------------------------------------------------------------------
CPU name:	Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz
CPU type:	Intel Skylake processor
CPU clock:	2.30 GHz
--------------------------------------------------------------------------------
Sleeping longer as likwid_sleep() called without prior initialization
Sleeping longer as likwid_sleep() called without prior initialization

gemm call NN:	Matrix size : C[1x1024]=A[1x2]xB[2x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1024]=A[1x1024]xB[1024x1024]
gemm call NN:	Matrix size : C[1x1]=A[1x1024]xB[1024x1]
Details of Neural Network
Number of Input neurons : 2 
Number of hidden layers : 320 
Number of Output Neurons : 1 
Number of hidden neurons in each layers :  [0] = 1024	 [1] = 1024	 [2] = 1024	 [3] = 1024	 [4] = 1024	 [5] = 1024	 [6] = 1024	 [7] = 1024	 [8] = 1024	 [9] = 1024	 [10] = 1024	 [11] = 1024	 [12] = 1024	 [13] = 1024	 [14] = 1024	 [15] = 1024	 [16] = 1024	 [17] = 1024	 [18] = 1024	 [19] = 1024	 [20] = 1024	 [21] = 1024	 [22] = 1024	 [23] = 1024	 [24] = 1024	 [25] = 1024	 [26] = 1024	 [27] = 1024	 [28] = 1024	 [29] = 1024	 [30] = 1024	 [31] = 1024	 [32] = 1024	 [33] = 1024	 [34] = 1024	 [35] = 1024	 [36] = 1024	 [37] = 1024	 [38] = 1024	 [39] = 1024	 [40] = 1024	 [41] = 1024	 [42] = 1024	 [43] = 1024	 [44] = 1024	 [45] = 1024	 [46] = 1024	 [47] = 1024	 [48] = 1024	 [49] = 1024	 [50] = 1024	 [51] = 1024	 [52] = 1024	 [53] = 1024	 [54] = 1024	 [55] = 1024	 [56] = 1024	 [57] = 1024	 [58] = 1024	 [59] = 1024	 [60] = 1024	 [61] = 1024	 [62] = 1024	 [63] = 1024	 [64] = 1024	 [65] = 1024	 [66] = 1024	 [67] = 1024	 [68] = 1024	 [69] = 1024	 [70] = 1024	 [71] = 1024	 [72] = 1024	 [73] = 1024	 [74] = 1024	 [75] = 1024	 [76] = 1024	 [77] = 1024	 [78] = 1024	 [79] = 1024	 [80] = 1024	 [81] = 1024	 [82] = 1024	 [83] = 1024	 [84] = 1024	 [85] = 1024	 [86] = 1024	 [87] = 1024	 [88] = 1024	 [89] = 1024	 [90] = 1024	 [91] = 1024	 [92] = 1024	 [93] = 1024	 [94] = 1024	 [95] = 1024	 [96] = 1024	 [97] = 1024	 [98] = 1024	 [99] = 1024	 [100] = 1024	 [101] = 1024	 [102] = 1024	 [103] = 1024	 [104] = 1024	 [105] = 1024	 [106] = 1024	 [107] = 1024	 [108] = 1024	 [109] = 1024	 [110] = 1024	 [111] = 1024	 [112] = 1024	 [113] = 1024	 [114] = 1024	 [115] = 1024	 [116] = 1024	 [117] = 1024	 [118] = 1024	 [119] = 1024	 [120] = 1024	 [121] = 1024	 [122] = 1024	 [123] = 1024	 [124] = 1024	 [125] = 1024	 [126] = 1024	 [127] = 1024	 [128] = 1024	 [129] = 1024	 [130] = 1024	 [131] = 1024	 [132] = 1024	 [133] = 1024	 [134] = 1024	 [135] = 1024	 [136] = 1024	 [137] = 1024	 [138] = 1024	 [139] = 1024	 [140] = 1024	 [141] = 1024	 [142] = 1024	 [143] = 1024	 [144] = 1024	 [145] = 1024	 [146] = 1024	 [147] = 1024	 [148] = 1024	 [149] = 1024	 [150] = 1024	 [151] = 1024	 [152] = 1024	 [153] = 1024	 [154] = 1024	 [155] = 1024	 [156] = 1024	 [157] = 1024	 [158] = 1024	 [159] = 1024	 [160] = 1024	 [161] = 1024	 [162] = 1024	 [163] = 1024	 [164] = 1024	 [165] = 1024	 [166] = 1024	 [167] = 1024	 [168] = 1024	 [169] = 1024	 [170] = 1024	 [171] = 1024	 [172] = 1024	 [173] = 1024	 [174] = 1024	 [175] = 1024	 [176] = 1024	 [177] = 1024	 [178] = 1024	 [179] = 1024	 [180] = 1024	 [181] = 1024	 [182] = 1024	 [183] = 1024	 [184] = 1024	 [185] = 1024	 [186] = 1024	 [187] = 1024	 [188] = 1024	 [189] = 1024	 [190] = 1024	 [191] = 1024	 [192] = 1024	 [193] = 1024	 [194] = 1024	 [195] = 1024	 [196] = 1024	 [197] = 1024	 [198] = 1024	 [199] = 1024	 [200] = 1024	 [201] = 1024	 [202] = 1024	 [203] = 1024	 [204] = 1024	 [205] = 1024	 [206] = 1024	 [207] = 1024	 [208] = 1024	 [209] = 1024	 [210] = 1024	 [211] = 1024	 [212] = 1024	 [213] = 1024	 [214] = 1024	 [215] = 1024	 [216] = 1024	 [217] = 1024	 [218] = 1024	 [219] = 1024	 [220] = 1024	 [221] = 1024	 [222] = 1024	 [223] = 1024	 [224] = 1024	 [225] = 1024	 [226] = 1024	 [227] = 1024	 [228] = 1024	 [229] = 1024	 [230] = 1024	 [231] = 1024	 [232] = 1024	 [233] = 1024	 [234] = 1024	 [235] = 1024	 [236] = 1024	 [237] = 1024	 [238] = 1024	 [239] = 1024	 [240] = 1024	 [241] = 1024	 [242] = 1024	 [243] = 1024	 [244] = 1024	 [245] = 1024	 [246] = 1024	 [247] = 1024	 [248] = 1024	 [249] = 1024	 [250] = 1024	 [251] = 1024	 [252] = 1024	 [253] = 1024	 [254] = 1024	 [255] = 1024	 [256] = 1024	 [257] = 1024	 [258] = 1024	 [259] = 1024	 [260] = 1024	 [261] = 1024	 [262] = 1024	 [263] = 1024	 [264] = 1024	 [265] = 1024	 [266] = 1024	 [267] = 1024	 [268] = 1024	 [269] = 1024	 [270] = 1024	 [271] = 1024	 [272] = 1024	 [273] = 1024	 [274] = 1024	 [275] = 1024	 [276] = 1024	 [277] = 1024	 [278] = 1024	 [279] = 1024	 [280] = 1024	 [281] = 1024	 [282] = 1024	 [283] = 1024	 [284] = 1024	 [285] = 1024	 [286] = 1024	 [287] = 1024	 [288] = 1024	 [289] = 1024	 [290] = 1024	 [291] = 1024	 [292] = 1024	 [293] = 1024	 [294] = 1024	 [295] = 1024	 [296] = 1024	 [297] = 1024	 [298] = 1024	 [299] = 1024	 [300] = 1024	 [301] = 1024	 [302] = 1024	 [303] = 1024	 [304] = 1024	 [305] = 1024	 [306] = 1024	 [307] = 1024	 [308] = 1024	 [309] = 1024	 [310] = 1024	 [311] = 1024	 [312] = 1024	 [313] = 1024	 [314] = 1024	 [315] = 1024	 [316] = 1024	 [317] = 1024	 [318] = 1024	 [319] = 1024	
Input Neurons: 1.000000	1.000000	
Output Value: 
Output: 1.000000
--------------------------------------------------------------------------------
Group 1: MEM_DP
+------------------------------------------+---------+-----------+
|                   Event                  | Counter |   Core 0  |
+------------------------------------------+---------+-----------+
|             INSTR_RETIRED_ANY            |  FIXC0  | 677710335 |
|           CPU_CLK_UNHALTED_CORE          |  FIXC1  | 663111905 |
|           CPU_CLK_UNHALTED_REF           |  FIXC2  | 668897664 |
|              PWR_PKG_ENERGY              |   PWR0  |   11.3589 |
|              PWR_DRAM_ENERGY             |   PWR3  |    3.7548 |
| FP_ARITH_INST_RETIRED_128B_PACKED_DOUBLE |   PMC0  |    163840 |
|    FP_ARITH_INST_RETIRED_SCALAR_DOUBLE   |   PMC1  |        55 |
| FP_ARITH_INST_RETIRED_256B_PACKED_DOUBLE |   PMC2  |         0 |
|                DRAM_READS                | MBOX0C1 |  18389022 |
|                DRAM_WRITES               | MBOX0C2 |  44124397 |
+------------------------------------------+---------+-----------+

+-----------------------------------+--------------+
|               Metric              |    Core 0    |
+-----------------------------------+--------------+
|        Runtime (RDTSC) [s]        |       2.1161 |
|        Runtime unhalted [s]       |       0.2878 |
|            Clock [MHz]            |    2283.9272 |
|                CPI                |       0.9785 |
|             Energy [J]            |      11.3589 |
|             Power [W]             |       5.3678 |
|          Energy DRAM [J]          |       3.7548 |
|           Power DRAM [W]          |       1.7744 |
|            DP [MFLOP/s]           |       0.1549 |
|          AVX DP [MFLOP/s]         |            0 |
|          Packed [MUOPS/s]         |       0.0774 |
|          Scalar [MUOPS/s]         | 2.599092e-05 |
|  Memory load bandwidth [MBytes/s] |     556.1572 |
|  Memory load data volume [GBytes] |       1.1769 |
| Memory evict bandwidth [MBytes/s] |    1334.4973 |
| Memory evict data volume [GBytes] |       2.8240 |
|    Memory bandwidth [MBytes/s]    |    1890.6545 |
|    Memory data volume [GBytes]    |       4.0009 |
|       Operational intensity       |       0.0001 |
+-----------------------------------+--------------+

